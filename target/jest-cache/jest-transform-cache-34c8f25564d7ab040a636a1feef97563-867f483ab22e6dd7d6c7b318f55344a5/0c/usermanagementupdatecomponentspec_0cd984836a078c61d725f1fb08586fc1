2dc8e235ced861e7c79da884692e964b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const authority_constants_1 = require("app/config/authority.constants");
const user_management_service_1 = require("../service/user-management.service");
const user_management_model_1 = require("../user-management.model");
const user_management_update_component_1 = require("./user-management-update.component");
describe('Component Tests', () => {
    describe('User Management Update Component', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [user_management_update_component_1.UserManagementUpdateComponent],
                providers: [
                    forms_1.FormBuilder,
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: {
                            data: rxjs_1.of({ user: new user_management_model_1.User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [authority_constants_1.Authority.USER], 'admin') }),
                        },
                    },
                ],
            })
                .overrideTemplate(user_management_update_component_1.UserManagementUpdateComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(user_management_update_component_1.UserManagementUpdateComponent);
            comp = fixture.componentInstance;
            service = testing_1.TestBed.inject(user_management_service_1.UserManagementService);
        });
        describe('OnInit', () => {
            it('Should load authorities and language on init', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                jest.spyOn(service, 'authorities').mockReturnValue(rxjs_1.of(['USER']));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.authorities).toHaveBeenCalled();
                expect(comp.authorities).toEqual(['USER']);
            })));
        });
        describe('save', () => {
            it('Should call update service on save for existing user', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new user_management_model_1.User(123);
                jest.spyOn(service, 'update').mockReturnValue(rxjs_1.of(entity));
                comp.user = entity;
                comp.editForm.patchValue({ id: entity.id });
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.update).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            })));
            it('Should call create service on save for new user', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new user_management_model_1.User();
                jest.spyOn(service, 'create').mockReturnValue(rxjs_1.of(entity));
                comp.user = entity;
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.create).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            })));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,