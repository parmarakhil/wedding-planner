{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/state-storage.service');\n\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\n\nimport { Account } from 'app/core/auth/account.model';\nimport { Authority } from 'app/config/authority.constants';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\nimport { AccountService } from './account.service';\n\nfunction accountWithAuthorities(authorities: string[]): Account {\n  return {\n    activated: true,\n    authorities,\n    email: '',\n    firstName: '',\n    langKey: '',\n    lastName: '',\n    login: '',\n    imageUrl: '',\n  };\n}\n\ndescribe('Service Tests', () => {\n  describe('Account Service', () => {\n    let service: AccountService;\n    let applicationConfigService: ApplicationConfigService;\n    let httpMock: HttpTestingController;\n    let mockStorageService: StateStorageService;\n    let mockRouter: Router;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n        providers: [StateStorageService, Router],\n      });\n\n      service = TestBed.inject(AccountService);\n      applicationConfigService = TestBed.inject(ApplicationConfigService);\n      httpMock = TestBed.inject(HttpTestingController);\n      mockStorageService = TestBed.inject(StateStorageService);\n      mockRouter = TestBed.inject(Router);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('save', () => {\n      it('should call account saving endpoint with correct values', () => {\n        // GIVEN\n        const account = accountWithAuthorities([]);\n\n        // WHEN\n        service.save(account).subscribe();\n        const testRequest = httpMock.expectOne({ method: 'POST', url: applicationConfigService.getEndpointFor('api/account') });\n        testRequest.flush({});\n\n        // THEN\n        expect(testRequest.request.body).toEqual(account);\n      });\n    });\n\n    describe('authenticate', () => {\n      it('authenticationState should emit null if input is null', () => {\n        // GIVEN\n        let userIdentity: Account | null = accountWithAuthorities([]);\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(null);\n\n        // THEN\n        expect(userIdentity).toBeNull();\n        expect(service.isAuthenticated()).toBe(false);\n      });\n\n      it('authenticationState should emit the same account as was in input parameter', () => {\n        // GIVEN\n        const expectedResult = accountWithAuthorities([]);\n        let userIdentity: Account | null = null;\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(expectedResult);\n\n        // THEN\n        expect(userIdentity).toEqual(expectedResult);\n        expect(service.isAuthenticated()).toBe(true);\n      });\n    });\n\n    describe('identity', () => {\n      it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {\n        // Given the user is authenticated\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({});\n\n        // When I call\n        service.identity().subscribe();\n\n        // Then there is no second request\n        httpMock.expectNone({ method: 'GET' });\n\n        // When I log out\n        service.authenticate(null);\n        // and then call\n        service.identity().subscribe();\n\n        // Then there is a new request\n        httpMock.expectOne({ method: 'GET' });\n      });\n\n      describe('navigateToStoredUrl', () => {\n        it('should navigate to the previous stored url post successful authentication', () => {\n          // GIVEN\n          mockStorageService.getUrl = jest.fn(() => 'admin/users?page=0');\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n          expect(mockStorageService.clearUrl).toHaveBeenCalledTimes(1);\n          expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('admin/users?page=0');\n        });\n\n        it('should not navigate to the previous stored url when authentication fails', () => {\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));\n\n          // THEN\n          expect(mockStorageService.getUrl).not.toHaveBeenCalled();\n          expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n          expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n        });\n\n        it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {\n          // GIVEN\n          mockStorageService.getUrl = jest.fn(() => null);\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n          expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n          expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n        });\n      });\n    });\n\n    describe('hasAnyAuthority', () => {\n      describe('hasAnyAuthority string parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.ADMIN);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n\n      describe('hasAnyAuthority array parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority([Authority.USER]);\n          expect(hasAuthority).toBeFalsy();\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.USER, Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n    });\n  });\n});\n"],"version":3}