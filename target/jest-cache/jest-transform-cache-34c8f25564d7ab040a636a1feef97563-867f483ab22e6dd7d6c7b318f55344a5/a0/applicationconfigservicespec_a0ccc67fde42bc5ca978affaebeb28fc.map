{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.spec.ts","mappings":";;AAAA,mDAAgD;AAEhD,6EAAwE;AAExE,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,OAAiC,CAAC;IAEtC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;QACnC,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,qDAAwB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\n\nimport { ApplicationConfigService } from './application-config.service';\n\ndescribe('ApplicationConfigService', () => {\n  let service: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(ApplicationConfigService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('without prefix', () => {\n    it('should return correctly', () => {\n      expect(service.getEndpointFor('api')).toEqual('api');\n    });\n\n    it('should return correctly when passing microservice', () => {\n      expect(service.getEndpointFor('api', 'microservice')).toEqual('services/microservice/api');\n    });\n  });\n\n  describe('with prefix', () => {\n    beforeEach(() => {\n      service.setEndpointPrefix('prefix/');\n    });\n\n    it('should return correctly', () => {\n      expect(service.getEndpointFor('api')).toEqual('prefix/api');\n    });\n\n    it('should return correctly when passing microservice', () => {\n      expect(service.getEndpointFor('api', 'microservice')).toEqual('prefix/services/microservice/api');\n    });\n  });\n});\n"],"version":3}