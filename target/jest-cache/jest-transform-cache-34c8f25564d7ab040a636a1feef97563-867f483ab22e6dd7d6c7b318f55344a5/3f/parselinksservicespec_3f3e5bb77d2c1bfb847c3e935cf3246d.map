{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.spec.ts","mappings":";;AAAA,mDAAwD;AAExD,+DAAmD;AAEnD,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,SAAS,EAAE,CAAC,gCAAU,CAAC;aACxB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,gBAAM,CAAC,CAAC,gCAAU,CAAC,EAAE,CAAC,OAAmB,EAAE,EAAE;YACnG,MAAM,CAAC;gBACL,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,iDAAiD,EAAE,gBAAM,CAAC,CAAC,gCAAU,CAAC,EAAE,CAAC,OAAmB,EAAE,EAAE;YACjG,MAAM,CAAC;gBACL,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,qDAAqD,EAAE,gBAAM,CAAC,CAAC,gCAAU,CAAC,EAAE,CAAC,OAAmB,EAAE,EAAE;YACrG,MAAM,CAAC;gBACL,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,6CAA6C,EAAE,gBAAM,CAAC,CAAC,gCAAU,CAAC,EAAE,CAAC,OAAmB,EAAE,EAAE;YAC7F,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,qFAAqF,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.spec.ts"],"sourcesContent":["import { inject, TestBed } from '@angular/core/testing';\n\nimport { ParseLinks } from './parse-links.service';\n\ndescribe('Parse links service test', () => {\n  describe('Parse Links Service Test', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        providers: [ParseLinks],\n      });\n    });\n\n    it('should throw an error when passed an empty string', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('');\n      }).toThrow(new Error('input must not be of zero length'));\n    }));\n\n    it('should throw an error when passed without comma', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should throw an error when passed without semicolon', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test,test2');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should return links when headers are passed', inject([ParseLinks], (service: ParseLinks) => {\n      const links = { last: 0, first: 0 };\n      expect(service.parse(' </api/audits?page=0&size=20>; rel=\"last\",</api/audits?page=0&size=20>; rel=\"first\"')).toEqual(links);\n    }));\n  });\n});\n"],"version":3}