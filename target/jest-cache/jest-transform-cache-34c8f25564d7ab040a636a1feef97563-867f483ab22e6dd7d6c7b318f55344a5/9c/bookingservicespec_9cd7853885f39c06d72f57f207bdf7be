e8dbf52f2a5eb09f1b2cc15d09a76868
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const dayjs = require("dayjs");
const input_constants_1 = require("app/config/input.constants");
const plan_model_1 = require("app/entities/enumerations/plan.model");
const booking_model_1 = require("../booking.model");
const booking_service_1 = require("./booking.service");
describe('Service Tests', () => {
    describe('Booking Service', () => {
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            service = testing_1.TestBed.inject(booking_service_1.BookingService);
            httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
            currentDate = dayjs();
            elemDefault = {
                id: 0,
                eventDate: currentDate,
                venue: 'AAAAAAA',
                plan: plan_model_1.Plan.BRONZE,
                createdDate: currentDate,
                contactNumber: 'AAAAAAA',
                emailId: 'AAAAAAA',
                userName: 'AAAAAAA',
                userId: 'AAAAAAA',
            };
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    eventDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    createdDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Booking', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    eventDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    createdDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    eventDate: currentDate,
                    createdDate: currentDate,
                }, returnedFromService);
                service.create(new booking_model_1.Booking()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Booking', () => {
                const returnedFromService = Object.assign({
                    id: 1,
                    eventDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    venue: 'BBBBBB',
                    plan: 'BBBBBB',
                    createdDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    contactNumber: 'BBBBBB',
                    emailId: 'BBBBBB',
                    userName: 'BBBBBB',
                    userId: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    eventDate: currentDate,
                    createdDate: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should partial update a Booking', () => {
                const patchObject = Object.assign({
                    contactNumber: 'BBBBBB',
                    userId: 'BBBBBB',
                }, new booking_model_1.Booking());
                const returnedFromService = Object.assign(patchObject, elemDefault);
                const expected = Object.assign({
                    eventDate: currentDate,
                    createdDate: currentDate,
                }, returnedFromService);
                service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PATCH' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Booking', () => {
                const returnedFromService = Object.assign({
                    id: 1,
                    eventDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    venue: 'BBBBBB',
                    plan: 'BBBBBB',
                    createdDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    contactNumber: 'BBBBBB',
                    emailId: 'BBBBBB',
                    userName: 'BBBBBB',
                    userId: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    eventDate: currentDate,
                    createdDate: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Booking', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
            describe('addBookingToCollectionIfMissing', () => {
                it('should add a Booking to an empty array', () => {
                    const booking = { id: 123 };
                    expectedResult = service.addBookingToCollectionIfMissing([], booking);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(booking);
                });
                it('should not add a Booking to an array that contains it', () => {
                    const booking = { id: 123 };
                    const bookingCollection = [
                        Object.assign({}, booking),
                        { id: 456 },
                    ];
                    expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);
                    expect(expectedResult).toHaveLength(2);
                });
                it("should add a Booking to an array that doesn't contain it", () => {
                    const booking = { id: 123 };
                    const bookingCollection = [{ id: 456 }];
                    expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(booking);
                });
                it('should add only unique Booking to an array', () => {
                    const bookingArray = [{ id: 123 }, { id: 456 }, { id: 52973 }];
                    const bookingCollection = [{ id: 123 }];
                    expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, ...bookingArray);
                    expect(expectedResult).toHaveLength(3);
                });
                it('should accept varargs', () => {
                    const booking = { id: 123 };
                    const booking2 = { id: 456 };
                    expectedResult = service.addBookingToCollectionIfMissing([], booking, booking2);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(booking);
                    expect(expectedResult).toContain(booking2);
                });
                it('should accept null and undefined values', () => {
                    const booking = { id: 123 };
                    expectedResult = service.addBookingToCollectionIfMissing([], null, booking, undefined);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(booking);
                });
                it('should return initial array if no Booking is added', () => {
                    const bookingCollection = [{ id: 123 }];
                    expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, undefined, null);
                    expect(expectedResult).toEqual(bookingCollection);
                });
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,