553fb276347e876cee505f06f9f1122a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const event_manager_service_1 = require("./event-manager.service");
describe('Event Manager tests', () => {
    describe('EventWithContent', () => {
        it('should create correctly EventWithContent', () => {
            // WHEN
            const eventWithContent = new event_manager_service_1.EventWithContent('name', 'content');
            // THEN
            expect(eventWithContent).toEqual({ name: 'name', content: 'content' });
        });
    });
    describe('EventManager', () => {
        let recievedEvent;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                providers: [event_manager_service_1.EventManager],
            });
            recievedEvent = null;
        });
        it('should not fail when nosubscriber and broadcasting', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            expect(eventManager.observer).toBeUndefined();
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted EventWithContent', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast({ name: 'unrelatedModifier', content: 'unreleated modification' });
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted string', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast('modifier');
            // THEN
            expect(recievedEvent).toEqual('modifier');
        }));
        it('should subscribe to multiple events', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe(['modifier', 'modifier2'], (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
            // WHEN
            eventManager.broadcast('modifier2');
            // THEN
            expect(recievedEvent).toEqual('modifier2');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvY29yZS91dGlsL2V2ZW50LW1hbmFnZXIuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXdEO0FBRXhELG1FQUF5RTtBQUV6RSxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtZQUNsRCxPQUFPO1lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHdDQUFnQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUVqRSxPQUFPO1lBQ1AsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN6RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsSUFBSSxhQUF3RCxDQUFDO1FBRTdELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixTQUFTLEVBQUUsQ0FBQyxvQ0FBWSxDQUFDO2FBQzFCLENBQUMsQ0FBQztZQUNILGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLG9DQUFZLENBQUMsRUFBRSxDQUFDLFlBQTBCLEVBQUUsRUFBRTtZQUM3RyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzlDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxvQkFBb0Is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ZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvY29yZS91dGlsL2V2ZW50LW1hbmFnZXIuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IEV2ZW50TWFuYWdlciwgRXZlbnRXaXRoQ29udGVudCB9IGZyb20gJy4vZXZlbnQtbWFuYWdlci5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0V2ZW50IE1hbmFnZXIgdGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdFdmVudFdpdGhDb250ZW50JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGNvcnJlY3RseSBFdmVudFdpdGhDb250ZW50JywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgZXZlbnRXaXRoQ29udGVudCA9IG5ldyBFdmVudFdpdGhDb250ZW50KCduYW1lJywgJ2NvbnRlbnQnKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGV2ZW50V2l0aENvbnRlbnQpLnRvRXF1YWwoeyBuYW1lOiAnbmFtZScsIGNvbnRlbnQ6ICdjb250ZW50JyB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0V2ZW50TWFuYWdlcicsICgpID0+IHtcbiAgICBsZXQgcmVjaWV2ZWRFdmVudDogRXZlbnRXaXRoQ29udGVudDx1bmtub3duPiB8IHN0cmluZyB8IG51bGw7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIHByb3ZpZGVyczogW0V2ZW50TWFuYWdlcl0sXG4gICAgICB9KTtcbiAgICAgIHJlY2lldmVkRXZlbnQgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgZmFpbCB3aGVuIG5vc3Vic2NyaWJlciBhbmQgYnJvYWRjYXN0aW5nJywgaW5qZWN0KFtFdmVudE1hbmFnZXJdLCAoZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIpID0+IHtcbiAgICAgIGV4cGVjdChldmVudE1hbmFnZXIub2JzZXJ2ZXIpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoeyBuYW1lOiAnbW9kaWZpZXInLCBjb250ZW50OiAnbW9kaWZpZWQgc29tZXRoaW5nJyB9KTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBvYnNlcnZhYmxlIGFuZCBjYWxsYmFjayB3aGVuIGJyb2FkY2FzdGVkIEV2ZW50V2l0aENvbnRlbnQnLCBpbmplY3QoXG4gICAgICBbRXZlbnRNYW5hZ2VyXSxcbiAgICAgIChldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBldmVudE1hbmFnZXIuc3Vic2NyaWJlKCdtb2RpZmllcicsIChldmVudDogRXZlbnRXaXRoQ29udGVudDx1bmtub3duPiB8IHN0cmluZykgPT4gKHJlY2lldmVkRXZlbnQgPSBldmVudCkpO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCh7IG5hbWU6ICd1bnJlbGF0ZWRNb2RpZmllcicsIGNvbnRlbnQ6ICd1bnJlbGVhdGVkIG1vZGlmaWNhdGlvbicgfSk7XG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KHsgbmFtZTogJ21vZGlmaWVyJywgY29udGVudDogJ21vZGlmaWVkIHNvbWV0aGluZycgfSk7XG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvRXF1YWwoeyBuYW1lOiAnbW9kaWZpZXInLCBjb250ZW50OiAnbW9kaWZpZWQgc29tZXRoaW5nJyB9KTtcbiAgICAgIH1cbiAgICApKTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIG9ic2VydmFibGUgYW5kIGNhbGxiYWNrIHdoZW4gYnJvYWRjYXN0ZWQgc3RyaW5nJywgaW5qZWN0KFtFdmVudE1hbmFnZXJdLCAoZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBldmVudE1hbmFnZXIuc3Vic2NyaWJlKCdtb2RpZmllcicsIChldmVudDogRXZlbnRXaXRoQ29udGVudDx1bmtub3duPiB8IHN0cmluZykgPT4gKHJlY2lldmVkRXZlbnQgPSBldmVudCkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KCd1bnJlbGF0ZWRNb2RpZmllcicpO1xuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoJ21vZGlmaWVyJyk7XG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9FcXVhbCgnbW9kaWZpZXInKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHN1YnNjcmliZSB0byBtdWx0aXBsZSBldmVudHMnLCBpbmplY3QoW0V2ZW50TWFuYWdlcl0sIChldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGV2ZW50TWFuYWdlci5zdWJzY3JpYmUoWydtb2RpZmllcicsICdtb2RpZmllcjInXSwgKGV2ZW50OiBFdmVudFdpdGhDb250ZW50PHVua25vd24+IHwgc3RyaW5nKSA9PiAocmVjaWV2ZWRFdmVudCA9IGV2ZW50KSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoJ3VucmVsYXRlZE1vZGlmaWVyJyk7XG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9CZU51bGwoKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCh7IG5hbWU6ICdtb2RpZmllcicsIGNvbnRlbnQ6ICdtb2RpZmllZCBzb21ldGhpbmcnIH0pO1xuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvRXF1YWwoeyBuYW1lOiAnbW9kaWZpZXInLCBjb250ZW50OiAnbW9kaWZpZWQgc29tZXRoaW5nJyB9KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCgnbW9kaWZpZXIyJyk7XG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9FcXVhbCgnbW9kaWZpZXIyJyk7XG4gICAgfSkpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9