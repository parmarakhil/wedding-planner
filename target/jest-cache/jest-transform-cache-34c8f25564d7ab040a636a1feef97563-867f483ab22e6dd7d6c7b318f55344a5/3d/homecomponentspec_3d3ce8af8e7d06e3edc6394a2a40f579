e5b8781d177a45ee87a8c1347c7ecc47
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
jest.mock('@angular/router');
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const home_component_1 = require("./home.component");
describe('Component Tests', () => {
    describe('Home Component', () => {
        let comp;
        let fixture;
        let mockAccountService;
        let mockRouter;
        const account = {
            activated: true,
            authorities: [],
            email: '',
            firstName: null,
            langKey: '',
            lastName: null,
            login: 'login',
            imageUrl: null,
        };
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [home_component_1.HomeComponent],
                providers: [account_service_1.AccountService, router_1.Router],
            })
                .overrideTemplate(home_component_1.HomeComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(home_component_1.HomeComponent);
            comp = fixture.componentInstance;
            mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
            mockRouter = testing_1.TestBed.inject(router_1.Router);
        });
        describe('ngOnInit', () => {
            it('Should synchronize account variable with current account', () => {
                // GIVEN
                const authenticationState = new rxjs_1.Subject();
                mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(comp.account).toBeNull();
                // WHEN
                authenticationState.next(account);
                // THEN
                expect(comp.account).toEqual(account);
                // WHEN
                authenticationState.next(null);
                // THEN
                expect(comp.account).toBeNull();
            });
        });
        describe('login', () => {
            it('Should navigate to /login on login', () => {
                // WHEN
                comp.login();
                // THEN
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/login']);
            });
        });
        describe('ngOnDestroy', () => {
            it('Should destroy authentication state subscription on component destroy', () => {
                // GIVEN
                const authenticationState = new rxjs_1.Subject();
                mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(comp.account).toBeNull();
                // WHEN
                authenticationState.next(account);
                // THEN
                expect(comp.account).toEqual(account);
                // WHEN
                comp.ngOnDestroy();
                authenticationState.next(null);
                // THEN
                expect(comp.account).toEqual(account);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,