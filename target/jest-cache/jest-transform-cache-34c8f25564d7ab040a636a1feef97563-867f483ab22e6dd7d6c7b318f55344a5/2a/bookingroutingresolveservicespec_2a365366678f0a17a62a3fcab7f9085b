f512734d37d7bfebec7dbc4cdfd49b1c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const booking_model_1 = require("../booking.model");
const booking_service_1 = require("../service/booking.service");
const booking_routing_resolve_service_1 = require("./booking-routing-resolve.service");
describe('Service Tests', () => {
    describe('Booking routing resolve service', () => {
        let mockRouter;
        let mockActivatedRouteSnapshot;
        let routingResolveService;
        let service;
        let resultBooking;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                providers: [router_1.Router, router_1.ActivatedRouteSnapshot],
            });
            mockRouter = testing_1.TestBed.inject(router_1.Router);
            mockActivatedRouteSnapshot = testing_1.TestBed.inject(router_1.ActivatedRouteSnapshot);
            routingResolveService = testing_1.TestBed.inject(booking_routing_resolve_service_1.BookingRoutingResolveService);
            service = testing_1.TestBed.inject(booking_service_1.BookingService);
            resultBooking = undefined;
        });
        describe('resolve', () => {
            it('should return IBooking returned by find', () => {
                // GIVEN
                service.find = jest.fn(id => rxjs_1.of(new http_1.HttpResponse({ body: { id } })));
                mockActivatedRouteSnapshot.params = { id: 123 };
                // WHEN
                routingResolveService.resolve(mockActivatedRouteSnapshot).subscribe(result => {
                    resultBooking = result;
                });
                // THEN
                expect(service.find).toBeCalledWith(123);
                expect(resultBooking).toEqual({ id: 123 });
            });
            it('should return new IBooking if id is not provided', () => {
                // GIVEN
                service.find = jest.fn();
                mockActivatedRouteSnapshot.params = {};
                // WHEN
                routingResolveService.resolve(mockActivatedRouteSnapshot).subscribe(result => {
                    resultBooking = result;
                });
                // THEN
                expect(service.find).not.toBeCalled();
                expect(resultBooking).toEqual(new booking_model_1.Booking());
            });
            it('should route to 404 page if data not found in server', () => {
                // GIVEN
                jest.spyOn(service, 'find').mockReturnValue(rxjs_1.of(new http_1.HttpResponse({ body: null })));
                mockActivatedRouteSnapshot.params = { id: 123 };
                // WHEN
                routingResolveService.resolve(mockActivatedRouteSnapshot).subscribe(result => {
                    resultBooking = result;
                });
                // THEN
                expect(service.find).toBeCalledWith(123);
                expect(resultBooking).toEqual(undefined);
                expect(mockRouter.navigate).toHaveBeenCalledWith(['404']);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvZW50aXRpZXMvYm9va2luZy9yb3V0ZS9ib29raW5nLXJvdXRpbmctcmVzb2x2ZS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFN0IsbURBQWdEO0FBQ2hELCtDQUFvRDtBQUNwRCwwREFBdUU7QUFDdkUsNENBQWlFO0FBQ2pFLCtCQUEwQjtBQUUxQixvREFBcUQ7QUFDckQsZ0VBQTREO0FBRTVELHVGQUFpRjtBQUVqRixRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQy9DLElBQUksVUFBa0IsQ0FBQztRQUN2QixJQUFJLDBCQUFrRCxDQUFDO1FBQ3ZELElBQUkscUJBQW1ELENBQUM7UUFDeEQsSUFBSSxPQUF1QixDQUFDO1FBQzVCLElBQUksYUFBbUMsQ0FBQztRQUV4QyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7Z0JBQ2xDLFNBQVMsRUFBRSxDQUFDLGVBQU0sRUFBRSwrQkFBc0IsQ0FBQzthQUM1QyxDQUFDLENBQUM7WUFDSCxVQUFVLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsZUFBTSxDQUFDLENBQUM7WUFDcEMsMEJBQTBCLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsK0JBQXNCLENBQUMsQ0FBQztZQUNwRSxxQkFBcUIsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw4REFBNEIsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxnQ0FBYyxDQUFDLENBQUM7WUFDekMsYUFBYSxHQUFHLFNBQVMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQ3ZCLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7Z0JBQ2pELFFBQVE7Z0JBQ1IsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBRSxDQUFDLElBQUksbUJBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JFLDBCQUEwQixDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFFaEQsT0FBTztnQkFDUCxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzNFLGFBQWEsR0FBRyxNQUFNLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQyxDQUFDO2dCQUVILE9BQU87Z0JBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7Z0JBQzFELFFBQVE7Z0JBQ1IsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3pCLDBCQUEwQixDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBRXZDLE9BQU87Z0JBQ1AscUJBQXFCLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUMzRSxhQUFhLEdBQUcsTUFBTSxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQztnQkFFSCxPQUFPO2dCQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUN0QyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksdUJBQU8sRUFBRSxDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO2dCQUM5RCxRQUFRO2dCQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFFLENBQUMsSUFBSSxtQkFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQTBCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEcsMEJBQTBCLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUVoRCxPQUFPO2dCQUNQLHFCQUFxQixDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDM0UsYUFBYSxHQUFHLE1BQU0sQ0FBQztnQkFDekIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsT0FBTztnQkFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDekMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvZW50aXRpZXMvYm9va2luZy9yb3V0ZS9ib29raW5nLXJvdXRpbmctcmVzb2x2ZS5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdAYW5ndWxhci9yb3V0ZXInKTtcblxuaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IElCb29raW5nLCBCb29raW5nIH0gZnJvbSAnLi4vYm9va2luZy5tb2RlbCc7XG5pbXBvcnQgeyBCb29raW5nU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvYm9va2luZy5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQm9va2luZ1JvdXRpbmdSZXNvbHZlU2VydmljZSB9IGZyb20gJy4vYm9va2luZy1yb3V0aW5nLXJlc29sdmUuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdTZXJ2aWNlIFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnQm9va2luZyByb3V0aW5nIHJlc29sdmUgc2VydmljZScsICgpID0+IHtcbiAgICBsZXQgbW9ja1JvdXRlcjogUm91dGVyO1xuICAgIGxldCBtb2NrQWN0aXZhdGVkUm91dGVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcbiAgICBsZXQgcm91dGluZ1Jlc29sdmVTZXJ2aWNlOiBCb29raW5nUm91dGluZ1Jlc29sdmVTZXJ2aWNlO1xuICAgIGxldCBzZXJ2aWNlOiBCb29raW5nU2VydmljZTtcbiAgICBsZXQgcmVzdWx0Qm9va2luZzogSUJvb2tpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICAgIHByb3ZpZGVyczogW1JvdXRlciwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdF0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tSb3V0ZXIgPSBUZXN0QmVkLmluamVjdChSb3V0ZXIpO1xuICAgICAgbW9ja0FjdGl2YXRlZFJvdXRlU25hcHNob3QgPSBUZXN0QmVkLmluamVjdChBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTtcbiAgICAgIHJvdXRpbmdSZXNvbHZlU2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEJvb2tpbmdSb3V0aW5nUmVzb2x2ZVNlcnZpY2UpO1xuICAgICAgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEJvb2tpbmdTZXJ2aWNlKTtcbiAgICAgIHJlc3VsdEJvb2tpbmcgPSB1bmRlZmluZWQ7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgncmVzb2x2ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIElCb29raW5nIHJldHVybmVkIGJ5IGZpbmQnLCAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIHNlcnZpY2UuZmluZCA9IGplc3QuZm4oaWQgPT4gb2YobmV3IEh0dHBSZXNwb25zZSh7IGJvZHk6IHsgaWQgfSB9KSkpO1xuICAgICAgICBtb2NrQWN0aXZhdGVkUm91dGVTbmFwc2hvdC5wYXJhbXMgPSB7IGlkOiAxMjMgfTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIHJvdXRpbmdSZXNvbHZlU2VydmljZS5yZXNvbHZlKG1vY2tBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAgICAgICAgICByZXN1bHRCb29raW5nID0gcmVzdWx0O1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUSEVOXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmZpbmQpLnRvQmVDYWxsZWRXaXRoKDEyMyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRCb29raW5nKS50b0VxdWFsKHsgaWQ6IDEyMyB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJldHVybiBuZXcgSUJvb2tpbmcgaWYgaWQgaXMgbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBzZXJ2aWNlLmZpbmQgPSBqZXN0LmZuKCk7XG4gICAgICAgIG1vY2tBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnBhcmFtcyA9IHt9O1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgcm91dGluZ1Jlc29sdmVTZXJ2aWNlLnJlc29sdmUobW9ja0FjdGl2YXRlZFJvdXRlU25hcHNob3QpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc3VsdEJvb2tpbmcgPSByZXN1bHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuZmluZCkubm90LnRvQmVDYWxsZWQoKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEJvb2tpbmcpLnRvRXF1YWwobmV3IEJvb2tpbmcoKSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByb3V0ZSB0byA0MDQgcGFnZSBpZiBkYXRhIG5vdCBmb3VuZCBpbiBzZXJ2ZXInLCAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGplc3Quc3B5T24oc2VydmljZSwgJ2ZpbmQnKS5tb2NrUmV0dXJuVmFsdWUob2YobmV3IEh0dHBSZXNwb25zZSh7IGJvZHk6IG51bGwgYXMgdW5rbm93biBhcyBCb29raW5nIH0pKSk7XG4gICAgICAgIG1vY2tBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnBhcmFtcyA9IHsgaWQ6IDEyMyB9O1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgcm91dGluZ1Jlc29sdmVTZXJ2aWNlLnJlc29sdmUobW9ja0FjdGl2YXRlZFJvdXRlU25hcHNob3QpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc3VsdEJvb2tpbmcgPSByZXN1bHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuZmluZCkudG9CZUNhbGxlZFdpdGgoMTIzKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEJvb2tpbmcpLnRvRXF1YWwodW5kZWZpbmVkKTtcbiAgICAgICAgZXhwZWN0KG1vY2tSb3V0ZXIubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnNDA0J10pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=