{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/list/booking.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/list/booking.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { BookingService } from '../service/booking.service';\n\nimport { BookingComponent } from './booking.component';\n\ndescribe('Component Tests', () => {\n  describe('Booking Management Component', () => {\n    let comp: BookingComponent;\n    let fixture: ComponentFixture<BookingComponent>;\n    let service: BookingService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [BookingComponent],\n        providers: [\n          Router,\n          {\n            provide: ActivatedRoute,\n            useValue: {\n              data: of({\n                defaultSort: 'id,asc',\n              }),\n              queryParamMap: of(\n                jest.requireActual('@angular/router').convertToParamMap({\n                  page: '1',\n                  size: '1',\n                  sort: 'id,desc',\n                })\n              ),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(BookingComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(BookingComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(BookingService);\n\n      const headers = new HttpHeaders().append('link', 'link;link');\n      jest.spyOn(service, 'query').mockReturnValue(\n        of(\n          new HttpResponse({\n            body: [{ id: 123 }],\n            headers,\n          })\n        )\n      );\n    });\n\n    it('Should call load all on init', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.query).toHaveBeenCalled();\n      expect(comp.bookings?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n    });\n\n    it('should load a page', () => {\n      // WHEN\n      comp.loadPage(1);\n\n      // THEN\n      expect(service.query).toHaveBeenCalled();\n      expect(comp.bookings?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n    });\n\n    it('should calculate the sort attribute for an id', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.query).toHaveBeenCalledWith(expect.objectContaining({ sort: ['id,desc'] }));\n    });\n\n    it('should calculate the sort attribute for a non-id attribute', () => {\n      // INIT\n      comp.ngOnInit();\n\n      // GIVEN\n      comp.predicate = 'name';\n\n      // WHEN\n      comp.loadPage(1);\n\n      // THEN\n      expect(service.query).toHaveBeenLastCalledWith(expect.objectContaining({ sort: ['name,desc', 'id'] }));\n    });\n  });\n});\n"],"version":3}