[["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport * as dayjs from 'dayjs';\n\nimport { DATE_TIME_FORMAT } from 'app/config/input.constants';\nimport { Plan } from 'app/entities/enumerations/plan.model';\nimport { IBooking, Booking } from '../booking.model';\n\nimport { BookingService } from './booking.service';\n\ndescribe('Service Tests', () => {\n  describe('Booking Service', () => {\n    let service: BookingService;\n    let httpMock: HttpTestingController;\n    let elemDefault: IBooking;\n    let expectedResult: IBooking | IBooking[] | boolean | null;\n    let currentDate: dayjs.Dayjs;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      expectedResult = null;\n      service = TestBed.inject(BookingService);\n      httpMock = TestBed.inject(HttpTestingController);\n      currentDate = dayjs();\n\n      elemDefault = {\n        id: 0,\n        eventDate: currentDate,\n        venue: 'AAAAAAA',\n        plan: Plan.BRONZE,\n        createdDate: currentDate,\n        contactNumber: 'AAAAAAA',\n        emailId: 'AAAAAAA',\n        userName: 'AAAAAAA',\n        userId: 'AAAAAAA',\n      };\n    });\n\n    describe('Service methods', () => {\n      it('should find an element', () => {\n        const returnedFromService = Object.assign(\n          {\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        service.find(123).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(elemDefault);\n      });\n\n      it('should create a Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 0,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.create(new Booking()).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'POST' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should update a Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            venue: 'BBBBBB',\n            plan: 'BBBBBB',\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n            contactNumber: 'BBBBBB',\n            emailId: 'BBBBBB',\n            userName: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.update(expected).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PUT' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should partial update a Booking', () => {\n        const patchObject = Object.assign(\n          {\n            contactNumber: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          new Booking()\n        );\n\n        const returnedFromService = Object.assign(patchObject, elemDefault);\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PATCH' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should return a list of Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            venue: 'BBBBBB',\n            plan: 'BBBBBB',\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n            contactNumber: 'BBBBBB',\n            emailId: 'BBBBBB',\n            userName: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.query().subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([returnedFromService]);\n        httpMock.verify();\n        expect(expectedResult).toContainEqual(expected);\n      });\n\n      it('should delete a Booking', () => {\n        service.delete(123).subscribe(resp => (expectedResult = resp.ok));\n\n        const req = httpMock.expectOne({ method: 'DELETE' });\n        req.flush({ status: 200 });\n        expect(expectedResult);\n      });\n\n      describe('addBookingToCollectionIfMissing', () => {\n        it('should add a Booking to an empty array', () => {\n          const booking: IBooking = { id: 123 };\n          expectedResult = service.addBookingToCollectionIfMissing([], booking);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should not add a Booking to an array that contains it', () => {\n          const booking: IBooking = { id: 123 };\n          const bookingCollection: IBooking[] = [\n            {\n              ...booking,\n            },\n            { id: 456 },\n          ];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);\n          expect(expectedResult).toHaveLength(2);\n        });\n\n        it(\"should add a Booking to an array that doesn't contain it\", () => {\n          const booking: IBooking = { id: 123 };\n          const bookingCollection: IBooking[] = [{ id: 456 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should add only unique Booking to an array', () => {\n          const bookingArray: IBooking[] = [{ id: 123 }, { id: 456 }, { id: 52973 }];\n          const bookingCollection: IBooking[] = [{ id: 123 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, ...bookingArray);\n          expect(expectedResult).toHaveLength(3);\n        });\n\n        it('should accept varargs', () => {\n          const booking: IBooking = { id: 123 };\n          const booking2: IBooking = { id: 456 };\n          expectedResult = service.addBookingToCollectionIfMissing([], booking, booking2);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(booking);\n          expect(expectedResult).toContain(booking2);\n        });\n\n        it('should accept null and undefined values', () => {\n          const booking: IBooking = { id: 123 };\n          expectedResult = service.addBookingToCollectionIfMissing([], null, booking, undefined);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should return initial array if no Booking is added', () => {\n          const bookingCollection: IBooking[] = [{ id: 123 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, undefined, null);\n          expect(expectedResult).toEqual(bookingCollection);\n        });\n      });\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/input.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.spec.ts",{"fileContent":"jest.mock('@angular/router');\njest.mock('app/core/auth/state-storage.service');\n\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\n\nimport { Account } from 'app/core/auth/account.model';\nimport { Authority } from 'app/config/authority.constants';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\nimport { AccountService } from './account.service';\n\nfunction accountWithAuthorities(authorities: string[]): Account {\n  return {\n    activated: true,\n    authorities,\n    email: '',\n    firstName: '',\n    langKey: '',\n    lastName: '',\n    login: '',\n    imageUrl: '',\n  };\n}\n\ndescribe('Service Tests', () => {\n  describe('Account Service', () => {\n    let service: AccountService;\n    let applicationConfigService: ApplicationConfigService;\n    let httpMock: HttpTestingController;\n    let mockStorageService: StateStorageService;\n    let mockRouter: Router;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n        providers: [StateStorageService, Router],\n      });\n\n      service = TestBed.inject(AccountService);\n      applicationConfigService = TestBed.inject(ApplicationConfigService);\n      httpMock = TestBed.inject(HttpTestingController);\n      mockStorageService = TestBed.inject(StateStorageService);\n      mockRouter = TestBed.inject(Router);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('save', () => {\n      it('should call account saving endpoint with correct values', () => {\n        // GIVEN\n        const account = accountWithAuthorities([]);\n\n        // WHEN\n        service.save(account).subscribe();\n        const testRequest = httpMock.expectOne({ method: 'POST', url: applicationConfigService.getEndpointFor('api/account') });\n        testRequest.flush({});\n\n        // THEN\n        expect(testRequest.request.body).toEqual(account);\n      });\n    });\n\n    describe('authenticate', () => {\n      it('authenticationState should emit null if input is null', () => {\n        // GIVEN\n        let userIdentity: Account | null = accountWithAuthorities([]);\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(null);\n\n        // THEN\n        expect(userIdentity).toBeNull();\n        expect(service.isAuthenticated()).toBe(false);\n      });\n\n      it('authenticationState should emit the same account as was in input parameter', () => {\n        // GIVEN\n        const expectedResult = accountWithAuthorities([]);\n        let userIdentity: Account | null = null;\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(expectedResult);\n\n        // THEN\n        expect(userIdentity).toEqual(expectedResult);\n        expect(service.isAuthenticated()).toBe(true);\n      });\n    });\n\n    describe('identity', () => {\n      it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {\n        // Given the user is authenticated\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({});\n\n        // When I call\n        service.identity().subscribe();\n\n        // Then there is no second request\n        httpMock.expectNone({ method: 'GET' });\n\n        // When I log out\n        service.authenticate(null);\n        // and then call\n        service.identity().subscribe();\n\n        // Then there is a new request\n        httpMock.expectOne({ method: 'GET' });\n      });\n\n      describe('navigateToStoredUrl', () => {\n        it('should navigate to the previous stored url post successful authentication', () => {\n          // GIVEN\n          mockStorageService.getUrl = jest.fn(() => 'admin/users?page=0');\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n          expect(mockStorageService.clearUrl).toHaveBeenCalledTimes(1);\n          expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('admin/users?page=0');\n        });\n\n        it('should not navigate to the previous stored url when authentication fails', () => {\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));\n\n          // THEN\n          expect(mockStorageService.getUrl).not.toHaveBeenCalled();\n          expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n          expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n        });\n\n        it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {\n          // GIVEN\n          mockStorageService.getUrl = jest.fn(() => null);\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n          expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n          expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n        });\n      });\n    });\n\n    describe('hasAnyAuthority', () => {\n      describe('hasAnyAuthority string parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.ADMIN);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n\n      describe('hasAnyAuthority array parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority([Authority.USER]);\n          expect(hasAuthority).toBeFalsy();\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.USER, Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/authority.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/authority.constants.ts",{"fileContent":"export enum Authority {\n  ADMIN = 'ROLE_ADMIN',\n  USER = 'ROLE_USER',\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable({ providedIn: 'root' })\nexport class StateStorageService {\n  private previousUrlKey = 'previousUrl';\n\n  constructor(private sessionStorageService: SessionStorageService) {}\n\n  storeUrl(url: string): void {\n    this.sessionStorageService.store(this.previousUrlKey, url);\n  }\n\n  getUrl(): string | null {\n    return this.sessionStorageService.retrieve(this.previousUrlKey) as string | null;\n  }\n\n  clearUrl(): void {\n    this.sessionStorageService.clear(this.previousUrlKey);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApplicationConfigService {\n  private endpointPrefix = '';\n\n  setEndpointPrefix(endpointPrefix: string): void {\n    this.endpointPrefix = endpointPrefix;\n  }\n\n  getEndpointFor(api: string, microservice?: string): string {\n    if (microservice) {\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\n    }\n    return `${this.endpointPrefix}${api}`;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\n\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account | null>;\n\n  constructor(\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(account: Account): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\n  }\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe(\n        catchError(() => of(null)),\n        tap((account: Account | null) => {\n          this.authenticate(account);\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$;\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/alert.service.spec.ts",{"fileContent":"import { inject, TestBed } from '@angular/core/testing';\n\nimport { Alert, AlertService } from './alert.service';\n\ndescribe('Alert service test', () => {\n  describe('Alert Service Test', () => {\n    let extAlerts: Alert[];\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({});\n      jest.useFakeTimers();\n      extAlerts = [];\n    });\n\n    it('should produce a proper alert object and fetch it', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert({\n          type: 'success',\n          message: 'Hello Jhipster',\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        })\n      ).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a proper alert object and add it to external alert objects array', inject(\n      [AlertService],\n      (service: AlertService) => {\n        expect(\n          service.addAlert(\n            {\n              type: 'success',\n              message: 'Hello Jhipster',\n              timeout: 3000,\n              toast: true,\n              position: 'top left',\n            },\n            extAlerts\n          )\n        ).toEqual(\n          expect.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n\n        expect(extAlerts.length).toBe(1);\n        expect(extAlerts[0]).toEqual(\n          expect.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce an alert object with correct id', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster success' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n    }));\n\n    it('should close an alert correctly', inject([AlertService], (service: AlertService) => {\n      const alert0 = service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      const alert1 = service.addAlert({ type: 'info', message: 'Hello Jhipster info 2' });\n      const alert2 = service.addAlert({ type: 'success', message: 'Hello Jhipster success' });\n      expect(alert2).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(3);\n      alert1.close?.(service.get());\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).not.toEqual(\n        expect.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster info 2',\n          id: 1,\n        } as Alert)\n      );\n      alert2.close?.(service.get());\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).not.toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n      alert0.close?.(service.get());\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should close an alert on timeout correctly', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n\n      expect(service.get().length).toBe(1);\n\n      jest.advanceTimersByTime(6000);\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should clear alerts', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'danger', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'success', message: 'Hello Jhipster info' });\n      expect(service.get().length).toBe(3);\n      service.clear();\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a scoped alert', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert(\n          {\n            type: 'success',\n            message: 'Hello Jhipster',\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          },\n          []\n        )\n      ).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a success message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a success message with custom position', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster', position: 'bottom left' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          position: 'bottom left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a error message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'danger', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'danger',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a warning message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'warning', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'warning',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a info message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'info', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/alert.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/alert.service.ts",{"fileContent":"import { Injectable, SecurityContext, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport type AlertType = 'success' | 'danger' | 'warning' | 'info';\n\nexport interface Alert {\n  id?: number;\n  type: AlertType;\n  message?: string;\n  timeout?: number;\n  toast?: boolean;\n  position?: string;\n  close?: (alerts: Alert[]) => void;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertService {\n  timeout = 5000;\n  toast = false;\n  position = 'top right';\n\n  // unique id for each alert. Starts from 0.\n  private alertId = 0;\n  private alerts: Alert[] = [];\n\n  constructor(private sanitizer: DomSanitizer, private ngZone: NgZone) {}\n\n  clear(): void {\n    this.alerts = [];\n  }\n\n  get(): Alert[] {\n    return this.alerts;\n  }\n\n  /**\n   * Adds alert to alerts array and returns added alert.\n   * @param alert      Alert to add. If `timeout`, `toast` or `position` is missing then applying default value.\n   * @param extAlerts  If missing then adding `alert` to `AlertService` internal array and alerts can be retrieved by `get()`.\n   *                   Else adding `alert` to `extAlerts`.\n   * @returns  Added alert\n   */\n  addAlert(alert: Alert, extAlerts?: Alert[]): Alert {\n    alert.id = this.alertId++;\n\n    alert.message = this.sanitizer.sanitize(SecurityContext.HTML, alert.message ?? '') ?? '';\n    alert.timeout = alert.timeout ?? this.timeout;\n    alert.toast = alert.toast ?? this.toast;\n    alert.position = alert.position ?? this.position;\n    alert.close = (alertsArray: Alert[]) => this.closeAlert(alert.id!, alertsArray);\n\n    (extAlerts ?? this.alerts).push(alert);\n\n    if (alert.timeout > 0) {\n      // Workaround protractor waiting for setTimeout.\n      // Reference https://www.protractortest.org/#/timeouts\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.ngZone.run(() => {\n            this.closeAlert(alert.id!, extAlerts ?? this.alerts);\n          });\n        }, alert.timeout);\n      });\n    }\n\n    return alert;\n  }\n\n  private closeAlert(alertId: number, extAlerts?: Alert[]): void {\n    const alerts = extAlerts ?? this.alerts;\n    const alertIndex = alerts.map(alert => alert.id).indexOf(alertId);\n    // if found alert then remove\n    if (alertIndex >= 0) {\n      alerts.splice(alertIndex, 1);\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort-by.directive.spec.ts",{"fileContent":"import { Component, DebugElement } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { fas, faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\n\nimport { SortByDirective } from './sort-by.directive';\nimport { SortDirective } from './sort.directive';\n\n@Component({\n  template: `\n    <table>\n      <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" [callback]=\"transition.bind(this)\">\n          <th jhiSortBy=\"name\">ID<fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        </tr>\n      </thead>\n    </table>\n  `,\n})\nclass TestSortByDirectiveComponent {\n  predicate?: string;\n  ascending?: boolean;\n  transition = jest.fn();\n\n  constructor(library: FaIconLibrary) {\n    library.addIconPacks(fas);\n    library.addIcons(faSort, faSortDown, faSortUp);\n  }\n}\n\ndescribe('Directive: SortByDirective', () => {\n  let component: TestSortByDirectiveComponent;\n  let fixture: ComponentFixture<TestSortByDirectiveComponent>;\n  let tableHead: DebugElement;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestSortByDirectiveComponent, SortDirective, SortByDirective, FaIconComponent],\n    });\n    fixture = TestBed.createComponent(TestSortByDirectiveComponent);\n    component = fixture.componentInstance;\n    tableHead = fixture.debugElement.query(By.directive(SortByDirective));\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate is _score', () => {\n    // GIVEN\n    component.predicate = '_score';\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('_score');\n    expect(sortByDirective.iconComponent?.icon).toEqual('sort');\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate differs from column predicate', () => {\n    // GIVEN\n    component.predicate = 'id';\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('id');\n    expect(sortByDirective.iconComponent?.icon).toEqual('sort');\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate is same as column predicate', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(true);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortUp.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate is _score and user clicks on column header', () => {\n    // GIVEN\n    component.predicate = '_score';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('_score');\n    expect(component.ascending).toEqual(true);\n    expect(sortByDirective.iconComponent?.icon).toEqual('sort');\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should update component predicate, order, icon when user clicks on column header', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(false);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortDown.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(1);\n  });\n\n  it('should update component predicate, order, icon when user double clicks on column header', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // WHEN\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(true);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortUp.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(2);\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort-by.directive.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort.directive.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort-by.directive.ts",{"fileContent":"import { AfterContentInit, ContentChild, Directive, Host, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faSort, faSortDown, faSortUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nimport { SortDirective } from './sort.directive';\n\n@Directive({\n  selector: '[jhiSortBy]',\n})\nexport class SortByDirective<T> implements AfterContentInit, OnDestroy {\n  @Input() jhiSortBy?: T;\n\n  @ContentChild(FaIconComponent, { static: true })\n  iconComponent?: FaIconComponent;\n\n  sortIcon = faSort;\n  sortAscIcon = faSortUp;\n  sortDescIcon = faSortDown;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(@Host() private sort: SortDirective<T>) {\n    sort.predicateChange.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateIconDefinition());\n    sort.ascendingChange.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateIconDefinition());\n  }\n\n  @HostListener('click')\n  onClick(): void {\n    this.sort.sort(this.jhiSortBy);\n  }\n\n  ngAfterContentInit(): void {\n    this.updateIconDefinition();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIconDefinition(): void {\n    if (this.iconComponent) {\n      let icon: IconDefinition = this.sortIcon;\n      if (this.sort.predicate === this.jhiSortBy) {\n        icon = this.sort.ascending ? this.sortAscIcon : this.sortDescIcon;\n      }\n      this.iconComponent.icon = icon.iconName;\n      this.iconComponent.render();\n    }\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort.directive.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort.directive.ts",{"fileContent":"import { Directive, EventEmitter, Input, Output } from '@angular/core';\n\n@Directive({\n  selector: '[jhiSort]',\n})\nexport class SortDirective<T> {\n  @Input()\n  get predicate(): T | undefined {\n    return this._predicate;\n  }\n  set predicate(predicate: T | undefined) {\n    this._predicate = predicate;\n    this.predicateChange.emit(predicate);\n  }\n\n  @Input()\n  get ascending(): boolean | undefined {\n    return this._ascending;\n  }\n  set ascending(ascending: boolean | undefined) {\n    this._ascending = ascending;\n    this.ascendingChange.emit(ascending);\n  }\n\n  @Input() callback?: () => void;\n\n  @Output() predicateChange = new EventEmitter<T>();\n  @Output() ascendingChange = new EventEmitter<boolean>();\n\n  private _predicate?: T;\n  private _ascending?: boolean;\n\n  sort(field?: T): void {\n    if (String(this.predicate) !== '_score') {\n      this.ascending = field !== this.predicate ? true : !this.ascending;\n      this.predicate = field;\n      this.predicateChange.emit(field);\n      this.ascendingChange.emit(this.ascending);\n      this.callback?.();\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/main/main.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Router, RouterEvent, NavigationEnd, NavigationStart } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { Subject, of } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { MainComponent } from './main.component';\n\ndescribe('Component Tests', () => {\n  describe('MainComponent', () => {\n    let comp: MainComponent;\n    let fixture: ComponentFixture<MainComponent>;\n    let titleService: Title;\n    let mockAccountService: AccountService;\n    const routerEventsSubject = new Subject<RouterEvent>();\n    const routerState: any = { snapshot: { root: { data: {} } } };\n    class MockRouter {\n      events = routerEventsSubject;\n      routerState = routerState;\n    }\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [MainComponent],\n          providers: [\n            Title,\n            AccountService,\n            {\n              provide: Router,\n              useClass: MockRouter,\n            },\n          ],\n        })\n          .overrideTemplate(MainComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(MainComponent);\n      comp = fixture.componentInstance;\n      titleService = TestBed.inject(Title);\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n    });\n\n    describe('page title', () => {\n      const defaultPageTitle = 'Weddingplanner';\n      const parentRoutePageTitle = 'parentTitle';\n      const childRoutePageTitle = 'childTitle';\n      const navigationEnd = new NavigationEnd(1, '', '');\n      const navigationStart = new NavigationStart(1, '');\n\n      beforeEach(() => {\n        routerState.snapshot.root = { data: {} };\n        jest.spyOn(titleService, 'setTitle');\n        comp.ngOnInit();\n      });\n\n      describe('navigation end', () => {\n        it('should set page title to default title if pageTitle is missing on routes', () => {\n          // WHEN\n          routerEventsSubject.next(navigationEnd);\n\n          // THEN\n          expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle);\n        });\n\n        it('should set page title to root route pageTitle if there is no child routes', () => {\n          // GIVEN\n          routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n\n          // WHEN\n          routerEventsSubject.next(navigationEnd);\n\n          // THEN\n          expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);\n        });\n\n        it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {\n          // GIVEN\n          routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n          routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };\n\n          // WHEN\n          routerEventsSubject.next(navigationEnd);\n\n          // THEN\n          expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle);\n        });\n\n        it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {\n          // GIVEN\n          routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n          routerState.snapshot.root.firstChild = { data: {} };\n\n          // WHEN\n          routerEventsSubject.next(navigationEnd);\n\n          // THEN\n          expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);\n        });\n      });\n\n      describe('navigation start', () => {\n        it('should not set page title on navigation start', () => {\n          // WHEN\n          routerEventsSubject.next(navigationStart);\n\n          // THEN\n          expect(titleService.setTitle).not.toHaveBeenCalled();\n        });\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/main/main.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/main/main.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router, ActivatedRouteSnapshot, NavigationEnd } from '@angular/router';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\n@Component({\n  selector: 'jhi-main',\n  templateUrl: './main.component.html',\n})\nexport class MainComponent implements OnInit {\n  constructor(private accountService: AccountService, private titleService: Title, private router: Router) {}\n\n  ngOnInit(): void {\n    // try to log in automatically\n    this.accountService.identity().subscribe();\n\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.updateTitle();\n      }\n    });\n  }\n\n  private getPageTitle(routeSnapshot: ActivatedRouteSnapshot): string {\n    let title: string = routeSnapshot.data['pageTitle'] ?? '';\n    if (routeSnapshot.firstChild) {\n      title = this.getPageTitle(routeSnapshot.firstChild) || title;\n    }\n    return title;\n  }\n\n  private updateTitle(): void {\n    let pageTitle = this.getPageTitle(this.router.routerState.snapshot.root);\n    if (!pageTitle) {\n      pageTitle = 'Weddingplanner';\n    }\n    this.titleService.setTitle(pageTitle);\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/main/main.component.html",{"fileContent":"<jhi-page-ribbon></jhi-page-ribbon>\n\n<div>\n  <router-outlet name=\"navbar\"></router-outlet>\n</div>\n\n<div class=\"container-fluid\" style='background-color: rgb(211, 237, 224);'>\n  <div class=\"card jh-card\" style='background-color: rgb(211, 237, 224);'>\n    <router-outlet></router-outlet>\n  </div>\n\n  <jhi-footer></jhi-footer>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/auth/has-any-authority.directive.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { HasAnyAuthorityDirective } from './has-any-authority.directive';\n\n@Component({\n  template: ` <div *jhiHasAnyAuthority=\"'ROLE_ADMIN'\" #content></div> `,\n})\nclass TestHasAnyAuthorityDirectiveComponent {\n  @ViewChild('content', { static: false })\n  content?: ElementRef;\n}\n\ndescribe('HasAnyAuthorityDirective tests', () => {\n  let mockAccountService: AccountService;\n  const authenticationState = new Subject<Account | null>();\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [HasAnyAuthorityDirective, TestHasAnyAuthorityDirectiveComponent],\n        providers: [AccountService],\n      });\n    })\n  );\n\n  beforeEach(() => {\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());\n  });\n\n  describe('set jhiHasAnyAuthority', () => {\n    it('should show restricted content to user if user has required role', () => {\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => true);\n      const fixture = TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);\n      const comp = fixture.componentInstance;\n\n      // WHEN\n      fixture.detectChanges();\n\n      // THEN\n      expect(comp.content).toBeDefined();\n    });\n\n    it('should not show restricted content to user if user has not required role', () => {\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => false);\n      const fixture = TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);\n      const comp = fixture.componentInstance;\n\n      // WHEN\n      fixture.detectChanges();\n\n      // THEN\n      expect(comp.content).toBeUndefined();\n    });\n  });\n\n  describe('change authorities', () => {\n    it('should show or not show restricted content correctly if user authorities are changing', () => {\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => true);\n      const fixture = TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);\n      const comp = fixture.componentInstance;\n\n      // WHEN\n      fixture.detectChanges();\n\n      // THEN\n      expect(comp.content).toBeDefined();\n\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => false);\n\n      // WHEN\n      authenticationState.next();\n      fixture.detectChanges();\n\n      // THEN\n      expect(comp.content).toBeUndefined();\n\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => true);\n\n      // WHEN\n      authenticationState.next();\n      fixture.detectChanges();\n\n      // THEN\n      expect(comp.content).toBeDefined();\n    });\n  });\n\n  describe('ngOnDestroy', () => {\n    it('should destroy authentication state subscription on component destroy', () => {\n      // GIVEN\n      mockAccountService.hasAnyAuthority = jest.fn(() => true);\n      const fixture = TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);\n      const div = fixture.debugElement.queryAllNodes(By.directive(HasAnyAuthorityDirective))[0];\n      const hasAnyAuthorityDirective = div.injector.get(HasAnyAuthorityDirective);\n\n      // WHEN\n      fixture.detectChanges();\n\n      // THEN\n      expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();\n\n      // WHEN\n      jest.clearAllMocks();\n      authenticationState.next();\n\n      // THEN\n      expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();\n\n      // WHEN\n      jest.clearAllMocks();\n      hasAnyAuthorityDirective.ngOnDestroy();\n      authenticationState.next();\n\n      // THEN\n      expect(mockAccountService.hasAnyAuthority).not.toHaveBeenCalled();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/auth/has-any-authority.directive.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/auth/has-any-authority.directive.ts",{"fileContent":"import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\n/**\n * @whatItDoes Conditionally includes an HTML element if current user has any\n * of the authorities passed as the `expression`.\n *\n * @howToUse\n * ```\n *     <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n *\n *     <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n * ```\n */\n@Directive({\n  selector: '[jhiHasAnyAuthority]',\n})\nexport class HasAnyAuthorityDirective implements OnDestroy {\n  private authorities!: string | string[];\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(private accountService: AccountService, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {}\n\n  @Input()\n  set jhiHasAnyAuthority(value: string | string[]) {\n    this.authorities = value;\n    this.updateView();\n    // Get notified each time authentication state changes.\n    this.accountService\n      .getAuthenticationState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateView();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateView(): void {\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n    this.viewContainerRef.clear();\n    if (hasAnyAuthority) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.spec.ts",{"fileContent":"jest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, Subject } from 'rxjs';\n\nimport { BookingService } from '../service/booking.service';\nimport { IBooking, Booking } from '../booking.model';\n\nimport { BookingUpdateComponent } from './booking-update.component';\n\ndescribe('Component Tests', () => {\n  describe('Booking Management Update Component', () => {\n    let comp: BookingUpdateComponent;\n    let fixture: ComponentFixture<BookingUpdateComponent>;\n    let activatedRoute: ActivatedRoute;\n    let bookingService: BookingService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [BookingUpdateComponent],\n        providers: [FormBuilder, ActivatedRoute],\n      })\n        .overrideTemplate(BookingUpdateComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(BookingUpdateComponent);\n      activatedRoute = TestBed.inject(ActivatedRoute);\n      bookingService = TestBed.inject(BookingService);\n\n      comp = fixture.componentInstance;\n    });\n\n    describe('ngOnInit', () => {\n      it('Should update editForm', () => {\n        const booking: IBooking = { id: 456 };\n\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        expect(comp.editForm.value).toEqual(expect.objectContaining(booking));\n      });\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing entity', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = { id: 123 };\n        jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: booking }));\n        saveSubject.complete();\n\n        // THEN\n        expect(comp.previousState).toHaveBeenCalled();\n        expect(bookingService.update).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n      });\n\n      it('Should call create service on save for new entity', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = new Booking();\n        jest.spyOn(bookingService, 'create').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: booking }));\n        saveSubject.complete();\n\n        // THEN\n        expect(bookingService.create).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).toHaveBeenCalled();\n      });\n\n      it('Should set isSaving to false on error', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = { id: 123 };\n        jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.error('This is an error!');\n\n        // THEN\n        expect(bookingService.update).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).not.toHaveBeenCalled();\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/input.constants.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IBooking, getBookingIdentifier } from '../booking.model';\n\nexport type EntityResponseType = HttpResponse<IBooking>;\nexport type EntityArrayResponseType = HttpResponse<IBooking[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class BookingService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/bookings');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(booking: IBooking): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(booking);\n    return this.http\n      .post<IBooking>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(booking: IBooking): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(booking);\n    return this.http\n      .put<IBooking>(`${this.resourceUrl}/${getBookingIdentifier(booking) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(booking: IBooking): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(booking);\n    return this.http\n      .patch<IBooking>(`${this.resourceUrl}/${getBookingIdentifier(booking) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IBooking>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IBooking[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addBookingToCollectionIfMissing(bookingCollection: IBooking[], ...bookingsToCheck: (IBooking | null | undefined)[]): IBooking[] {\n    const bookings: IBooking[] = bookingsToCheck.filter(isPresent);\n    if (bookings.length > 0) {\n      const bookingCollectionIdentifiers = bookingCollection.map(bookingItem => getBookingIdentifier(bookingItem)!);\n      const bookingsToAdd = bookings.filter(bookingItem => {\n        const bookingIdentifier = getBookingIdentifier(bookingItem);\n        if (bookingIdentifier == null || bookingCollectionIdentifiers.includes(bookingIdentifier)) {\n          return false;\n        }\n        bookingCollectionIdentifiers.push(bookingIdentifier);\n        return true;\n      });\n      return [...bookingsToAdd, ...bookingCollection];\n    }\n    return bookingCollection;\n  }\n\n  protected convertDateFromClient(booking: IBooking): IBooking {\n    return Object.assign({}, booking, {\n      eventDate: booking.eventDate?.isValid() ? booking.eventDate.toJSON() : undefined,\n      createdDate: booking.createdDate?.isValid() ? booking.createdDate.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.eventDate = res.body.eventDate ? dayjs(res.body.eventDate) : undefined;\n      res.body.createdDate = res.body.createdDate ? dayjs(res.body.createdDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((booking: IBooking) => {\n        booking.eventDate = booking.eventDate ? dayjs(booking.eventDate) : undefined;\n        booking.createdDate = booking.createdDate ? dayjs(booking.createdDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts",{"fileContent":"/*\n * Function used to workaround https://github.com/microsoft/TypeScript/issues/16069\n * es2019 alternative `const filteredArr = myArr.flatMap((x) => x ? x : []);`\n */\nexport function isPresent<T>(t: T | undefined | null | void): t is T {\n  return t !== undefined && t !== null;\n}\n\nexport const filterNaN = (input: number): number => (isNaN(input) ? 0 : input);\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts",{"fileContent":"import { HttpParams } from '@angular/common/http';\n\nexport const createRequestOption = (req?: any): HttpParams => {\n  let options: HttpParams = new HttpParams();\n\n  if (req) {\n    Object.keys(req).forEach(key => {\n      if (key !== 'sort') {\n        options = options.set(key, req[key]);\n      }\n    });\n\n    if (req.sort) {\n      req.sort.forEach((val: string) => {\n        options = options.append('sort', val);\n      });\n    }\n  }\n\n  return options;\n};\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts",{"fileContent":"import * as dayjs from 'dayjs';\nimport { Plan } from 'app/entities/enumerations/plan.model';\n\nexport interface IBooking {\n  id?: number;\n  eventDate?: dayjs.Dayjs;\n  venue?: string;\n  plan?: Plan;\n  createdDate?: dayjs.Dayjs;\n  contactNumber?: string;\n  emailId?: string;\n  userName?: string | null;\n  userId?: string | null;\n}\n\nexport class Booking implements IBooking {\n  constructor(\n    public id?: number,\n    public eventDate?: dayjs.Dayjs,\n    public venue?: string,\n    public plan?: Plan,\n    public createdDate?: dayjs.Dayjs,\n    public contactNumber?: string,\n    public emailId?: string,\n    public userName?: string | null,\n    public userId?: string | null\n  ) {}\n}\n\nexport function getBookingIdentifier(booking: IBooking): number | undefined {\n  return booking.id;\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport * as dayjs from 'dayjs';\nimport { DATE_TIME_FORMAT } from 'app/config/input.constants';\n\nimport { IBooking, Booking } from '../booking.model';\nimport { BookingService } from '../service/booking.service';\n\n@Component({\n  selector: 'jhi-booking-update',\n  templateUrl: './booking-update.component.html',\n})\nexport class BookingUpdateComponent implements OnInit {\n  isSaving = false;\n\n  editForm = this.fb.group({\n    id: [],\n    eventDate: [null, [Validators.required]],\n    venue: [null, [Validators.required]],\n    plan: [null, [Validators.required]],\n    createdDate: [null, [Validators.required]],\n    contactNumber: [null, [Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]],\n    emailId: [null, [Validators.required,Validators.email]],\n    userName: [],\n    userId: [],\n  });\n\n  constructor(protected bookingService: BookingService, protected activatedRoute: ActivatedRoute, protected fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ booking }) => {\n      if (booking.id === undefined) {\n        const today = dayjs().startOf('day');\n        booking.eventDate = today;\n        booking.createdDate = today;\n      }\n\n      this.updateForm(booking);\n    });\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    const booking = this.createFromForm();\n    if (booking.id !== undefined) {\n      this.subscribeToSaveResponse(this.bookingService.update(booking));\n    } else {\n      this.subscribeToSaveResponse(this.bookingService.create(booking));\n    }\n  }\n\n  protected subscribeToSaveResponse(result: Observable<HttpResponse<IBooking>>): void {\n    result.pipe(finalize(() => this.onSaveFinalize())).subscribe(\n      () => this.onSaveSuccess(),\n      () => this.onSaveError()\n    );\n  }\n\n  protected onSaveSuccess(): void {\n    this.previousState();\n  }\n\n  protected onSaveError(): void {\n    // Api for inheritance.\n  }\n\n  protected onSaveFinalize(): void {\n    this.isSaving = false;\n  }\n\n  protected updateForm(booking: IBooking): void {\n    this.editForm.patchValue({\n      id: booking.id,\n      eventDate: booking.eventDate ? booking.eventDate.format(DATE_TIME_FORMAT) : null,\n      venue: booking.venue,\n      plan: booking.plan,\n      createdDate: booking.createdDate ? booking.createdDate.format(DATE_TIME_FORMAT) : null,\n      contactNumber: booking.contactNumber,\n      emailId: booking.emailId,\n      userName: booking.userName,\n      userId: booking.userId,\n    });\n  }\n\n  protected createFromForm(): IBooking {\n    return {\n      ...new Booking(),\n      id: this.editForm.get(['id'])!.value,\n      eventDate: this.editForm.get(['eventDate'])!.value ? dayjs(this.editForm.get(['eventDate'])!.value, DATE_TIME_FORMAT) : undefined,\n      venue: this.editForm.get(['venue'])!.value,\n      plan: this.editForm.get(['plan'])!.value,\n      createdDate: this.editForm.get(['createdDate'])!.value\n        ? dayjs(this.editForm.get(['createdDate'])!.value, DATE_TIME_FORMAT)\n        : undefined,\n      contactNumber: this.editForm.get(['contactNumber'])!.value,\n      emailId: this.editForm.get(['emailId'])!.value,\n      userName: this.editForm.get(['userName'])!.value,\n      userId: this.editForm.get(['userId'])!.value,\n    };\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/input.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/input.constants.ts",{"fileContent":"export const DATE_FORMAT = 'YYYY-MM-DD';\nexport const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm';\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" [formGroup]=\"editForm\">\n      <h2 id=\"jhi-booking-heading\" data-cy=\"BookingCreateUpdateHeading\">Create a Booking</h2>\n\n      <div>\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"form-group\" [hidden]=\"editForm.get('id')!.value == null\">\n          <label class=\"form-control-label\" for=\"field_id\">ID</label>\n          <input type=\"number\" class=\"form-control\" name=\"id\" id=\"field_id\" data-cy=\"id\" formControlName=\"id\" [readonly]=\"true\" />\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_eventDate\">Event Date</label>\n          <div class=\"d-flex\">\n            <input\n              id=\"field_eventDate\"\n              data-cy=\"eventDate\"\n              type=\"datetime-local\"\n              class=\"form-control\"\n              name=\"eventDate\"\n              formControlName=\"eventDate\"\n              placeholder=\"YYYY-MM-DD HH:mm\"\n            />\n          </div>\n          <div *ngIf=\"editForm.get('eventDate')!.invalid && (editForm.get('eventDate')!.dirty || editForm.get('eventDate')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('eventDate')?.errors?.required\"> This field is required. </small>\n            <small class=\"form-text text-danger\" [hidden]=\"!editForm.get('eventDate')?.errors?.ZonedDateTimelocal\">\n              This field should be a date and time.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_venue\">Venue</label>\n          <input type=\"text\" class=\"form-control\" name=\"venue\" id=\"field_venue\" data-cy=\"venue\" formControlName=\"venue\" />\n          <div *ngIf=\"editForm.get('venue')!.invalid && (editForm.get('venue')!.dirty || editForm.get('venue')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('venue')?.errors?.required\"> This field is required. </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_plan\">Plan</label>\n          <select class=\"form-control\" name=\"plan\" formControlName=\"plan\" id=\"field_plan\" data-cy=\"plan\">\n            <option [ngValue]=\"null\"></option>\n            <option value=\"BRONZE\">BRONZE -- 10,00,000</option>\n            <option value=\"SILVER\">SILVER -- 15,00,000</option>\n            <option value=\"GOLD\">GOLD -- 30,00,000</option>\n          </select>\n          <div *ngIf=\"editForm.get('plan')!.invalid && (editForm.get('plan')!.dirty || editForm.get('plan')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('plan')?.errors?.required\"> This field is required. </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_createdDate\">Created Date</label>\n          <div class=\"d-flex\">\n            <input\n              id=\"field_createdDate\"\n              data-cy=\"createdDate\"\n              type=\"datetime-local\"\n              class=\"form-control\"\n              name=\"createdDate\"\n              formControlName=\"createdDate\"\n              placeholder=\"YYYY-MM-DD HH:mm\"\n            />\n          </div>\n          <div *ngIf=\"editForm.get('createdDate')!.invalid && (editForm.get('createdDate')!.dirty || editForm.get('createdDate')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('createdDate')?.errors?.required\"> This field is required. </small>\n            <small class=\"form-text text-danger\" [hidden]=\"!editForm.get('createdDate')?.errors?.ZonedDateTimelocal\">\n              This field should be a date and time.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_contactNumber\">Contact Number</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"contactNumber\"\n            id=\"field_contactNumber\"\n            data-cy=\"contactNumber\"\n            formControlName=\"contactNumber\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('contactNumber')!.invalid && (editForm.get('contactNumber')!.dirty || editForm.get('contactNumber')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('contactNumber')?.errors?.required\"> This field is required. </small>\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('contactNumber')?.errors?.pattern\"> Contact number should be a 10 digit number </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_emailId\">Email Id</label>\n          <input type=\"text\" class=\"form-control\" name=\"emailId\" id=\"field_emailId\" data-cy=\"emailId\" formControlName=\"emailId\" />\n          <div *ngIf=\"editForm.get('emailId')!.invalid && (editForm.get('emailId')!.dirty || editForm.get('emailId')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('emailId')?.errors?.required\"> This field is required. </small>\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('emailId')?.errors?.email\"> Please provide a valid email id. </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_userName\">User Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"userName\" id=\"field_userName\" data-cy=\"userName\" formControlName=\"userName\" />\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"field_userId\">User Id</label>\n          <input type=\"text\" class=\"form-control\" name=\"userId\" id=\"field_userId\" data-cy=\"userId\" formControlName=\"userId\" />\n        </div>\n      </div>\n\n      <div>\n        <button type=\"button\" id=\"cancel-save\" data-cy=\"entityCreateCancelButton\" class=\"btn btn-secondary\" (click)=\"previousState()\">\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n        </button>\n\n        <button\n          type=\"submit\"\n          id=\"save-entity\"\n          data-cy=\"entityCreateSaveButton\"\n          [disabled]=\"editForm.invalid || isSaving\"\n          class=\"btn btn-primary\"\n        >\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { PasswordComponent } from './password.component';\nimport { PasswordService } from './password.service';\n\ndescribe('Component Tests', () => {\n  describe('PasswordComponent', () => {\n    let comp: PasswordComponent;\n    let fixture: ComponentFixture<PasswordComponent>;\n    let service: PasswordService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [PasswordComponent],\n          providers: [FormBuilder, AccountService],\n        })\n          .overrideTemplate(PasswordComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(PasswordComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(PasswordService);\n    });\n\n    it('should show error if passwords do not match', () => {\n      // GIVEN\n      comp.passwordForm.patchValue({\n        newPassword: 'password1',\n        confirmPassword: 'password2',\n      });\n      // WHEN\n      comp.changePassword();\n      // THEN\n      expect(comp.doNotMatch).toBe(true);\n      expect(comp.error).toBe(false);\n      expect(comp.success).toBe(false);\n    });\n\n    it('should call Auth.changePassword when passwords match', () => {\n      // GIVEN\n      const passwordValues = {\n        currentPassword: 'oldPassword',\n        newPassword: 'myPassword',\n      };\n\n      jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n\n      comp.passwordForm.patchValue({\n        currentPassword: passwordValues.currentPassword,\n        newPassword: passwordValues.newPassword,\n        confirmPassword: passwordValues.newPassword,\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(service.save).toHaveBeenCalledWith(passwordValues.newPassword, passwordValues.currentPassword);\n    });\n\n    it('should set success to true upon success', () => {\n      // GIVEN\n      jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n      comp.passwordForm.patchValue({\n        newPassword: 'myPassword',\n        confirmPassword: 'myPassword',\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(comp.doNotMatch).toBe(false);\n      expect(comp.error).toBe(false);\n      expect(comp.success).toBe(true);\n    });\n\n    it('should notify of error if change password fails', () => {\n      // GIVEN\n      jest.spyOn(service, 'save').mockReturnValue(throwError('ERROR'));\n      comp.passwordForm.patchValue({\n        newPassword: 'myPassword',\n        confirmPassword: 'myPassword',\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(comp.doNotMatch).toBe(false);\n      expect(comp.success).toBe(false);\n      expect(comp.error).toBe(true);\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html',\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: ['', [Validators.required]],\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/change-password'), { currentPassword, newPassword });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2>\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\"><strong>An error has occurred!</strong> The password could not be changed.</div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">The password and its confirmation do not match!</div>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"currentPassword\">Current password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"Current password\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\">\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"newPassword\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"New password\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.required\">\n              Your password is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\">\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\">\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"confirmPassword\">New password confirmation</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"Confirm the new password\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\">\n              Your confirmation password is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\">\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\">\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"passwordForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Save</button>\n      </form>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/update/user-management-update.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\n\nimport { UserManagementUpdateComponent } from './user-management-update.component';\n\ndescribe('Component Tests', () => {\n  describe('User Management Update Component', () => {\n    let comp: UserManagementUpdateComponent;\n    let fixture: ComponentFixture<UserManagementUpdateComponent>;\n    let service: UserManagementService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [UserManagementUpdateComponent],\n          providers: [\n            FormBuilder,\n            {\n              provide: ActivatedRoute,\n              useValue: {\n                data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n              },\n            },\n          ],\n        })\n          .overrideTemplate(UserManagementUpdateComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(UserManagementUpdateComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(UserManagementService);\n    });\n\n    describe('OnInit', () => {\n      it('Should load authorities and language on init', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          jest.spyOn(service, 'authorities').mockReturnValue(of(['USER']));\n\n          // WHEN\n          comp.ngOnInit();\n\n          // THEN\n          expect(service.authorities).toHaveBeenCalled();\n          expect(comp.authorities).toEqual(['USER']);\n        })\n      ));\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing user', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const entity = new User(123);\n          jest.spyOn(service, 'update').mockReturnValue(of(entity));\n          comp.user = entity;\n          comp.editForm.patchValue({ id: entity.id });\n          // WHEN\n          comp.save();\n          tick(); // simulate async\n\n          // THEN\n          expect(service.update).toHaveBeenCalledWith(entity);\n          expect(comp.isSaving).toEqual(false);\n        })\n      ));\n\n      it('Should call create service on save for new user', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const entity = new User();\n          jest.spyOn(service, 'create').mockReturnValue(of(entity));\n          comp.user = entity;\n          // WHEN\n          comp.save();\n          tick(); // simulate async\n\n          // THEN\n          expect(service.create).toHaveBeenCalledWith(entity);\n          expect(comp.isSaving).toEqual(false);\n        })\n      ));\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/authority.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/service/user-management.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/update/user-management-update.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/service/user-management.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { Pagination } from 'app/core/request/request.model';\nimport { IUser } from '../user-management.model';\n\n@Injectable({ providedIn: 'root' })\nexport class UserManagementService {\n  private resourceUrl = this.applicationConfigService.getEndpointFor('api/admin/users');\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  create(user: IUser): Observable<IUser> {\n    return this.http.post<IUser>(this.resourceUrl, user);\n  }\n\n  update(user: IUser): Observable<IUser> {\n    return this.http.put<IUser>(this.resourceUrl, user);\n  }\n\n  find(login: string): Observable<IUser> {\n    return this.http.get<IUser>(`${this.resourceUrl}/${login}`);\n  }\n\n  query(req?: Pagination): Observable<HttpResponse<IUser[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUser[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(login: string): Observable<{}> {\n    return this.http.delete(`${this.resourceUrl}/${login}`);\n  }\n\n  authorities(): Observable<string[]> {\n    return this.http.get<string[]>(this.applicationConfigService.getEndpointFor('api/authorities'));\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts",{"fileContent":"export interface IUser {\n  id?: number;\n  login?: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  email?: string;\n  activated?: boolean;\n  langKey?: string;\n  authorities?: string[];\n  createdBy?: string;\n  createdDate?: Date;\n  lastModifiedBy?: string;\n  lastModifiedDate?: Date;\n}\n\nexport class User implements IUser {\n  constructor(\n    public id?: number,\n    public login?: string,\n    public firstName?: string | null,\n    public lastName?: string | null,\n    public email?: string,\n    public activated?: boolean,\n    public langKey?: string,\n    public authorities?: string[],\n    public createdBy?: string,\n    public createdDate?: Date,\n    public lastModifiedBy?: string,\n    public lastModifiedDate?: Date\n  ) {}\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/update/user-management-update.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { User } from '../user-management.model';\nimport { UserManagementService } from '../service/user-management.service';\n\n@Component({\n  selector: 'jhi-user-mgmt-update',\n  templateUrl: './user-management-update.component.html',\n})\nexport class UserManagementUpdateComponent implements OnInit {\n  user!: User;\n  authorities: string[] = [];\n  isSaving = false;\n\n  editForm = this.fb.group({\n    id: [],\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    firstName: ['', [Validators.maxLength(50)]],\n    lastName: ['', [Validators.maxLength(50)]],\n    email: ['', [Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    activated: [],\n    langKey: [],\n    authorities: [],\n  });\n\n  constructor(private userService: UserManagementService, private route: ActivatedRoute, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      if (user) {\n        this.user = user;\n        if (this.user.id === undefined) {\n          this.user.activated = true;\n        }\n        this.updateForm(user);\n      }\n    });\n    this.userService.authorities().subscribe(authorities => (this.authorities = authorities));\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    this.updateUser(this.user);\n    if (this.user.id !== undefined) {\n      this.userService.update(this.user).subscribe(\n        () => this.onSaveSuccess(),\n        () => this.onSaveError()\n      );\n    } else {\n      this.user.langKey = 'en';\n      this.userService.create(this.user).subscribe(\n        () => this.onSaveSuccess(),\n        () => this.onSaveError()\n      );\n    }\n  }\n\n  private updateForm(user: User): void {\n    this.editForm.patchValue({\n      id: user.id,\n      login: user.login,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      activated: user.activated,\n      langKey: user.langKey,\n      authorities: user.authorities,\n    });\n  }\n\n  private updateUser(user: User): void {\n    user.login = this.editForm.get(['login'])!.value;\n    user.firstName = this.editForm.get(['firstName'])!.value;\n    user.lastName = this.editForm.get(['lastName'])!.value;\n    user.email = this.editForm.get(['email'])!.value;\n    user.activated = this.editForm.get(['activated'])!.value;\n    user.langKey = this.editForm.get(['langKey'])!.value;\n    user.authorities = this.editForm.get(['authorities'])!.value;\n  }\n\n  private onSaveSuccess(): void {\n    this.isSaving = false;\n    this.previousState();\n  }\n\n  private onSaveError(): void {\n    this.isSaving = false;\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/service/user-management.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/update/user-management-update.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" [formGroup]=\"editForm\">\n      <h2 id=\"myUserLabel\">Create or edit a User</h2>\n\n      <div *ngIf=\"user\">\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"form-group\" [hidden]=\"!user.id\">\n          <label>ID</label>\n          <input type=\"text\" class=\"form-control\" name=\"id\" formControlName=\"id\" readonly />\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\">Login</label>\n          <input type=\"text\" class=\"form-control\" name=\"login\" formControlName=\"login\" />\n\n          <div *ngIf=\"editForm.get('login')!.invalid && (editForm.get('login')!.dirty || editForm.get('login')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('login')?.errors?.required\"> This field is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('login')?.errors?.maxlength\">\n              This field cannot be longer than 50 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('login')?.errors?.pattern\">\n              This field can only contain letters, digits and e-mail addresses.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\">First Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"firstName\" formControlName=\"firstName\" />\n\n          <div *ngIf=\"editForm.get('firstName')!.invalid && (editForm.get('firstName')!.dirty || editForm.get('firstName')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('firstName')?.errors?.maxlength\">\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label>Last Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"lastName\" formControlName=\"lastName\" />\n\n          <div *ngIf=\"editForm.get('lastName')!.invalid && (editForm.get('lastName')!.dirty || editForm.get('lastName')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('lastName')?.errors?.maxlength\">\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\">Email</label>\n          <input type=\"email\" class=\"form-control\" name=\"email\" formControlName=\"email\" />\n\n          <div *ngIf=\"editForm.get('email')!.invalid && (editForm.get('email')!.dirty || editForm.get('email')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('email')?.errors?.required\"> This field is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('email')?.errors?.maxlength\">\n              This field cannot be longer than 100 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('email')?.errors?.minlength\">\n              This field is required to be at least 5 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('email')?.errors?.email\"> Your email is invalid. </small>\n          </div>\n        </div>\n\n        <div class=\"form-check\">\n          <label class=\"form-check-label\" for=\"activated\">\n            <input\n              class=\"form-check-input\"\n              [attr.disabled]=\"user.id === undefined ? 'disabled' : null\"\n              type=\"checkbox\"\n              id=\"activated\"\n              name=\"activated\"\n              formControlName=\"activated\"\n            />\n            <span>Activated</span>\n          </label>\n        </div>\n\n        <div class=\"form-group\">\n          <label>Profiles</label>\n          <select class=\"form-control\" multiple name=\"authority\" formControlName=\"authorities\">\n            <option *ngFor=\"let authority of authorities\" [value]=\"authority\">{{ authority }}</option>\n          </select>\n        </div>\n      </div>\n\n      <div *ngIf=\"user\">\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"previousState()\">\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n        </button>\n\n        <button type=\"submit\" [disabled]=\"editForm.invalid || isSaving\" class=\"btn btn-primary\">\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/home/home.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\njest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { of, Subject } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { HomeComponent } from './home.component';\n\ndescribe('Component Tests', () => {\n  describe('Home Component', () => {\n    let comp: HomeComponent;\n    let fixture: ComponentFixture<HomeComponent>;\n    let mockAccountService: AccountService;\n    let mockRouter: Router;\n    const account: Account = {\n      activated: true,\n      authorities: [],\n      email: '',\n      firstName: null,\n      langKey: '',\n      lastName: null,\n      login: 'login',\n      imageUrl: null,\n    };\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [HomeComponent],\n          providers: [AccountService, Router],\n        })\n          .overrideTemplate(HomeComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HomeComponent);\n      comp = fixture.componentInstance;\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n      mockRouter = TestBed.inject(Router);\n    });\n\n    describe('ngOnInit', () => {\n      it('Should synchronize account variable with current account', () => {\n        // GIVEN\n        const authenticationState = new Subject<Account | null>();\n        mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(comp.account).toBeNull();\n\n        // WHEN\n        authenticationState.next(account);\n\n        // THEN\n        expect(comp.account).toEqual(account);\n\n        // WHEN\n        authenticationState.next(null);\n\n        // THEN\n        expect(comp.account).toBeNull();\n      });\n    });\n\n    describe('login', () => {\n      it('Should navigate to /login on login', () => {\n        // WHEN\n        comp.login();\n\n        // THEN\n        expect(mockRouter.navigate).toHaveBeenCalledWith(['/login']);\n      });\n    });\n\n    describe('ngOnDestroy', () => {\n      it('Should destroy authentication state subscription on component destroy', () => {\n        // GIVEN\n        const authenticationState = new Subject<Account | null>();\n        mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(comp.account).toBeNull();\n\n        // WHEN\n        authenticationState.next(account);\n\n        // THEN\n        expect(comp.account).toEqual(account);\n\n        // WHEN\n        comp.ngOnDestroy();\n        authenticationState.next(null);\n\n        // THEN\n        expect(comp.account).toEqual(account);\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/home/home.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/home/home.component.ts",{"fileContent":"import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Component({\n  selector: 'jhi-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  account: Account | null = null;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.accountService\n      .getAuthenticationState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(account => (this.account = account));\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/home/home.component.html",{"fileContent":"<div class=\"hipster\">\n    <h1 class=\"heading\"><span>Welcome to Shehnai</span></h1>\n    <h4 style=\"color: rgb(61, 30, 30)\">     At Shehnai wedding, we believe that every bride deserves the fairytale wedding of her dreams! Here at Shehnaiwedding.com you will find glittering seeds of inspiration for every aspect of your upcoming wedding. From event planners to photographers, dj's, florists, cinematographers, makeup artists, mehndi artists, you name it... you’ll find connections to every resource you could ever need for all your wedding ceremonies and celebrations. \n        The protagonists of this love story are Chirag & Divya. This happy couple decided to begin their path to eternal love at Taj Rajbagh Palace, a royal place ideal for celebrating destination weddings. To ensure that every detail went off elegantly for the couple's big days, Silver Events exceeded our lovebird's expectations, creating the wedding of their dreams. And we love every single moment! Let me tell you about the event that started this wedding journey. Worthy of a royal fairy tale, the bride and groom walked down the aisle together amongst cold pyros as their favorite song played. How romantic is that? Making a love promise is part of every love story, and this one was not the exception! Thanks to Muffins Productions and their fantastic photographs, this bride and groom's story was captured for eternity! Do you want to fall in love with this couple as I did? Don't miss this amazing gallery we have prepared for you! (I will sharing their wedding photos)</h4>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/navbar/navbar.component.spec.ts",{"fileContent":"jest.mock('@angular/router');\njest.mock('app/login/login.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\n\nimport { ProfileInfo } from 'app/layouts/profiles/profile-info.model';\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\nimport { LoginService } from 'app/login/login.service';\n\nimport { NavbarComponent } from './navbar.component';\n\ndescribe('Component Tests', () => {\n  describe('Navbar Component', () => {\n    let comp: NavbarComponent;\n    let fixture: ComponentFixture<NavbarComponent>;\n    let accountService: AccountService;\n    let profileService: ProfileService;\n    const account: Account = {\n      activated: true,\n      authorities: [],\n      email: '',\n      firstName: 'John',\n      langKey: '',\n      lastName: 'Doe',\n      login: 'john.doe',\n      imageUrl: '',\n    };\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n          declarations: [NavbarComponent],\n          providers: [Router, LoginService],\n        })\n          .overrideTemplate(NavbarComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(NavbarComponent);\n      comp = fixture.componentInstance;\n      accountService = TestBed.inject(AccountService);\n      profileService = TestBed.inject(ProfileService);\n    });\n\n    it('Should call profileService.getProfileInfo on init', () => {\n      // GIVEN\n      jest.spyOn(profileService, 'getProfileInfo').mockReturnValue(of(new ProfileInfo()));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(profileService.getProfileInfo).toHaveBeenCalled();\n    });\n\n    it('Should hold current authenticated user in variable account', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(comp.account).toBeNull();\n\n      // WHEN\n      accountService.authenticate(account);\n\n      // THEN\n      expect(comp.account).toEqual(account);\n\n      // WHEN\n      accountService.authenticate(null);\n\n      // THEN\n      expect(comp.account).toBeNull();\n    });\n\n    it('Should hold current authenticated user in variable account if user is authenticated before page load', () => {\n      // GIVEN\n      accountService.authenticate(account);\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(comp.account).toEqual(account);\n\n      // WHEN\n      accountService.authenticate(null);\n\n      // THEN\n      expect(comp.account).toBeNull();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile-info.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/navbar/navbar.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/app.constants.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile-info.model.ts",{"fileContent":"export interface InfoResponse {\n  'display-ribbon-on-profiles'?: string;\n  git?: any;\n  build?: any;\n  activeProfiles?: string[];\n}\n\nexport class ProfileInfo {\n  constructor(\n    public activeProfiles?: string[],\n    public ribbonEnv?: string,\n    public inProduction?: boolean,\n    public openAPIEnabled?: boolean\n  ) {}\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { ProfileInfo, InfoResponse } from './profile-info.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private infoUrl = this.applicationConfigService.getEndpointFor('management/info');\n  private profileInfo$?: Observable<ProfileInfo>;\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getProfileInfo(): Observable<ProfileInfo> {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\n      map((response: InfoResponse) => {\n        const profileInfo: ProfileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles?.includes('prod'),\n          openAPIEnabled: response.activeProfiles?.includes('api-docs'),\n        };\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n          const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles?.includes(profile));\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }),\n      shareReplay()\n    );\n    return this.profileInfo$;\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile-info.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\nimport { Login } from './login.model';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  constructor(private accountService: AccountService, private authServerProvider: AuthServerProvider) {}\n\n  login(credentials: Login): Observable<Account | null> {\n    return this.authServerProvider.login(credentials).pipe(mergeMap(() => this.accountService.identity(true)));\n  }\n\n  logout(): void {\n    this.authServerProvider.logout().subscribe({ complete: () => this.accountService.authenticate(null) });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Login } from 'app/login/login.model';\n\ntype JwtToken = {\n  id_token: string;\n};\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(\n    private http: HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  getToken(): string {\n    const tokenInLocalStorage: string | null = this.localStorageService.retrieve('authenticationToken');\n    const tokenInSessionStorage: string | null = this.sessionStorageService.retrieve('authenticationToken');\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? '';\n  }\n\n  login(credentials: Login): Observable<void> {\n    return this.http\n      .post<JwtToken>(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials)\n      .pipe(map(response => this.authenticateSuccess(response, credentials.rememberMe)));\n  }\n\n  logout(): Observable<void> {\n    return new Observable(observer => {\n      this.localStorageService.clear('authenticationToken');\n      this.sessionStorageService.clear('authenticationToken');\n      observer.complete();\n    });\n  }\n\n  private authenticateSuccess(response: JwtToken, rememberMe: boolean): void {\n    const jwt = response.id_token;\n    if (rememberMe) {\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else {\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/navbar/navbar.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { VERSION } from 'app/app.constants';\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { LoginService } from 'app/login/login.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\n\n@Component({\n  selector: 'jhi-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss'],\n})\nexport class NavbarComponent implements OnInit {\n  inProduction?: boolean;\n  isNavbarCollapsed = true;\n  openAPIEnabled?: boolean;\n  version = '';\n  account: Account | null = null;\n\n  constructor(\n    private loginService: LoginService,\n    private accountService: AccountService,\n    private profileService: ProfileService,\n    private router: Router\n  ) {\n    if (VERSION) {\n      this.version = VERSION.toLowerCase().startsWith('v') ? VERSION : 'v' + VERSION;\n    }\n  }\n\n  ngOnInit(): void {\n    this.profileService.getProfileInfo().subscribe(profileInfo => {\n      this.inProduction = profileInfo.inProduction;\n      this.openAPIEnabled = profileInfo.openAPIEnabled;\n    });\n    this.accountService.getAuthenticationState().subscribe(account => (this.account = account));\n  }\n\n  collapseNavbar(): void {\n    this.isNavbarCollapsed = true;\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  logout(): void {\n    this.collapseNavbar();\n    this.loginService.logout();\n    this.router.navigate(['']);\n  }\n\n  toggleNavbar(): void {\n    this.isNavbarCollapsed = !this.isNavbarCollapsed;\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/app.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/profiles/profile-info.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/app.constants.ts",{"fileContent":"// These constants are injected via webpack DefinePlugin variables.\n// You can add more variables in webpack.common.js or in profile specific webpack.<dev|prod>.js files.\n// If you change the values in the webpack config files, you need to re run webpack to update the application\n\ndeclare const __DEBUG_INFO_ENABLED__: boolean;\ndeclare const __TIMESTAMP__: string;\ndeclare const __VERSION__: string;\ndeclare const __SERVER_API_URL__: string;\n\nexport const VERSION = __VERSION__;\nexport const DEBUG_INFO_ENABLED = __DEBUG_INFO_ENABLED__;\nexport const SERVER_API_URL = __SERVER_API_URL__;\nexport const TIMESTAMP = __TIMESTAMP__;\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/layouts/navbar/navbar.component.html",{"fileContent":"<nav data-cy=\"navbar\" class=\"navbar navbar-light navbar-expand-md bg-light\">\n  <a class=\"navbar-brand logo\" routerLink=\"/\" (click)=\"collapseNavbar()\">\n    <span class=\"logo-img\"></span>\n  </a>\n  <a\n    class=\"navbar-toggler d-lg-none\"\n    href=\"javascript:void(0);\"\n    data-toggle=\"collapse\"\n    data-target=\"#navbarResponsive\"\n    aria-controls=\"navbarResponsive\"\n    aria-expanded=\"false\"\n    aria-label=\"Toggle navigation\"\n    (click)=\"toggleNavbar()\"\n  >\n    <fa-icon icon=\"bars\"></fa-icon>\n  </a>\n  <div class=\"navbar-collapse collapse\" id=\"navbarResponsive\" [ngbCollapse]=\"isNavbarCollapsed\" [ngSwitch]=\"account !== null\">\n    <ul class=\"navbar-nav ml-auto\">\n      <li class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n        <a class=\"nav-link\" routerLink=\"/\" (click)=\"collapseNavbar()\">\n          <span>\n            <fa-icon icon=\"home\"></fa-icon>\n            <span>Home</span>\n          </span>\n        </a>\n      </li>\n      <!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here -->\n      <li *jhiHasAnyAuthority=\"'ROLE_USER'\" class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n        <a class=\"nav-link\" routerLink=\"gallery\" (click)=\"collapseNavbar()\">\n          <span>\n            <fa-icon icon=\"book\"></fa-icon>\n            <span>Gallery</span>\n          </span>\n        </a>\n      </li>\n      <li *jhiHasAnyAuthority=\"'ROLE_USER'\" class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n        <a class=\"nav-link\" routerLink=\"/booking/new\" (click)=\"collapseNavbar()\">\n          <span>\n            <fa-icon icon=\"book\"></fa-icon>\n            <span>Book</span>\n          </span>\n        </a>\n      </li>\n      <li\n        \n        *jhiHasAnyAuthority=\"'ROLE_ADMIN'\"\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n      \n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"entity-menu\" data-cy=\"entity\">\n          <span>\n            <fa-icon icon=\"th-list\"></fa-icon>\n            <span>Entities</span>\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"entity-menu\">\n          <li>\n            <a\n              class=\"dropdown-item\"\n              routerLink=\"booking\"\n              routerLinkActive=\"active\"\n              [routerLinkActiveOptions]=\"{ exact: true }\"\n              (click)=\"collapseNavbar()\"\n            >\n              <fa-icon icon=\"asterisk\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Bookings</span>\n            </a>\n          </li>\n          \n          <!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here -->\n        </ul>\n      </li>\n      <li\n        *jhiHasAnyAuthority=\"'ROLE_ADMIN'\"\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"admin-menu\" data-cy=\"adminMenu\">\n          <span>\n            <fa-icon icon=\"users-cog\"></fa-icon>\n            <span>Administration</span>\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"admin-menu\">\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/user-management\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"users\" [fixedWidth]=\"true\"></fa-icon>\n              <span>User management</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/metrics\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"tachometer-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Metrics</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/health\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"heart\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Health</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/configuration\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"cogs\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Configuration</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/logs\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"tasks\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Logs</span>\n            </a>\n          </li>\n          <li *ngIf=\"openAPIEnabled\">\n            <a class=\"dropdown-item\" routerLink=\"admin/docs\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"book\" [fixedWidth]=\"true\"></fa-icon>\n              <span>API</span>\n            </a>\n          </li>\n          <!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here -->\n        </ul>\n      </li>\n      <li\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"account-menu\" data-cy=\"accountMenu\">\n          <span *ngIf=\"!account?.imageUrl\">\n            <fa-icon icon=\"user\"></fa-icon>\n            <span>Account</span>\n          </span>\n          <span *ngIf=\"account?.imageUrl\">\n            <img [src]=\"account!.imageUrl\" class=\"profile-image rounded-circle\" alt=\"Avatar\" />\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"account-menu\">\n          <li *ngSwitchCase=\"true\">\n            <a class=\"dropdown-item\" routerLink=\"account/settings\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\" data-cy=\"settings\">\n              <fa-icon icon=\"wrench\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Settings</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"true\">\n            <a\n              class=\"dropdown-item\"\n              routerLink=\"account/password\"\n              routerLinkActive=\"active\"\n              (click)=\"collapseNavbar()\"\n              data-cy=\"passwordItem\"\n            >\n              <fa-icon icon=\"lock\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Password</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"true\">\n            <a class=\"dropdown-item\" (click)=\"logout()\" id=\"logout\" data-cy=\"logout\">\n              <fa-icon icon=\"sign-out-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Sign out</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"false\">\n            <a class=\"dropdown-item\" (click)=\"login()\" id=\"login\" data-cy=\"login\">\n              <fa-icon icon=\"sign-in-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Sign in</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"false\">\n            <a class=\"dropdown-item\" routerLink=\"account/register\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\" data-cy=\"register\">\n              <fa-icon icon=\"user-plus\" [fixedWidth]=\"true\"></fa-icon>\n              <span>Register</span>\n            </a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</nav>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { throwError, of } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { SettingsComponent } from './settings.component';\n\ndescribe('Component Tests', () => {\n  describe('SettingsComponent', () => {\n    let comp: SettingsComponent;\n    let fixture: ComponentFixture<SettingsComponent>;\n    let mockAccountService: AccountService;\n    const account: Account = {\n      firstName: 'John',\n      lastName: 'Doe',\n      activated: true,\n      email: 'john.doe@mail.com',\n      langKey: 'en',\n      login: 'john',\n      authorities: [],\n      imageUrl: '',\n    };\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [SettingsComponent],\n          providers: [FormBuilder, AccountService],\n        })\n          .overrideTemplate(SettingsComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SettingsComponent);\n      comp = fixture.componentInstance;\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(account));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(account));\n    });\n\n    it('should send the current identity upon save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => of({}));\n      const settingsFormValues = {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@mail.com',\n      };\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(mockAccountService.identity).toHaveBeenCalled();\n      expect(mockAccountService.save).toHaveBeenCalledWith(account);\n      expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);\n      expect(comp.settingsForm.value).toEqual(settingsFormValues);\n    });\n\n    it('should notify of success upon successful save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => of({}));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(true);\n    });\n\n    it('should notify of error upon failed save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => throwError('ERROR'));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(false);\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Component({\n  selector: 'jhi-settings',\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  account!: Account;\n  success = false;\n  settingsForm = this.fb.group({\n    firstName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    lastName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    email: [undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => {\n      if (account) {\n        this.settingsForm.patchValue({\n          firstName: account.firstName,\n          lastName: account.lastName,\n          email: account.email,\n        });\n\n        this.account = account;\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    this.account.firstName = this.settingsForm.get('firstName')!.value;\n    this.account.lastName = this.settingsForm.get('lastName')!.value;\n    this.account.email = this.settingsForm.get('email')!.value;\n\n    this.accountService.save(this.account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(this.account);\n    });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/account.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/state-storage.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 *ngIf=\"account\">\n        User settings for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" *ngIf=\"account\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"firstName\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"Your first name\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.required\">\n              Your first name is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\">\n              Your first name is required to be at least 1 character.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\">\n              Your first name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"Your last name\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)\"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.required\">\n              Your last name is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\">\n              Your last name is required to be at least 1 character.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\">\n              Your last name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.required\"> Your email is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.email\"> Your email is invalid. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.minlength\">\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.maxlength\">\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"settingsForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Save</button>\n      </form>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { LogsComponent } from './logs.component';\nimport { LogsService } from './logs.service';\nimport { Log, LoggersResponse } from './log.model';\n\ndescribe('Component Tests', () => {\n  describe('LogsComponent', () => {\n    let comp: LogsComponent;\n    let fixture: ComponentFixture<LogsComponent>;\n    let service: LogsService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [LogsComponent],\n          providers: [LogsService],\n        })\n          .overrideTemplate(LogsComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(LogsComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(LogsService);\n    });\n\n    describe('OnInit', () => {\n      it('should set all default values correctly', () => {\n        expect(comp.filter).toBe('');\n        expect(comp.orderProp).toBe('name');\n        expect(comp.ascending).toBe(true);\n      });\n\n      it('Should call load all on init', () => {\n        // GIVEN\n        const log = new Log('main', 'WARN');\n        jest.spyOn(service, 'findAll').mockReturnValue(\n          of({\n            loggers: {\n              main: {\n                effectiveLevel: 'WARN',\n              },\n            },\n          } as unknown as LoggersResponse)\n        );\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.findAll).toHaveBeenCalled();\n        expect(comp.loggers?.[0]).toEqual(expect.objectContaining(log));\n      });\n    });\n\n    describe('change log level', () => {\n      it('should change log level correctly', () => {\n        // GIVEN\n        const log = new Log('main', 'ERROR');\n        jest.spyOn(service, 'changeLevel').mockReturnValue(of({}));\n        jest.spyOn(service, 'findAll').mockReturnValue(\n          of({\n            loggers: {\n              main: {\n                effectiveLevel: 'ERROR',\n              },\n            },\n          } as unknown as LoggersResponse)\n        );\n\n        // WHEN\n        comp.changeLevel('main', 'ERROR');\n\n        // THEN\n        expect(service.changeLevel).toHaveBeenCalled();\n        expect(service.findAll).toHaveBeenCalled();\n        expect(comp.loggers?.[0]).toEqual(expect.objectContaining(log));\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/log.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\n\nimport { Log, LoggersResponse, Level } from './log.model';\nimport { LogsService } from './logs.service';\n\n@Component({\n  selector: 'jhi-logs',\n  templateUrl: './logs.component.html',\n})\nexport class LogsComponent implements OnInit {\n  loggers?: Log[];\n  filteredAndOrderedLoggers?: Log[];\n  filter = '';\n  orderProp: keyof Log = 'name';\n  ascending = true;\n\n  constructor(private logsService: LogsService) {}\n\n  ngOnInit(): void {\n    this.findAndExtractLoggers();\n  }\n\n  changeLevel(name: string, level: Level): void {\n    this.logsService.changeLevel(name, level).subscribe(() => this.findAndExtractLoggers());\n  }\n\n  filterAndSort(): void {\n    this.filteredAndOrderedLoggers = this.loggers!.filter(\n      logger => !this.filter || logger.name.toLowerCase().includes(this.filter.toLowerCase())\n    ).sort((a, b) => {\n      if (a[this.orderProp] < b[this.orderProp]) {\n        return this.ascending ? -1 : 1;\n      } else if (a[this.orderProp] > b[this.orderProp]) {\n        return this.ascending ? 1 : -1;\n      } else if (this.orderProp === 'level') {\n        return a.name < b.name ? -1 : 1;\n      }\n      return 0;\n    });\n  }\n\n  private findAndExtractLoggers(): void {\n    this.logsService.findAll().subscribe((response: LoggersResponse) => {\n      this.loggers = Object.entries(response.loggers).map(([key, logger]) => new Log(key, logger.effectiveLevel));\n      this.filterAndSort();\n    });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/log.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/log.model.ts",{"fileContent":"export type Level = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\n\nexport interface Logger {\n  configuredLevel: Level | null;\n  effectiveLevel: Level;\n}\n\nexport interface LoggersResponse {\n  levels: Level[];\n  loggers: { [key: string]: Logger };\n}\n\nexport class Log {\n  constructor(public name: string, public level: Level) {}\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { LoggersResponse, Level } from './log.model';\n\n@Injectable({ providedIn: 'root' })\nexport class LogsService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  changeLevel(name: string, configuredLevel: Level): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('management/loggers/' + name), { configuredLevel });\n  }\n\n  findAll(): Observable<LoggersResponse> {\n    return this.http.get<LoggersResponse>(this.applicationConfigService.getEndpointFor('management/loggers'));\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/log.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.component.html",{"fileContent":"<div class=\"table-responsive\" *ngIf=\"loggers\">\n  <h2 id=\"logs-page-heading\" data-cy=\"logsPageHeading\">Logs</h2>\n\n  <p>There are {{ loggers.length }} loggers.</p>\n\n  <span>Filter</span>\n  <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterAndSort()\" class=\"form-control\" />\n\n  <table class=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\n    <thead>\n      <tr jhiSort [(predicate)]=\"orderProp\" [(ascending)]=\"ascending\" [callback]=\"filterAndSort.bind(this)\">\n        <th jhiSortBy=\"name\" scope=\"col\"><span>Name</span> <fa-icon icon=\"sort\"></fa-icon></th>\n        <th jhiSortBy=\"level\" scope=\"col\"><span>Level</span> <fa-icon icon=\"sort\"></fa-icon></th>\n      </tr>\n    </thead>\n\n    <tr *ngFor=\"let logger of filteredAndOrderedLoggers\">\n      <td>\n        <small>{{ logger.name | slice: 0:140 }}</small>\n      </td>\n      <td>\n        <button\n          (click)=\"changeLevel(logger.name, 'TRACE')\"\n          [ngClass]=\"logger.level === 'TRACE' ? 'btn-primary' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          TRACE\n        </button>\n\n        <button\n          (click)=\"changeLevel(logger.name, 'DEBUG')\"\n          [ngClass]=\"logger.level === 'DEBUG' ? 'btn-success' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          DEBUG\n        </button>\n\n        <button\n          (click)=\"changeLevel(logger.name, 'INFO')\"\n          [ngClass]=\"logger.level === 'INFO' ? 'btn-info' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          INFO\n        </button>\n\n        <button\n          (click)=\"changeLevel(logger.name, 'WARN')\"\n          [ngClass]=\"logger.level === 'WARN' ? 'btn-warning' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          WARN\n        </button>\n\n        <button\n          (click)=\"changeLevel(logger.name, 'ERROR')\"\n          [ngClass]=\"logger.level === 'ERROR' ? 'btn-danger' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          ERROR\n        </button>\n\n        <button\n          (click)=\"changeLevel(logger.name, 'OFF')\"\n          [ngClass]=\"logger.level === 'OFF' ? 'btn-secondary' : 'btn-light'\"\n          class=\"btn btn-sm\"\n        >\n          OFF\n        </button>\n      </td>\n    </tr>\n  </table>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { MetricsService } from './metrics.service';\nimport { ThreadDump, ThreadState } from './metrics.model';\n\ndescribe('Service Tests', () => {\n  describe('Logs Service', () => {\n    let service: MetricsService;\n    let httpMock: HttpTestingController;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      service = TestBed.inject(MetricsService);\n      httpMock = TestBed.inject(HttpTestingController);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('Service methods', () => {\n      it('should return Metrics', () => {\n        let expectedResult;\n        const metrics = {\n          jvm: {},\n          'http.server.requests': {},\n          cache: {},\n          services: {},\n          databases: {},\n          garbageCollector: {},\n          processMetrics: {},\n        };\n\n        service.getMetrics().subscribe(received => {\n          expectedResult = received;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(metrics);\n        expect(expectedResult).toEqual(metrics);\n      });\n\n      it('should return Thread Dump', () => {\n        let expectedResult: ThreadDump | null = null;\n        const dump: ThreadDump = {\n          threads: [\n            {\n              threadName: 'Reference Handler',\n              threadId: 2,\n              blockedTime: -1,\n              blockedCount: 7,\n              waitedTime: -1,\n              waitedCount: 0,\n              lockName: null,\n              lockOwnerId: -1,\n              lockOwnerName: null,\n              daemon: true,\n              inNative: false,\n              suspended: false,\n              threadState: ThreadState.Runnable,\n              priority: 10,\n              stackTrace: [],\n              lockedMonitors: [],\n              lockedSynchronizers: [],\n              lockInfo: null,\n            },\n          ],\n        };\n\n        service.threadDump().subscribe(received => {\n          expectedResult = received;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(dump);\n        expect(expectedResult).toEqual(dump);\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Metrics, ThreadDump } from './metrics.model';\n\n@Injectable({ providedIn: 'root' })\nexport class MetricsService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getMetrics(): Observable<Metrics> {\n    return this.http.get<Metrics>(this.applicationConfigService.getEndpointFor('management/jhimetrics'));\n  }\n\n  threadDump(): Observable<ThreadDump> {\n    return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/threaddump'));\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/metrics/metrics.model.ts",{"fileContent":"export interface Metrics {\n  jvm: { [key: string]: JvmMetrics };\n  databases: Databases;\n  'http.server.requests': HttpServerRequests;\n  cache: { [key: string]: CacheMetrics };\n  garbageCollector: GarbageCollector;\n  services: Services;\n  processMetrics: ProcessMetrics;\n}\n\nexport interface JvmMetrics {\n  committed: number;\n  max: number;\n  used: number;\n}\n\nexport interface Databases {\n  min: Value;\n  idle: Value;\n  max: Value;\n  usage: MetricsWithPercentile;\n  pending: Value;\n  active: Value;\n  acquire: MetricsWithPercentile;\n  creation: MetricsWithPercentile;\n  connections: Value;\n}\n\nexport interface Value {\n  value: number;\n}\n\nexport interface MetricsWithPercentile {\n  '0.0': number;\n  '1.0': number;\n  max: number;\n  totalTime: number;\n  mean: number;\n  '0.5': number;\n  count: number;\n  '0.99': number;\n  '0.75': number;\n  '0.95': number;\n}\n\nexport interface HttpServerRequests {\n  all: {\n    count: number;\n  };\n  percode: { [key: string]: MaxMeanCount };\n}\n\nexport interface MaxMeanCount {\n  max: number;\n  mean: number;\n  count: number;\n}\n\nexport interface CacheMetrics {\n  'cache.gets.miss': number;\n  'cache.puts': number;\n  'cache.gets.hit': number;\n  'cache.removals': number;\n  'cache.evictions': number;\n}\n\nexport interface GarbageCollector {\n  'jvm.gc.max.data.size': number;\n  'jvm.gc.pause': MetricsWithPercentile;\n  'jvm.gc.memory.promoted': number;\n  'jvm.gc.memory.allocated': number;\n  classesLoaded: number;\n  'jvm.gc.live.data.size': number;\n  classesUnloaded: number;\n}\n\nexport interface Services {\n  [key: string]: {\n    [key in HttpMethod]?: MaxMeanCount;\n  };\n}\n\nexport enum HttpMethod {\n  Post = 'POST',\n  Get = 'GET',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n}\n\nexport interface ProcessMetrics {\n  'system.cpu.usage': number;\n  'system.cpu.count': number;\n  'system.load.average.1m'?: number;\n  'process.cpu.usage': number;\n  'process.files.max'?: number;\n  'process.files.open'?: number;\n  'process.start.time': number;\n  'process.uptime': number;\n}\n\nexport interface ThreadDump {\n  threads: Thread[];\n}\n\nexport interface Thread {\n  threadName: string;\n  threadId: number;\n  blockedTime: number;\n  blockedCount: number;\n  waitedTime: number;\n  waitedCount: number;\n  lockName: string | null;\n  lockOwnerId: number;\n  lockOwnerName: string | null;\n  daemon: boolean;\n  inNative: boolean;\n  suspended: boolean;\n  threadState: ThreadState;\n  priority: number;\n  stackTrace: StackTrace[];\n  lockedMonitors: LockedMonitor[];\n  lockedSynchronizers: string[];\n  lockInfo: LockInfo | null;\n  // custom field for showing-hiding thread dump\n  showThreadDump?: boolean;\n}\n\nexport interface LockInfo {\n  className: string;\n  identityHashCode: number;\n}\n\nexport interface LockedMonitor {\n  className: string;\n  identityHashCode: number;\n  lockedStackDepth: number;\n  lockedStackFrame: StackTrace;\n}\n\nexport interface StackTrace {\n  classLoaderName: string | null;\n  moduleName: string | null;\n  moduleVersion: string | null;\n  methodName: string;\n  fileName: string;\n  lineNumber: number;\n  className: string;\n  nativeMethod: boolean;\n}\n\nexport enum ThreadState {\n  Runnable = 'RUNNABLE',\n  TimedWaiting = 'TIMED_WAITING',\n  Waiting = 'WAITING',\n  Blocked = 'BLOCKED',\n  New = 'NEW',\n  Terminated = 'TERMINATED',\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { ConfigurationComponent } from './configuration.component';\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\ndescribe('Component Tests', () => {\n  describe('ConfigurationComponent', () => {\n    let comp: ConfigurationComponent;\n    let fixture: ComponentFixture<ConfigurationComponent>;\n    let service: ConfigurationService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [ConfigurationComponent],\n          providers: [ConfigurationService],\n        })\n          .overrideTemplate(ConfigurationComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ConfigurationComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(ConfigurationService);\n    });\n\n    describe('OnInit', () => {\n      it('Should call load all on init', () => {\n        // GIVEN\n        const beans: Bean[] = [\n          {\n            prefix: 'jhipster',\n            properties: {\n              clientApp: {\n                name: 'jhipsterApp',\n              },\n            },\n          },\n        ];\n        const propertySources: PropertySource[] = [\n          {\n            name: 'server.ports',\n            properties: {\n              'local.server.port': {\n                value: '8080',\n              },\n            },\n          },\n        ];\n        jest.spyOn(service, 'getBeans').mockReturnValue(of(beans));\n        jest.spyOn(service, 'getPropertySources').mockReturnValue(of(propertySources));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.getBeans).toHaveBeenCalled();\n        expect(service.getPropertySources).toHaveBeenCalled();\n        expect(comp.allBeans).toEqual(beans);\n        expect(comp.beans).toEqual(beans);\n        expect(comp.propertySources).toEqual(propertySources);\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\n\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\n@Component({\n  selector: 'jhi-configuration',\n  templateUrl: './configuration.component.html',\n})\nexport class ConfigurationComponent implements OnInit {\n  allBeans!: Bean[];\n  beans: Bean[] = [];\n  beansFilter = '';\n  beansAscending = true;\n  propertySources: PropertySource[] = [];\n\n  constructor(private configurationService: ConfigurationService) {}\n\n  ngOnInit(): void {\n    this.configurationService.getBeans().subscribe(beans => {\n      this.allBeans = beans;\n      this.filterAndSortBeans();\n    });\n\n    this.configurationService.getPropertySources().subscribe(propertySources => (this.propertySources = propertySources));\n  }\n\n  filterAndSortBeans(): void {\n    const beansAscendingValue = this.beansAscending ? -1 : 1;\n    const beansAscendingValueReverse = this.beansAscending ? 1 : -1;\n    this.beans = this.allBeans\n      .filter(bean => !this.beansFilter || bean.prefix.toLowerCase().includes(this.beansFilter.toLowerCase()))\n      .sort((a, b) => (a.prefix < b.prefix ? beansAscendingValue : beansAscendingValueReverse));\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Bean, Beans, ConfigProps, Env, PropertySource } from './configuration.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurationService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getBeans(): Observable<Bean[]> {\n    return this.http.get<ConfigProps>(this.applicationConfigService.getEndpointFor('management/configprops')).pipe(\n      map(configProps =>\n        Object.values(\n          Object.values(configProps.contexts)\n            .map(context => context.beans)\n            .reduce((allBeans: Beans, contextBeans: Beans) => ({ ...allBeans, ...contextBeans }))\n        )\n      )\n    );\n  }\n\n  getPropertySources(): Observable<PropertySource[]> {\n    return this.http.get<Env>(this.applicationConfigService.getEndpointFor('management/env')).pipe(map(env => env.propertySources));\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.html",{"fileContent":"<div *ngIf=\"allBeans\">\n  <h2 id=\"configuration-page-heading\" data-cy=\"configurationPageHeading\">Configuration</h2>\n\n  <span>Filter (by prefix)</span>\n  <input type=\"text\" [(ngModel)]=\"beansFilter\" (ngModelChange)=\"filterAndSortBeans()\" class=\"form-control\" />\n\n  <h3 id=\"spring-configuration\">Spring configuration</h3>\n\n  <table class=\"table table-striped table-bordered table-responsive d-table\" aria-describedby=\"spring-configuration\">\n    <thead>\n      <tr jhiSort predicate=\"prefix\" [(ascending)]=\"beansAscending\" [callback]=\"filterAndSortBeans.bind(this)\">\n        <th jhiSortBy=\"prefix\" scope=\"col\" class=\"w-40\"><span>Prefix</span> <fa-icon icon=\"sort\"></fa-icon></th>\n        <th scope=\"col\" class=\"w-60\"><span>Properties</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let bean of beans\">\n        <td>\n          <span>{{ bean.prefix }}</span>\n        </td>\n        <td>\n          <div class=\"row\" *ngFor=\"let property of bean.properties | keyvalue\">\n            <div class=\"col-md-4\">{{ property.key }}</div>\n            <div class=\"col-md-8\">\n              <span class=\"float-right badge-secondary break\">{{ property.value | json }}</span>\n            </div>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div *ngFor=\"let propertySource of propertySources; let i = index\">\n    <h4 [id]=\"'property-source-' + i\">\n      <span>{{ propertySource.name }}</span>\n    </h4>\n\n    <table class=\"table table-sm table-striped table-bordered table-responsive d-table\" [attr.aria-describedby]=\"'property-source-' + i\">\n      <thead>\n        <tr>\n          <th scope=\"col\" class=\"w-40\">Property</th>\n          <th scope=\"col\" class=\"w-60\">Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let property of propertySource.properties | keyvalue\">\n          <td class=\"break\">{{ property.key }}</td>\n          <td class=\"break\">\n            <span class=\"float-right badge-secondary break\">{{ property.value.value }}</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/delete/booking-delete-dialog.component.spec.ts",{"fileContent":"jest.mock('@ng-bootstrap/ng-bootstrap');\n\nimport { ComponentFixture, TestBed, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { BookingService } from '../service/booking.service';\n\nimport { BookingDeleteDialogComponent } from './booking-delete-dialog.component';\n\ndescribe('Component Tests', () => {\n  describe('Booking Management Delete Component', () => {\n    let comp: BookingDeleteDialogComponent;\n    let fixture: ComponentFixture<BookingDeleteDialogComponent>;\n    let service: BookingService;\n    let mockActiveModal: NgbActiveModal;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [BookingDeleteDialogComponent],\n        providers: [NgbActiveModal],\n      })\n        .overrideTemplate(BookingDeleteDialogComponent, '')\n        .compileComponents();\n      fixture = TestBed.createComponent(BookingDeleteDialogComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(BookingService);\n      mockActiveModal = TestBed.inject(NgbActiveModal);\n    });\n\n    describe('confirmDelete', () => {\n      it('Should call delete service on confirmDelete', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          jest.spyOn(service, 'delete').mockReturnValue(of(new HttpResponse({})));\n\n          // WHEN\n          comp.confirmDelete(123);\n          tick();\n\n          // THEN\n          expect(service.delete).toHaveBeenCalledWith(123);\n          expect(mockActiveModal.close).toHaveBeenCalledWith('deleted');\n        })\n      ));\n\n      it('Should not call delete service on clear', () => {\n        // GIVEN\n        jest.spyOn(service, 'delete');\n\n        // WHEN\n        comp.cancel();\n\n        // THEN\n        expect(service.delete).not.toHaveBeenCalled();\n        expect(mockActiveModal.close).not.toHaveBeenCalled();\n        expect(mockActiveModal.dismiss).toHaveBeenCalled();\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/delete/booking-delete-dialog.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/delete/booking-delete-dialog.component.ts",{"fileContent":"import { Component } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { IBooking } from '../booking.model';\nimport { BookingService } from '../service/booking.service';\n\n@Component({\n  templateUrl: './booking-delete-dialog.component.html',\n})\nexport class BookingDeleteDialogComponent {\n  booking?: IBooking;\n\n  constructor(protected bookingService: BookingService, protected activeModal: NgbActiveModal) {}\n\n  cancel(): void {\n    this.activeModal.dismiss();\n  }\n\n  confirmDelete(id: number): void {\n    this.bookingService.delete(id).subscribe(() => {\n      this.activeModal.close('deleted');\n    });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/operators.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/request/request-util.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/delete/booking-delete-dialog.component.html",{"fileContent":"<form *ngIf=\"booking\" name=\"deleteForm\" (ngSubmit)=\"confirmDelete(booking.id!)\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" data-cy=\"bookingDeleteDialogHeading\">Confirm delete operation</h4>\n\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"cancel()\">&times;</button>\n  </div>\n\n  <div class=\"modal-body\">\n    <jhi-alert-error></jhi-alert-error>\n\n    <p id=\"jhi-delete-booking-heading\">Are you sure you want to delete this Booking?</p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"cancel()\">\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n    </button>\n\n    <button id=\"jhi-confirm-delete-booking\" data-cy=\"entityConfirmDeleteButton\" type=\"submit\" class=\"btn btn-danger\">\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span>Delete</span>\n    </button>\n  </div>\n</form>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.component.spec.ts",{"fileContent":"import { TestBed, waitForAsync, tick, fakeAsync, inject } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { ActivateService } from './activate.service';\nimport { ActivateComponent } from './activate.component';\n\ndescribe('Component Tests', () => {\n  describe('ActivateComponent', () => {\n    let comp: ActivateComponent;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [ActivateComponent],\n          providers: [\n            {\n              provide: ActivatedRoute,\n              useValue: { queryParams: of({ key: 'ABC123' }) },\n            },\n          ],\n        })\n          .overrideTemplate(ActivateComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      const fixture = TestBed.createComponent(ActivateComponent);\n      comp = fixture.componentInstance;\n    });\n\n    it('calls activate.get with the key from params', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        jest.spyOn(service, 'get').mockReturnValue(of());\n\n        comp.ngOnInit();\n        tick();\n\n        expect(service.get).toHaveBeenCalledWith('ABC123');\n      })\n    ));\n\n    it('should set set success to true upon successful activation', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        jest.spyOn(service, 'get').mockReturnValue(of({}));\n\n        comp.ngOnInit();\n        tick();\n\n        expect(comp.error).toBe(false);\n        expect(comp.success).toBe(true);\n      })\n    ));\n\n    it('should set set error to true upon activation failure', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        jest.spyOn(service, 'get').mockReturnValue(throwError('ERROR'));\n\n        comp.ngOnInit();\n        tick();\n\n        expect(comp.error).toBe(true);\n        expect(comp.success).toBe(false);\n      })\n    ));\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivateService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/activate'), {\n      params: new HttpParams().set('key', key),\n    });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ActivateService } from './activate.service';\n\n@Component({\n  selector: 'jhi-activate',\n  templateUrl: './activate.component.html',\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(private activateService: ActivateService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.pipe(mergeMap(params => this.activateService.get(params.key))).subscribe(\n      () => (this.success = true),\n      () => (this.error = true)\n    );\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/activate/activate.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1>Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span><strong>Your user account has been activated.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/pagination/item-count.component.spec.ts",{"fileContent":"import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { ItemCountComponent } from './item-count.component';\n\ndescribe('ItemCountComponent test', () => {\n  let comp: ItemCountComponent;\n  let fixture: ComponentFixture<ItemCountComponent>;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [ItemCountComponent],\n      }).compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ItemCountComponent);\n    comp = fixture.componentInstance;\n  });\n\n  describe('UI logic tests', () => {\n    it('should initialize with undefined', () => {\n      expect(comp.first).toBeUndefined();\n      expect(comp.second).toBeUndefined();\n      expect(comp.total).toBeUndefined();\n    });\n\n    it('should set calculated numbers to undefined if the page value is not yet defined', () => {\n      // GIVEN\n      comp.params = { page: undefined, totalItems: 0, itemsPerPage: 10 };\n\n      // THEN\n      expect(comp.first).toBeUndefined();\n      expect(comp.second).toBeUndefined();\n    });\n\n    it('should change the content on page change', () => {\n      // GIVEN\n      comp.params = { page: 1, totalItems: 100, itemsPerPage: 10 };\n\n      // THEN\n      expect(comp.first).toBe(1);\n      expect(comp.second).toBe(10);\n      expect(comp.total).toBe(100);\n\n      // GIVEN\n      comp.params = { page: 2, totalItems: 100, itemsPerPage: 10 };\n\n      // THEN\n      expect(comp.first).toBe(11);\n      expect(comp.second).toBe(20);\n      expect(comp.total).toBe(100);\n    });\n\n    it('should set the second number to totalItems if this is the last page which contains less than itemsPerPage items', () => {\n      // GIVEN\n      comp.params = { page: 2, totalItems: 16, itemsPerPage: 10 };\n\n      // THEN\n      expect(comp.first).toBe(11);\n      expect(comp.second).toBe(16);\n      expect(comp.total).toBe(16);\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/pagination/item-count.component.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/pagination/item-count.component.ts",{"fileContent":"import { Component, Input } from '@angular/core';\n\n/**\n * A component that will take care of item count statistics of a pagination.\n */\n@Component({\n  selector: 'jhi-item-count',\n  template: ` <div>Showing {{ first }} - {{ second }} of {{ total }} items.</div> `,\n})\nexport class ItemCountComponent {\n  /**\n   * @param params  Contains parameters for component:\n   *                    page          Current page number\n   *                    totalItems    Total number of items\n   *                    itemsPerPage  Number of items per page\n   */\n  @Input() set params(params: { page?: number; totalItems?: number; itemsPerPage?: number }) {\n    if (params.page && params.totalItems !== undefined && params.itemsPerPage) {\n      this.first = (params.page - 1) * params.itemsPerPage + 1;\n      this.second = params.page * params.itemsPerPage < params.totalItems ? params.page * params.itemsPerPage : params.totalItems;\n    } else {\n      this.first = undefined;\n      this.second = undefined;\n    }\n    this.total = params.totalItems;\n  }\n\n  first?: number;\n  second?: number;\n  total?: number;\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/detail/user-management-detail.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { User } from '../user-management.model';\n\nimport { UserManagementDetailComponent } from './user-management-detail.component';\n\ndescribe('Component Tests', () => {\n  describe('User Management Detail Component', () => {\n    let comp: UserManagementDetailComponent;\n    let fixture: ComponentFixture<UserManagementDetailComponent>;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [UserManagementDetailComponent],\n          providers: [\n            {\n              provide: ActivatedRoute,\n              useValue: {\n                data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n              },\n            },\n          ],\n        })\n          .overrideTemplate(UserManagementDetailComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(UserManagementDetailComponent);\n      comp = fixture.componentInstance;\n    });\n\n    describe('OnInit', () => {\n      it('Should call load all on init', () => {\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(comp.user).toEqual(\n          expect.objectContaining({\n            id: 123,\n            login: 'user',\n            firstName: 'first',\n            lastName: 'last',\n            email: 'first@last.com',\n            activated: true,\n            langKey: 'en',\n            authorities: [Authority.USER],\n            createdBy: 'admin',\n          })\n        );\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/config/authority.constants.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/detail/user-management-detail.component.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/detail/user-management-detail.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { User } from '../user-management.model';\n\n@Component({\n  selector: 'jhi-user-mgmt-detail',\n  templateUrl: './user-management-detail.component.html',\n})\nexport class UserManagementDetailComponent implements OnInit {\n  user: User | null = null;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      this.user = user;\n    });\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/user-management.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/detail/user-management-detail.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"user\">\n      <h2>\n        <span>User</span> [<strong>{{ user.login }}</strong\n        >]\n      </h2>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span>Login</span></dt>\n        <dd>\n          <span>{{ user.login }}</span>\n          <span *ngIf=\"user.activated\" class=\"badge badge-success\">Activated</span>\n          <span *ngIf=\"!user.activated\" class=\"badge badge-danger\">Deactivated</span>\n        </dd>\n\n        <dt><span>First Name</span></dt>\n        <dd>{{ user.firstName }}</dd>\n\n        <dt><span>Last Name</span></dt>\n        <dd>{{ user.lastName }}</dd>\n\n        <dt><span>Email</span></dt>\n        <dd>{{ user.email }}</dd>\n\n        <dt><span>Created By</span></dt>\n        <dd>{{ user.createdBy }}</dd>\n\n        <dt><span>Created Date</span></dt>\n        <dd>{{ user.createdDate | date: 'dd/MM/yy HH:mm' }}</dd>\n\n        <dt><span>Last Modified By</span></dt>\n        <dd>{{ user.lastModifiedBy }}</dd>\n\n        <dt><span>Last Modified Date</span></dt>\n        <dd>{{ user.lastModifiedDate | date: 'dd/MM/yy HH:mm' }}</dd>\n\n        <dt><span>Profiles</span></dt>\n        <dd>\n          <ul class=\"list-unstyled\">\n            <li *ngFor=\"let authority of user.authorities\">\n              <span class=\"badge badge-info\">{{ authority }}</span>\n            </li>\n          </ul>\n        </dd>\n      </dl>\n\n      <button type=\"submit\" routerLink=\"../../\" class=\"btn btn-info\"><fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span></button>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.spec.ts",{"fileContent":"import { inject, TestBed } from '@angular/core/testing';\n\nimport { ParseLinks } from './parse-links.service';\n\ndescribe('Parse links service test', () => {\n  describe('Parse Links Service Test', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        providers: [ParseLinks],\n      });\n    });\n\n    it('should throw an error when passed an empty string', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('');\n      }).toThrow(new Error('input must not be of zero length'));\n    }));\n\n    it('should throw an error when passed without comma', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should throw an error when passed without semicolon', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test,test2');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should return links when headers are passed', inject([ParseLinks], (service: ParseLinks) => {\n      const links = { last: 0, first: 0 };\n      expect(service.parse(' </api/audits?page=0&size=20>; rel=\"last\",</api/audits?page=0&size=20>; rel=\"first\"')).toEqual(links);\n    }));\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(',');\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section: string[] = p.split(';');\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? '';\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/alert/alert.component.spec.ts",{"fileContent":"jest.mock('app/core/util/alert.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n\nimport { AlertService } from 'app/core/util/alert.service';\n\nimport { AlertComponent } from './alert.component';\n\ndescribe('Component Tests', () => {\n  describe('Alert Component', () => {\n    let comp: AlertComponent;\n    let fixture: ComponentFixture<AlertComponent>;\n    let mockAlertService: AlertService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [AlertComponent],\n          providers: [AlertService],\n        })\n          .overrideTemplate(AlertComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(AlertComponent);\n      comp = fixture.componentInstance;\n      mockAlertService = TestBed.inject(AlertService);\n    });\n\n    it('Should call alertService.get on init', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAlertService.get).toHaveBeenCalled();\n    });\n\n    it('Should call alertService.clear on destroy', () => {\n      // WHEN\n      comp.ngOnDestroy();\n\n      // THEN\n      expect(mockAlertService.clear).toHaveBeenCalled();\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/alert.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/alert/alert.component.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/alert/alert.component.ts",{"fileContent":"import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { AlertService, Alert } from 'app/core/util/alert.service';\n\n@Component({\n  selector: 'jhi-alert',\n  templateUrl: './alert.component.html',\n})\nexport class AlertComponent implements OnInit, OnDestroy {\n  alerts: Alert[] = [];\n\n  constructor(private alertService: AlertService) {}\n\n  ngOnInit(): void {\n    this.alerts = this.alertService.get();\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.alertService.clear();\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/alert.service.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/alert/alert.component.html",{"fileContent":"<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert *ngIf=\"alert.message\" [type]=\"alert.type\" (closed)=\"close(alert)\">\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/detail/booking-detail.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { BookingDetailComponent } from './booking-detail.component';\n\ndescribe('Component Tests', () => {\n  describe('Booking Management Detail Component', () => {\n    let comp: BookingDetailComponent;\n    let fixture: ComponentFixture<BookingDetailComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        declarations: [BookingDetailComponent],\n        providers: [\n          {\n            provide: ActivatedRoute,\n            useValue: { data: of({ booking: { id: 123 } }) },\n          },\n        ],\n      })\n        .overrideTemplate(BookingDetailComponent, '')\n        .compileComponents();\n      fixture = TestBed.createComponent(BookingDetailComponent);\n      comp = fixture.componentInstance;\n    });\n\n    describe('OnInit', () => {\n      it('Should load booking on init', () => {\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(comp.booking).toEqual(expect.objectContaining({ id: 123 }));\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/detail/booking-detail.component.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/detail/booking-detail.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { IBooking } from '../booking.model';\n\n@Component({\n  selector: 'jhi-booking-detail',\n  templateUrl: './booking-detail.component.html',\n})\nexport class BookingDetailComponent implements OnInit {\n  booking: IBooking | null = null;\n\n  constructor(protected activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ booking }) => {\n      this.booking = booking;\n    });\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n}\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/booking.model.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/enumerations/plan.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/detail/booking-detail.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"booking\">\n      <h2 data-cy=\"bookingDetailsHeading\"><span>Booking</span></h2>\n\n      <hr />\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <jhi-alert></jhi-alert>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span>ID</span></dt>\n        <dd>\n          <span>{{ booking.id }}</span>\n        </dd>\n        <dt><span>Event Date</span></dt>\n        <dd>\n          <span>{{ booking.eventDate | formatMediumDatetime }}</span>\n        </dd>\n        <dt><span>Venue</span></dt>\n        <dd>\n          <span>{{ booking.venue }}</span>\n        </dd>\n        <dt><span>Plan</span></dt>\n        <dd>\n          <span>{{ booking.plan }}</span>\n        </dd>\n        <dt><span>Created Date</span></dt>\n        <dd>\n          <span>{{ booking.createdDate | formatMediumDatetime }}</span>\n        </dd>\n        <dt><span>Contact Number</span></dt>\n        <dd>\n          <span>{{ booking.contactNumber }}</span>\n        </dd>\n        <dt><span>Email Id</span></dt>\n        <dd>\n          <span>{{ booking.emailId }}</span>\n        </dd>\n        <dt><span>User Name</span></dt>\n        <dd>\n          <span>{{ booking.userName }}</span>\n        </dd>\n        <dt><span>User Id</span></dt>\n        <dd>\n          <span>{{ booking.userId }}</span>\n        </dd>\n      </dl>\n\n      <button type=\"submit\" (click)=\"previousState()\" class=\"btn btn-info\" data-cy=\"entityDetailsBackButton\">\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span>\n      </button>\n\n      <button type=\"button\" [routerLink]=\"['/booking', booking.id, 'edit']\" class=\"btn btn-primary\">\n        <fa-icon icon=\"pencil-alt\"></fa-icon>&nbsp;<span>Edit</span>\n      </button>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { LogsService } from './logs.service';\n\ndescribe('Service Tests', () => {\n  describe('Logs Service', () => {\n    let service: LogsService;\n    let httpMock: HttpTestingController;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n\n      service = TestBed.inject(LogsService);\n      httpMock = TestBed.inject(HttpTestingController);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('Service methods', () => {\n      it('should change log level', () => {\n        service.changeLevel('main', 'ERROR').subscribe();\n\n        const req = httpMock.expectOne({ method: 'POST' });\n        expect(req.request.body).toEqual({ configuredLevel: 'ERROR' });\n      });\n    });\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/config/application-config.service.ts","/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/log.model.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/date/format-medium-date.pipe.spec.ts",{"fileContent":"import * as dayjs from 'dayjs';\n\nimport { FormatMediumDatePipe } from './format-medium-date.pipe';\n\ndescribe('FormatMediumDatePipe', () => {\n  const formatMediumDatePipe = new FormatMediumDatePipe();\n\n  it('should return an empty string when receive undefined', () => {\n    expect(formatMediumDatePipe.transform(undefined)).toBe('');\n  });\n\n  it('should return an empty string when receive null', () => {\n    expect(formatMediumDatePipe.transform(null)).toBe('');\n  });\n\n  it('should format date like this D MMM YYYY', () => {\n    expect(formatMediumDatePipe.transform(dayjs('2020-11-16').locale('fr'))).toBe('16 Nov 2020');\n  });\n});\n","resolvedModuleNames":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/date/format-medium-date.pipe.ts"]}],["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/date/format-medium-date.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\n\n@Pipe({\n  name: 'formatMediumDate',\n})\nexport class FormatMediumDatePipe implements PipeTransform {\n  transform(day: dayjs.Dayjs | null | undefined): string {\n    return day ? day.format('D MMM YYYY') : '';\n  }\n}\n","resolvedModuleNames":[]}]]