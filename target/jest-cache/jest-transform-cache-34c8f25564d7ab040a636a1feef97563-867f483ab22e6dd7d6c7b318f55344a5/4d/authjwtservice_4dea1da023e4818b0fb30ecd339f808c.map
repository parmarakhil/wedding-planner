{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Login } from 'app/login/login.model';\n\ntype JwtToken = {\n  id_token: string;\n};\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(\n    private http: HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  getToken(): string {\n    const tokenInLocalStorage: string | null = this.localStorageService.retrieve('authenticationToken');\n    const tokenInSessionStorage: string | null = this.sessionStorageService.retrieve('authenticationToken');\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? '';\n  }\n\n  login(credentials: Login): Observable<void> {\n    return this.http\n      .post<JwtToken>(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials)\n      .pipe(map(response => this.authenticateSuccess(response, credentials.rememberMe)));\n  }\n\n  logout(): Observable<void> {\n    return new Observable(observer => {\n      this.localStorageService.clear('authenticationToken');\n      this.sessionStorageService.clear('authenticationToken');\n      observer.complete();\n    });\n  }\n\n  private authenticateSuccess(response: JwtToken, rememberMe: boolean): void {\n    const jwt = response.id_token;\n    if (rememberMe) {\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else {\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n}\n"]}