{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/alert/alert-error.component.ts"],"names":[],"mappingsqBO;;;;;;;;;;;;;;;;;;;;AArBP,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AAKA,MAAA,eAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;AACA,MAAA,uBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,qCAAA,CAAA,CAAA;;;;IAMa,mBAAmB,GAAA,MAAnB,mBAAmB,CAAA;AAK9B,EAAA,WAAA,CAAoB,YAApB,EAAwD,YAAxD,EAAkF;AAAA;AAAA;AAAA;AAA9D,SAAA,YAAA,GAAA,YAAA;;AAA8D;AAAA;AAA1B,SAAA,YAAA,GAAA,YAAA;;AAA0B;AAAA;AAJlF,SAAA,MAAA,GAAkB,EAAlB;;AAIkF;AAAA;AAChF,SAAK,aAAL,GAAqB,YAAY,CAAC,SAAb,CAAuB,yBAAvB,EAAkD,CAAC,QAAD,KAAiD;AAAA;AAAA;AACtH,YAAM,aAAa;AAAA;AAAA,iCAAI,QAAyC,CAAC,OAA9C,CAAnB;;AADsH;AAAA;AAEtH,WAAK,aAAL,CAAmB,aAAa,CAAC,OAAjC;AACD,KAHoB,CAArB;;AADgF;AAAA;AAMhF,SAAK,iBAAL,GAAyB,YAAY,CAAC,SAAb,CAAuB,6BAAvB,EAAsD,CAAC,QAAD,KAAiD;AAAA;AAAA;;;;AAC9H,YAAM,iBAAiB;AAAA;AAAA,iCAAI,QAAgD,CAAC,OAArD,CAAvB;;AAD8H;AAAA;;AAE9H,cAAQ,iBAAiB,CAAC,MAA1B;AACE;AACA,aAAK,CAAL;AAAA;AAAA;AAAA;AACE,eAAK,aAAL,CAAmB,sBAAnB;;AADF;AAAA;AAEE;;AAEF,aAAK,GAAL;AAAA;AAAA;AAAU;AACR,kBAAM,GAAG;AAAA;AAAA,uCAAG,iBAAiB,CAAC,OAAlB,CAA0B,IAA1B,EAAH,CAAT;AACA,gBAAI,WAAW;AAAA;AAAA,uCAAkB,IAAlB,CAAf;;AAFQ;AAAA;;AAGR,iBAAK,MAAM,KAAX,IAAoB,GAApB,EAAyB;AAAA;AAAA;;AACvB,kBAAI,KAAK,CAAC,WAAN,GAAoB,QAApB,CAA6B,WAA7B,CAAJ,EAA+C;AAAA;AAAA;AAAA;AAC7C,gBAAA,WAAW,GAAG,iBAAiB,CAAC,OAAlB,CAA0B,GAA1B,CAA8B,KAA9B,CAAd;AACD,eAFD;AAAA;AAAA;AAAA;AAAA;AAGD;;AAPO;AAAA;;AAQR,gBAAI,WAAJ,EAAiB;AAAA;AAAA;AAAA;AACf,mBAAK,aAAL,CAAmB,WAAnB;AACD,aAFD,MAEO;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,2CAAA,iBAAiB,CAAC,KAAlB,KAA4B,EAA5B;AAAA;AAAA,2CAAkC,iBAAiB,CAAC,KAAlB,CAAwB,WAA1D,CAAJ,EAA2E;AAAA;AAAA;AAChF,sBAAM,WAAW;AAAA;AAAA,2CAAG,iBAAiB,CAAC,KAAlB,CAAwB,WAA3B,CAAjB;;AADgF;AAAA;;AAEhF,qBAAK,MAAM,UAAX,IAAyB,WAAzB,EAAsC;AAAA;AAAA;;AACpC,sBAAI,CAAC,KAAD,EAAQ,KAAR,EAAe,YAAf,EAA6B,YAA7B,EAA2C,QAA3C,CAAoD,UAAU,CAAC,OAA/D,CAAJ,EAA6E;AAAA;AAAA;AAAA;AAC3E,oBAAA,UAAU,CAAC,OAAX,GAAqB,MAArB;AACD,mBAFD;AAAA;AAAA;AAAA;AAAA,mBADoC,CAIpC;;;AACA,wBAAM,cAAc;AAAA;AAAA,6CAAW,UAAU,CAAC,KAAX,CAAiB,OAAjB,CAAyB,UAAzB,EAAqC,IAArC,CAAX,CAApB;AACA,wBAAM,SAAS;AAAA;AAAA,6CAAW,cAAc,CAAC,MAAf,CAAsB,CAAtB,EAAyB,WAAzB,KAAyC,cAAc,CAAC,KAAf,CAAqB,CAArB,CAApD,CAAf;;AANoC;AAAA;AAOpC,uBAAK,aAAL,CAAmB,mBAAmB,SAAS,GAA/C;AACD;AACF,eAXM,MAWA;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,6CAAA,iBAAiB,CAAC,KAAlB,KAA4B,EAA5B;AAAA;AAAA,6CAAkC,iBAAiB,CAAC,KAAlB,CAAwB,OAA1D,CAAJ,EAAuE;AAAA;AAAA;AAAA;AAC5E,uBAAK,aAAL;AAAmB;AAAA,gDAAA,EAAA,GAAA,iBAAiB,CAAC,KAAlB,CAAwB,MAAxB,MAA8B,IAA9B;AAAA;AAAA,+CAA8B,EAAA,KAAA,KAAA,CAA9B;AAAA;AAAA,+CAA8B,EAA9B;AAAA;AAAA,+CAAkC,iBAAiB,CAAC,KAAlB,CAAwB,OAA1D,CAAnB;AACD,iBAFM,MAEA;AAAA;AAAA;AAAA;AACL,uBAAK,aAAL,CAAmB,iBAAiB,CAAC,KAArC;AACD;AAAA;AAAA;;AAzBO;AAAA;AA0BR;AACD;;AAED,aAAK,GAAL;AAAA;AAAA;AAAA;AACE,eAAK,aAAL,CAAmB,WAAnB;;AADF;AAAA;AAEE;;AAEF;AAAA;AAAA;AAAA;;AACE;AAAI;AAAA,wCAAA,iBAAiB,CAAC,KAAlB,KAA4B,EAA5B;AAAA;AAAA,wCAAkC,iBAAiB,CAAC,KAAlB,CAAwB,OAA1D,CAAJ,EAAuE;AAAA;AAAA;AAAA;AACrE,iBAAK,aAAL;AAAmB;AAAA,2CAAA,EAAA,GAAA,iBAAiB,CAAC,KAAlB,CAAwB,MAAxB,MAA8B,IAA9B;AAAA;AAAA,0CAA8B,EAAA,KAAA,KAAA,CAA9B;AAAA;AAAA,0CAA8B,EAA9B;AAAA;AAAA,0CAAkC,iBAAiB,CAAC,KAAlB,CAAwB,OAA1D,CAAnB;AACD,WAFD,MAEO;AAAA;AAAA;AAAA;AACL,iBAAK,aAAL,CAAmB,iBAAiB,CAAC,KAArC;AACD;;AA5CL;AA8CD,KAhDwB,CAAzB;AAiDD;;AAED,EAAA,UAAU,CAAC,KAAD,EAAa;AAAA;AAAA;AACrB,UAAM,OAAO;AAAA;AAAA,+BAAG;AAAE,mBAAa,OAAO,CAAC,KAAK,CAAC,KAAP;AAAtB,KAAH,CAAb;;AADqB;AAAA;;AAErB,QAAI,KAAK,CAAC,QAAV,EAAoB;AAAA;AAAA;AAAA;AAClB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,OAAZ,CAAA,EAAmB;AAAE,SAAC,KAAK,CAAC,QAAP,GAAkB;AAApB,OAAnB,CAAA;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;;AAFqB;AAKrB,WAAO,OAAP;AACD;;AAED,EAAA,WAAW,GAAA;AAAA;AAAA;AAAA;AACT,SAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,aAA/B;;AADS;AAAA;AAET,SAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,iBAA/B;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAa;AAAA;AAAA;;;;AAAA;AAAA;;AAChB;AAAA,mCAAA,EAAA,GAAA,KAAK,CAAC,KAAN,MAAW,IAAX;AAAA;AAAA,kCAAW,EAAA,KAAA,KAAA,CAAX;AAAA;AAAA,kCAAW,KAAA,CAAX;AAAA;AAAA,kCAAW,EAAA,CAAA,IAAA,CAAX,KAAW,EAAG,KAAK,MAAR,CAAX;AACD;;AAEO,EAAA,aAAa,CAAC,OAAD,EAAiB;AAAA;AAAA;AAAA;AACpC,SAAK,YAAL,CAAkB,QAAlB,CAA2B;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA;AAAlB,KAA3B,EAAwD,KAAK,MAA7D;AACD;;AAjF6B,C;;;;;;;;;;UAPhB,eAAA,CAAA;;UACP,uBAAA,CAAA;;;;;;AAMI,mBAAmB,GAAA,OAAA,CAAA,UAAA,CAAA,CAJ/B,MAAA,CAAA,SAAA,CAAU;AACT,EAAA,QAAQ,EAAE,iBADD;AAET,EAAA,QAAA,EAAA,OAAA,CAAA,8BAAA;AAFS,CAAV,CAI+B,E,yCAKI,eAAA,CAAA,Y,EAAoC,uBAAA,CAAA,Y,EALxC,CAAA,EAAnB,mBAAmB,CAAnB;;;;AAAA,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourcesContent":["import { Component, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\n\nimport { AlertError } from './alert-error.model';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\n\n@Component({\n  selector: 'jhi-alert-error',\n  templateUrl: './alert-error.component.html',\n})\nexport class AlertErrorComponent implements OnDestroy {\n  alerts: Alert[] = [];\n  errorListener: Subscription;\n  httpErrorListener: Subscription;\n\n  constructor(private alertService: AlertService, private eventManager: EventManager) {\n    this.errorListener = eventManager.subscribe('weddingplannerApp.error', (response: EventWithContent<unknown> | string) => {\n      const errorResponse = (response as EventWithContent<AlertError>).content;\n      this.addErrorAlert(errorResponse.message);\n    });\n\n    this.httpErrorListener = eventManager.subscribe('weddingplannerApp.httpError', (response: EventWithContent<unknown> | string) => {\n      const httpErrorResponse = (response as EventWithContent<HttpErrorResponse>).content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable');\n          break;\n\n        case 400: {\n          const arr = httpErrorResponse.headers.keys();\n          let errorHeader: string | null = null;\n          for (const entry of arr) {\n            if (entry.toLowerCase().endsWith('app-error')) {\n              errorHeader = httpErrorResponse.headers.get(entry);\n            }\n          }\n          if (errorHeader) {\n            this.addErrorAlert(errorHeader);\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n            const fieldErrors = httpErrorResponse.error.fieldErrors;\n            for (const fieldError of fieldErrors) {\n              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                fieldError.message = 'Size';\n              }\n              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n              const convertedField: string = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n              const fieldName: string = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n              this.addErrorAlert(`Error on field \"${fieldName}\"`);\n            }\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message);\n          } else {\n            this.addErrorAlert(httpErrorResponse.error);\n          }\n          break;\n        }\n\n        case 404:\n          this.addErrorAlert('Not found');\n          break;\n\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message);\n          } else {\n            this.addErrorAlert(httpErrorResponse.error);\n          }\n      }\n    });\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n\n  private addErrorAlert(message?: string): void {\n    this.alertService.addAlert({ type: 'danger', message }, this.alerts);\n  }\n}\n"]}