{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/list/user-management.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/user-management/list/user-management.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { UserManagementComponent } from './user-management.component';\n\ndescribe('Component Tests', () => {\n  describe('User Management Component', () => {\n    let comp: UserManagementComponent;\n    let fixture: ComponentFixture<UserManagementComponent>;\n    let service: UserManagementService;\n    let mockAccountService: AccountService;\n    const data = of({\n      defaultSort: 'id,asc',\n    });\n    const queryParamMap = of(\n      jest.requireActual('@angular/router').convertToParamMap({\n        page: '1',\n        size: '1',\n        sort: 'id,desc',\n      })\n    );\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [UserManagementComponent],\n          providers: [Router, { provide: ActivatedRoute, useValue: { data, queryParamMap } }, AccountService],\n        })\n          .overrideTemplate(UserManagementComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(UserManagementComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(UserManagementService);\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(null));\n    });\n\n    describe('OnInit', () => {\n      it('Should call load all on init', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const headers = new HttpHeaders().append('link', 'link;link');\n          jest.spyOn(service, 'query').mockReturnValue(\n            of(\n              new HttpResponse({\n                body: [new User(123)],\n                headers,\n              })\n            )\n          );\n\n          // WHEN\n          comp.ngOnInit();\n          tick(); // simulate async\n\n          // THEN\n          expect(service.query).toHaveBeenCalled();\n          expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n        })\n      ));\n    });\n\n    describe('setActive', () => {\n      it('Should update user and call load all', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const headers = new HttpHeaders().append('link', 'link;link');\n          const user = new User(123);\n          jest.spyOn(service, 'query').mockReturnValue(\n            of(\n              new HttpResponse({\n                body: [user],\n                headers,\n              })\n            )\n          );\n          jest.spyOn(service, 'update').mockReturnValue(of(user));\n\n          // WHEN\n          comp.setActive(user, true);\n          tick(); // simulate async\n\n          // THEN\n          expect(service.update).toHaveBeenCalledWith({ ...user, activated: true });\n          expect(service.query).toHaveBeenCalled();\n          expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n        })\n      ));\n    });\n  });\n});\n"],"version":3}