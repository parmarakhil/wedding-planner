7defe2665d237b3b3a832d2f1292be31
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const error_constants_1 = require("app/config/error.constants");
const register_service_1 = require("./register.service");
const register_component_1 = require("./register.component");
describe('Component Tests', () => {
    describe('RegisterComponent', () => {
        let fixture;
        let comp;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [register_component_1.RegisterComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(register_component_1.RegisterComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(register_component_1.RegisterComponent);
            comp = fixture.componentInstance;
        });
        it('should ensure the two passwords entered match', () => {
            comp.registerForm.patchValue({
                password: 'password',
                confirmPassword: 'non-matching',
            });
            comp.register();
            expect(comp.doNotMatch).toBe(true);
        });
        it('should update success to true after creating an account', testing_1.inject([register_service_1.RegisterService], testing_1.fakeAsync((service) => {
            jest.spyOn(service, 'save').mockReturnValue(rxjs_1.of({}));
            comp.registerForm.patchValue({
                password: 'password',
                confirmPassword: 'password',
            });
            comp.register();
            testing_1.tick();
            expect(service.save).toHaveBeenCalledWith({
                email: '',
                password: 'password',
                login: '',
                langKey: 'en',
            });
            expect(comp.success).toBe(true);
            expect(comp.errorUserExists).toBe(false);
            expect(comp.errorEmailExists).toBe(false);
            expect(comp.error).toBe(false);
        })));
        it('should notify of user existence upon 400/login already in use', testing_1.inject([register_service_1.RegisterService], testing_1.fakeAsync((service) => {
            jest.spyOn(service, 'save').mockReturnValue(rxjs_1.throwError({
                status: 400,
                error: { type: error_constants_1.LOGIN_ALREADY_USED_TYPE },
            }));
            comp.registerForm.patchValue({
                password: 'password',
                confirmPassword: 'password',
            });
            comp.register();
            testing_1.tick();
            expect(comp.errorUserExists).toBe(true);
            expect(comp.errorEmailExists).toBe(false);
            expect(comp.error).toBe(false);
        })));
        it('should notify of email existence upon 400/email address already in use', testing_1.inject([register_service_1.RegisterService], testing_1.fakeAsync((service) => {
            jest.spyOn(service, 'save').mockReturnValue(rxjs_1.throwError({
                status: 400,
                error: { type: error_constants_1.EMAIL_ALREADY_USED_TYPE },
            }));
            comp.registerForm.patchValue({
                password: 'password',
                confirmPassword: 'password',
            });
            comp.register();
            testing_1.tick();
            expect(comp.errorEmailExists).toBe(true);
            expect(comp.errorUserExists).toBe(false);
            expect(comp.error).toBe(false);
        })));
        it('should notify of generic error', testing_1.inject([register_service_1.RegisterService], testing_1.fakeAsync((service) => {
            jest.spyOn(service, 'save').mockReturnValue(rxjs_1.throwError({
                status: 503,
            }));
            comp.registerForm.patchValue({
                password: 'password',
                confirmPassword: 'password',
            });
            comp.register();
            testing_1.tick();
            expect(comp.errorUserExists).toBe(false);
            expect(comp.errorEmailExists).toBe(false);
            expect(comp.error).toBe(true);
        })));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,