{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/event-manager.service.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/event-manager.service.spec.ts"],"sourcesContent":["import { inject, TestBed } from '@angular/core/testing';\n\nimport { EventManager, EventWithContent } from './event-manager.service';\n\ndescribe('Event Manager tests', () => {\n  describe('EventWithContent', () => {\n    it('should create correctly EventWithContent', () => {\n      // WHEN\n      const eventWithContent = new EventWithContent('name', 'content');\n\n      // THEN\n      expect(eventWithContent).toEqual({ name: 'name', content: 'content' });\n    });\n  });\n\n  describe('EventManager', () => {\n    let recievedEvent: EventWithContent<unknown> | string | null;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        providers: [EventManager],\n      });\n      recievedEvent = null;\n    });\n\n    it('should not fail when nosubscriber and broadcasting', inject([EventManager], (eventManager: EventManager) => {\n      expect(eventManager.observer).toBeUndefined();\n      eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n    }));\n\n    it('should create an observable and callback when broadcasted EventWithContent', inject(\n      [EventManager],\n      (eventManager: EventManager) => {\n        // GIVEN\n        eventManager.subscribe('modifier', (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n        // WHEN\n        eventManager.broadcast({ name: 'unrelatedModifier', content: 'unreleated modification' });\n        // THEN\n        expect(recievedEvent).toBeNull();\n\n        // WHEN\n        eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n        // THEN\n        expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });\n      }\n    ));\n\n    it('should create an observable and callback when broadcasted string', inject([EventManager], (eventManager: EventManager) => {\n      // GIVEN\n      eventManager.subscribe('modifier', (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n      // WHEN\n      eventManager.broadcast('unrelatedModifier');\n      // THEN\n      expect(recievedEvent).toBeNull();\n\n      // WHEN\n      eventManager.broadcast('modifier');\n      // THEN\n      expect(recievedEvent).toEqual('modifier');\n    }));\n\n    it('should subscribe to multiple events', inject([EventManager], (eventManager: EventManager) => {\n      // GIVEN\n      eventManager.subscribe(['modifier', 'modifier2'], (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n      // WHEN\n      eventManager.broadcast('unrelatedModifier');\n      // THEN\n      expect(recievedEvent).toBeNull();\n\n      // WHEN\n      eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n      // THEN\n      expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });\n\n      // WHEN\n      eventManager.broadcast('modifier2');\n      // THEN\n      expect(recievedEvent).toEqual('modifier2');\n    }));\n  });\n});\n"],"version":3}