{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/update/booking-update.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, Subject } from 'rxjs';\n\nimport { BookingService } from '../service/booking.service';\nimport { IBooking, Booking } from '../booking.model';\n\nimport { BookingUpdateComponent } from './booking-update.component';\n\ndescribe('Component Tests', () => {\n  describe('Booking Management Update Component', () => {\n    let comp: BookingUpdateComponent;\n    let fixture: ComponentFixture<BookingUpdateComponent>;\n    let activatedRoute: ActivatedRoute;\n    let bookingService: BookingService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [BookingUpdateComponent],\n        providers: [FormBuilder, ActivatedRoute],\n      })\n        .overrideTemplate(BookingUpdateComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(BookingUpdateComponent);\n      activatedRoute = TestBed.inject(ActivatedRoute);\n      bookingService = TestBed.inject(BookingService);\n\n      comp = fixture.componentInstance;\n    });\n\n    describe('ngOnInit', () => {\n      it('Should update editForm', () => {\n        const booking: IBooking = { id: 456 };\n\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        expect(comp.editForm.value).toEqual(expect.objectContaining(booking));\n      });\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing entity', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = { id: 123 };\n        jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: booking }));\n        saveSubject.complete();\n\n        // THEN\n        expect(comp.previousState).toHaveBeenCalled();\n        expect(bookingService.update).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n      });\n\n      it('Should call create service on save for new entity', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = new Booking();\n        jest.spyOn(bookingService, 'create').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: booking }));\n        saveSubject.complete();\n\n        // THEN\n        expect(bookingService.create).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).toHaveBeenCalled();\n      });\n\n      it('Should set isSaving to false on error', () => {\n        // GIVEN\n        const saveSubject = new Subject<HttpResponse<Booking>>();\n        const booking = { id: 123 };\n        jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);\n        jest.spyOn(comp, 'previousState');\n        activatedRoute.data = of({ booking });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.error('This is an error!');\n\n        // THEN\n        expect(bookingService.update).toHaveBeenCalledWith(booking);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).not.toHaveBeenCalled();\n      });\n    });\n  });\n});\n"],"version":3}