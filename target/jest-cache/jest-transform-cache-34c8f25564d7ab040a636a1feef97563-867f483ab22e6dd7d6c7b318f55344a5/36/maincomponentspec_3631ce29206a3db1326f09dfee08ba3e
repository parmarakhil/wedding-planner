03cf67d4778358a56ae5c2120552cca1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const main_component_1 = require("./main.component");
describe('Component Tests', () => {
    describe('MainComponent', () => {
        let comp;
        let fixture;
        let titleService;
        let mockAccountService;
        const routerEventsSubject = new rxjs_1.Subject();
        const routerState = { snapshot: { root: { data: {} } } };
        class MockRouter {
            constructor() {
                this.events = routerEventsSubject;
                this.routerState = routerState;
            }
        }
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [main_component_1.MainComponent],
                providers: [
                    platform_browser_1.Title,
                    account_service_1.AccountService,
                    {
                        provide: router_1.Router,
                        useClass: MockRouter,
                    },
                ],
            })
                .overrideTemplate(main_component_1.MainComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(main_component_1.MainComponent);
            comp = fixture.componentInstance;
            titleService = testing_1.TestBed.inject(platform_browser_1.Title);
            mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
        });
        describe('page title', () => {
            const defaultPageTitle = 'Weddingplanner';
            const parentRoutePageTitle = 'parentTitle';
            const childRoutePageTitle = 'childTitle';
            const navigationEnd = new router_1.NavigationEnd(1, '', '');
            const navigationStart = new router_1.NavigationStart(1, '');
            beforeEach(() => {
                routerState.snapshot.root = { data: {} };
                jest.spyOn(titleService, 'setTitle');
                comp.ngOnInit();
            });
            describe('navigation end', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle);
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle);
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);
                });
            });
            describe('navigation start', () => {
                it('should not set page title on navigation start', () => {
                    // WHEN
                    routerEventsSubject.next(navigationStart);
                    // THEN
                    expect(titleService.setTitle).not.toHaveBeenCalled();
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,