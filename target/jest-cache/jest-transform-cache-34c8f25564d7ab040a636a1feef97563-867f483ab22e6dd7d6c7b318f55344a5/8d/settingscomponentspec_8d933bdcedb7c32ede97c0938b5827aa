b3db31408476608f606f6ce0b9da4ebf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const settings_component_1 = require("./settings.component");
describe('Component Tests', () => {
    describe('SettingsComponent', () => {
        let comp;
        let fixture;
        let mockAccountService;
        const account = {
            firstName: 'John',
            lastName: 'Doe',
            activated: true,
            email: 'john.doe@mail.com',
            langKey: 'en',
            login: 'john',
            authorities: [],
            imageUrl: '',
        };
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [settings_component_1.SettingsComponent],
                providers: [forms_1.FormBuilder, account_service_1.AccountService],
            })
                .overrideTemplate(settings_component_1.SettingsComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(settings_component_1.SettingsComponent);
            comp = fixture.componentInstance;
            mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
            mockAccountService.identity = jest.fn(() => rxjs_1.of(account));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(account));
        });
        it('should send the current identity upon save', () => {
            // GIVEN
            mockAccountService.save = jest.fn(() => rxjs_1.of({}));
            const settingsFormValues = {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john.doe@mail.com',
            };
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(mockAccountService.identity).toHaveBeenCalled();
            expect(mockAccountService.save).toHaveBeenCalledWith(account);
            expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);
            expect(comp.settingsForm.value).toEqual(settingsFormValues);
        });
        it('should notify of success upon successful save', () => {
            // GIVEN
            mockAccountService.save = jest.fn(() => rxjs_1.of({}));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(true);
        });
        it('should notify of error upon failed save', () => {
            // GIVEN
            mockAccountService.save = jest.fn(() => rxjs_1.throwError('ERROR'));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvYWNjb3VudC9zZXR0aW5ncy9zZXR0aW5ncy5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUUzQyxtREFBZ0Y7QUFDaEYsMERBQXVFO0FBQ3ZFLDBDQUE2QztBQUM3QywrQkFBc0M7QUFFdEMsbUVBQStEO0FBRy9ELDZEQUF5RDtBQUV6RCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxJQUF1QixDQUFDO1FBQzVCLElBQUksT0FBNEMsQ0FBQztRQUNqRCxJQUFJLGtCQUFrQyxDQUFDO1FBQ3ZDLE1BQU0sT0FBTyxHQUFZO1lBQ3ZCLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsU0FBUyxFQUFFLElBQUk7WUFDZixLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLE1BQU07WUFDYixXQUFXLEVBQUUsRUFBRTtZQUNmLFFBQVEsRUFBRSxFQUFFO1NBQ2IsQ0FBQztRQUVGLFVBQVUsQ0FDUixzQkFBWSxDQUFDLEdBQUcsRUFBRTtZQUNoQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQztnQkFDbEMsWUFBWSxFQUFFLENBQUMsc0NBQWlCLENBQUM7Z0JBQ2pDLFNBQVMsRUFBRSxDQUFDLG1CQUFXLEVBQUUsZ0NBQWMsQ0FBQzthQUN6QyxDQUFDO2lCQUNDLGdCQUFnQixDQUFDLHNDQUFpQixFQUFFLEVBQUUsQ0FBQztpQkFDdkMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxzQ0FBaUIsQ0FBQyxDQUFDO1lBQ3JELElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7WUFDakMsa0JBQWtCLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1lBQ3BELGtCQUFrQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pELGtCQUFrQixDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1lBQ3BELFFBQVE7WUFDUixrQkFBa0IsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRCxNQUFNLGtCQUFrQixHQUFHO2dCQUN6QixTQUFTLEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsS0FBSyxFQUFFLG1CQUFtQjthQUMzQixDQUFDO1lBRUYsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFWixPQUFPO1lBQ1AsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdkQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7WUFDdkQsUUFBUTtZQUNSLGtCQUFrQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRWhELE9BQU87WUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVosT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxRQUFRO1lBQ1Isa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRTdELE9BQU87WUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVosT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWtoaWxzaW5naC9EZXNrdG9wL1Byb2plY3RzL3dlZGRpbmcvc3JjL21haW4vd2ViYXBwL2FwcC9hY2NvdW50L3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImplc3QubW9jaygnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnKTtcblxuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgd2FpdEZvckFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IHRocm93RXJyb3IsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5tb2RlbCc7XG5cbmltcG9ydCB7IFNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9zZXR0aW5ncy5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnU2V0dGluZ3NDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXA6IFNldHRpbmdzQ29tcG9uZW50O1xuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFNldHRpbmdzQ29tcG9uZW50PjtcbiAgICBsZXQgbW9ja0FjY291bnRTZXJ2aWNlOiBBY2NvdW50U2VydmljZTtcbiAgICBjb25zdCBhY2NvdW50OiBBY2NvdW50ID0ge1xuICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICBhY3RpdmF0ZWQ6IHRydWUsXG4gICAgICBlbWFpbDogJ2pvaG4uZG9lQG1haWwuY29tJyxcbiAgICAgIGxhbmdLZXk6ICdlbicsXG4gICAgICBsb2dpbjogJ2pvaG4nLFxuICAgICAgYXV0aG9yaXRpZXM6IFtdLFxuICAgICAgaW1hZ2VVcmw6ICcnLFxuICAgIH07XG5cbiAgICBiZWZvcmVFYWNoKFxuICAgICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLFxuICAgICAgICAgIGRlY2xhcmF0aW9uczogW1NldHRpbmdzQ29tcG9uZW50XSxcbiAgICAgICAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlciwgQWNjb3VudFNlcnZpY2VdLFxuICAgICAgICB9KVxuICAgICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFNldHRpbmdzQ29tcG9uZW50LCAnJylcbiAgICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFNldHRpbmdzQ29tcG9uZW50KTtcbiAgICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgbW9ja0FjY291bnRTZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoQWNjb3VudFNlcnZpY2UpO1xuICAgICAgbW9ja0FjY291bnRTZXJ2aWNlLmlkZW50aXR5ID0gamVzdC5mbigoKSA9PiBvZihhY2NvdW50KSk7XG4gICAgICBtb2NrQWNjb3VudFNlcnZpY2UuZ2V0QXV0aGVudGljYXRpb25TdGF0ZSA9IGplc3QuZm4oKCkgPT4gb2YoYWNjb3VudCkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZW5kIHRoZSBjdXJyZW50IGlkZW50aXR5IHVwb24gc2F2ZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBtb2NrQWNjb3VudFNlcnZpY2Uuc2F2ZSA9IGplc3QuZm4oKCkgPT4gb2Yoe30pKTtcbiAgICAgIGNvbnN0IHNldHRpbmdzRm9ybVZhbHVlcyA9IHtcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgICAgZW1haWw6ICdqb2huLmRvZUBtYWlsLmNvbScsXG4gICAgICB9O1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG4gICAgICBjb21wLnNhdmUoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KG1vY2tBY2NvdW50U2VydmljZS5pZGVudGl0eSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tBY2NvdW50U2VydmljZS5zYXZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhY2NvdW50KTtcbiAgICAgIGV4cGVjdChtb2NrQWNjb3VudFNlcnZpY2UuYXV0aGVudGljYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhY2NvdW50KTtcbiAgICAgIGV4cGVjdChjb21wLnNldHRpbmdzRm9ybS52YWx1ZSkudG9FcXVhbChzZXR0aW5nc0Zvcm1WYWx1ZXMpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3RpZnkgb2Ygc3VjY2VzcyB1cG9uIHN1Y2Nlc3NmdWwgc2F2ZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBtb2NrQWNjb3VudFNlcnZpY2Uuc2F2ZSA9IGplc3QuZm4oKCkgPT4gb2Yoe30pKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgY29tcC5zYXZlKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdGlmeSBvZiBlcnJvciB1cG9uIGZhaWxlZCBzYXZlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBY2NvdW50U2VydmljZS5zYXZlID0gamVzdC5mbigoKSA9PiB0aHJvd0Vycm9yKCdFUlJPUicpKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgY29tcC5zYXZlKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9