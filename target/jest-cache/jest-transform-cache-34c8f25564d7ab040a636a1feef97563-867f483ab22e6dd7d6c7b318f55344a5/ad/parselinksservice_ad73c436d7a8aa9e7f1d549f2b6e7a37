a6cff7e515ee20f6110d3ea000cc0885
"use strict";

/* istanbul ignore next */
function cov_15qxecw4qr() {
  var path = "/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts";
  var hash = "cc5b3e80bceba7e2c0d8947ac1fd81dc913397a2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "6": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "7": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "8": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "10": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "12": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "13": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 65
        }
      },
      "14": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "16": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 31,
          column: 17
        }
      },
      "17": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 41
        }
      },
      "18": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "19": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "20": {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 35,
          column: 74
        }
      },
      "21": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 61
        }
      },
      "22": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 21
        }
      },
      "23": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "24": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 65
          },
          end: {
            line: 28,
            column: 66
          }
        },
        loc: {
          start: {
            line: 28,
            column: 85
          },
          end: {
            line: 33,
            column: 13
          }
        },
        line: 28
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 54
          },
          end: {
            line: 32,
            column: 56
          }
        }, {
          start: {
            line: 32,
            column: 59
          },
          end: {
            line: 32,
            column: 61
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 34
          }
        }, {
          start: {
            line: 32,
            column: 38
          },
          end: {
            line: 32,
            column: 51
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts",
      mappings: ";;;;AAAA,wCAA2C;AAE3C;;GAEG;IAIU,UAAU,SAAV,UAAU;IACrB;;OAEG;IACH,KAAK,CAAC,MAAc;QAClB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,uBAAuB;QACvB,MAAM,KAAK,GAAa,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,KAAK,GAA8B,EAAE,CAAC;QAE5C,oCAAoC;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAChB,MAAM,OAAO,GAAa,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEvC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACtD;YAED,MAAM,GAAG,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YAC9D,MAAM,WAAW,GAA0C,EAAE,CAAC;YAE9D,GAAG,CAAC,OAAO,CACT,IAAI,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EACvC,CAAC,EAAU,EAAE,EAAsB,EAAE,EAAsB,EAAE,EAAsB,EAAE,EAAE;gBACrF,IAAI,EAAE,KAAK,SAAS,EAAE;oBACpB,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;iBACtB;gBACD,OAAO,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;YAClB,CAAC,CACF,CAAC;YAEF,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE;gBAClC,MAAM,IAAI,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;gBACnE,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAzCY,UAAU;IAHtB,iBAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,UAAU,CAyCtB;AAzCY,gCAAU",
      names: [],
      sources: ["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts"],
      sourcesContent: ["import { Injectable } from '@angular/core';\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(',');\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section: string[] = p.split(';');\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? '';\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cc5b3e80bceba7e2c0d8947ac1fd81dc913397a2"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15qxecw4qr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_15qxecw4qr();
cov_15qxecw4qr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_15qxecw4qr().s[1]++;
exports.ParseLinks = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_15qxecw4qr().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_15qxecw4qr().s[3]++, require("@angular/core"));
/**
 * An utility service for link parsing.
 */

/* istanbul ignore next */
cov_15qxecw4qr().s[4]++;
let ParseLinks = class ParseLinks {
  /**
   * Method to parse the links
   */
  parse(header) {
    /* istanbul ignore next */
    cov_15qxecw4qr().f[0]++;
    cov_15qxecw4qr().s[5]++;

    if (header.length === 0) {
      /* istanbul ignore next */
      cov_15qxecw4qr().b[0][0]++;
      cov_15qxecw4qr().s[6]++;
      throw new Error('input must not be of zero length');
    } else
    /* istanbul ignore next */
    {
      cov_15qxecw4qr().b[0][1]++;
    } // Split parts by comma


    const parts =
    /* istanbul ignore next */
    (cov_15qxecw4qr().s[7]++, header.split(','));
    const links =
    /* istanbul ignore next */
    (cov_15qxecw4qr().s[8]++, {}); // Parse each part into a named link

    /* istanbul ignore next */
    cov_15qxecw4qr().s[9]++;
    parts.forEach((p) => {
      /* istanbul ignore next */
      cov_15qxecw4qr().f[1]++;
      const section =
      /* istanbul ignore next */
      (cov_15qxecw4qr().s[10]++, p.split(';'));

      /* istanbul ignore next */
      cov_15qxecw4qr().s[11]++;

      if (section.length !== 2) {
        /* istanbul ignore next */
        cov_15qxecw4qr().b[1][0]++;
        cov_15qxecw4qr().s[12]++;
        throw new Error('section could not be split on ";"');
      } else
      /* istanbul ignore next */
      {
        cov_15qxecw4qr().b[1][1]++;
      }

      const url =
      /* istanbul ignore next */
      (cov_15qxecw4qr().s[13]++, section[0].replace(/<(.*)>/, '$1').trim());
      const queryString =
      /* istanbul ignore next */
      (cov_15qxecw4qr().s[14]++, {});

      /* istanbul ignore next */
      cov_15qxecw4qr().s[15]++;
      url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => {
        /* istanbul ignore next */
        cov_15qxecw4qr().f[2]++;
        cov_15qxecw4qr().s[16]++;

        if ($1 !== undefined) {
          /* istanbul ignore next */
          cov_15qxecw4qr().b[2][0]++;
          cov_15qxecw4qr().s[17]++;
          queryString[$1] = $3;
        } else
        /* istanbul ignore next */
        {
          cov_15qxecw4qr().b[2][1]++;
        }

        cov_15qxecw4qr().s[18]++;
        return (
          /* istanbul ignore next */
          (cov_15qxecw4qr().b[4][0]++, $3 !== null) &&
          /* istanbul ignore next */
          (cov_15qxecw4qr().b[4][1]++, $3 !== void 0) ?
          /* istanbul ignore next */
          (cov_15qxecw4qr().b[3][0]++, $3) :
          /* istanbul ignore next */
          (cov_15qxecw4qr().b[3][1]++, '')
        );
      });

      /* istanbul ignore next */
      cov_15qxecw4qr().s[19]++;

      if (queryString.page !== undefined) {
        /* istanbul ignore next */
        cov_15qxecw4qr().b[5][0]++;
        const name =
        /* istanbul ignore next */
        (cov_15qxecw4qr().s[20]++, section[1].replace(/rel="(.*)"/, '$1').trim());

        /* istanbul ignore next */
        cov_15qxecw4qr().s[21]++;
        links[name] = parseInt(queryString.page, 10);
      } else
      /* istanbul ignore next */
      {
        cov_15qxecw4qr().b[5][1]++;
      }
    });

    /* istanbul ignore next */
    cov_15qxecw4qr().s[22]++;
    return links;
  }

};

/* istanbul ignore next */
cov_15qxecw4qr().s[23]++;
ParseLinks = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
})], ParseLinks);

/* istanbul ignore next */
cov_15qxecw4qr().s[24]++;
exports.ParseLinks = ParseLinks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbHNpbmdoL0Rlc2t0b3AvUHJvamVjdHMvd2VkZGluZy9zcmMvbWFpbi93ZWJhcHAvYXBwL2NvcmUvdXRpbC9wYXJzZS1saW5rcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFmTCxNQUFBLE1BQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtBQUVBOztBQUVHOzs7O0lBSVUsVUFBVSxHQUFBLE1BQVYsVUFBVSxDQUFBO0FBQ3JCOztBQUVHO0FBQ0gsRUFBQSxLQUFLLENBQUMsTUFBRCxFQUFlO0FBQUE7QUFBQTtBQUFBOztBQUNsQixRQUFJLE1BQU0sQ0FBQyxNQUFQLEtBQWtCLENBQXRCLEVBQXlCO0FBQUE7QUFBQTtBQUFBO0FBQ3ZCLFlBQU0sSUFBSSxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNELEtBRkQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQURrQixDQUtsQjs7O0FBQ0EsVUFBTSxLQUFLO0FBQUE7QUFBQSw4QkFBYSxNQUFNLENBQUMsS0FBUCxDQUFhLEdBQWIsQ0FBYixDQUFYO0FBQ0EsVUFBTSxLQUFLO0FBQUE7QUFBQSw4QkFBOEIsRUFBOUIsQ0FBWCxDQVBrQixDQVNsQjs7QUFUa0I7QUFBQTtBQVVsQixJQUFBLEtBQUssQ0FBQyxPQUFOLENBQWMsQ0FBQSxDQUFDLEtBQUc7QUFBQTtBQUFBO0FBQ2hCLFlBQU0sT0FBTztBQUFBO0FBQUEsaUNBQWEsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxHQUFSLENBQWIsQ0FBYjs7QUFEZ0I7QUFBQTs7QUFHaEIsVUFBSSxPQUFPLENBQUMsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUFBO0FBQUE7QUFBQTtBQUN4QixjQUFNLElBQUksS0FBSixDQUFVLG1DQUFWLENBQU47QUFDRCxPQUZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSUEsWUFBTSxHQUFHO0FBQUE7QUFBQSxpQ0FBVyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsT0FBWCxDQUFtQixRQUFuQixFQUE2QixJQUE3QixFQUFtQyxJQUFuQyxFQUFYLENBQVQ7QUFDQSxZQUFNLFdBQVc7QUFBQTtBQUFBLGlDQUEwQyxFQUExQyxDQUFqQjs7QUFSZ0I7QUFBQTtBQVVoQixNQUFBLEdBQUcsQ0FBQyxPQUFKLENBQ0UsSUFBSSxNQUFKLENBQVcsc0JBQVgsRUFBbUMsR0FBbkMsQ0FERixFQUVFLENBQUMsRUFBRCxFQUFhLEVBQWIsRUFBcUMsRUFBckMsRUFBNkQsRUFBN0QsS0FBdUY7QUFBQTtBQUFBO0FBQUE7O0FBQ3JGLFlBQUksRUFBRSxLQUFLLFNBQVgsRUFBc0I7QUFBQTtBQUFBO0FBQUE7QUFDcEIsVUFBQSxXQUFXLENBQUMsRUFBRCxDQUFYLEdBQWtCLEVBQWxCO0FBQ0QsU0FGRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQURxRjtBQUlyRixlQUFPO0FBQUE7QUFBQSx1Q0FBQSxFQUFFLEtBQUEsSUFBRjtBQUFBO0FBQUEsdUNBQUEsRUFBRSxLQUFBLEtBQUEsQ0FBRjtBQUFBO0FBQUEsdUNBQUEsRUFBQTtBQUFBO0FBQUEsdUNBQU0sRUFBTjtBQUFQO0FBQ0QsT0FQSDs7QUFWZ0I7QUFBQTs7QUFvQmhCLFVBQUksV0FBVyxDQUFDLElBQVosS0FBcUIsU0FBekIsRUFBb0M7QUFBQTtBQUFBO0FBQ2xDLGNBQU0sSUFBSTtBQUFBO0FBQUEsbUNBQVcsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXLE9BQVgsQ0FBbUIsWUFBbkIsRUFBaUMsSUFBakMsRUFBdUMsSUFBdkMsRUFBWCxDQUFWOztBQURrQztBQUFBO0FBRWxDLFFBQUEsS0FBSyxDQUFDLElBQUQsQ0FBTCxHQUFjLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBYixFQUFtQixFQUFuQixDQUF0QjtBQUNELE9BSEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUlELEtBeEJEOztBQVZrQjtBQUFBO0FBbUNsQixXQUFPLEtBQVA7QUFDRDs7QUF4Q29CLEM7Ozs7QUFBVixVQUFVLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUh0QixNQUFBLENBQUEsVUFBQSxDQUFXO0FBQ1YsRUFBQSxVQUFVLEVBQUU7QUFERixDQUFYLENBR3NCLENBQUEsRUFBVixVQUFVLENBQVY7Ozs7QUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLFVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQW4gdXRpbGl0eSBzZXJ2aWNlIGZvciBsaW5rIHBhcnNpbmcuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYXJzZUxpbmtzIHtcbiAgLyoqXG4gICAqIE1ldGhvZCB0byBwYXJzZSB0aGUgbGlua3NcbiAgICovXG4gIHBhcnNlKGhlYWRlcjogc3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSB7XG4gICAgaWYgKGhlYWRlci5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgbXVzdCBub3QgYmUgb2YgemVybyBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICAvLyBTcGxpdCBwYXJ0cyBieSBjb21tYVxuICAgIGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IGhlYWRlci5zcGxpdCgnLCcpO1xuICAgIGNvbnN0IGxpbmtzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge307XG5cbiAgICAvLyBQYXJzZSBlYWNoIHBhcnQgaW50byBhIG5hbWVkIGxpbmtcbiAgICBwYXJ0cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgY29uc3Qgc2VjdGlvbjogc3RyaW5nW10gPSBwLnNwbGl0KCc7Jyk7XG5cbiAgICAgIGlmIChzZWN0aW9uLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3Rpb24gY291bGQgbm90IGJlIHNwbGl0IG9uIFwiO1wiJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVybDogc3RyaW5nID0gc2VjdGlvblswXS5yZXBsYWNlKC88KC4qKT4vLCAnJDEnKS50cmltKCk7XG4gICAgICBjb25zdCBxdWVyeVN0cmluZzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfSA9IHt9O1xuXG4gICAgICB1cmwucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cCgnKFtePz0mXSspKD0oW14mXSopKT8nLCAnZycpLFxuICAgICAgICAoJDA6IHN0cmluZywgJDE6IHN0cmluZyB8IHVuZGVmaW5lZCwgJDI6IHN0cmluZyB8IHVuZGVmaW5lZCwgJDM6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgIGlmICgkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBxdWVyeVN0cmluZ1skMV0gPSAkMztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICQzID8/ICcnO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAocXVlcnlTdHJpbmcucGFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IHNlY3Rpb25bMV0ucmVwbGFjZSgvcmVsPVwiKC4qKVwiLywgJyQxJykudHJpbSgpO1xuICAgICAgICBsaW5rc1tuYW1lXSA9IHBhcnNlSW50KHF1ZXJ5U3RyaW5nLnBhZ2UsIDEwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG4gIH1cbn1cbiJdfQ==