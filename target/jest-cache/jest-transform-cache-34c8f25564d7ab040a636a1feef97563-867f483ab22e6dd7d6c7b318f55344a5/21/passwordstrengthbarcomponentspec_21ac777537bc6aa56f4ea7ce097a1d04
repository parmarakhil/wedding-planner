b21a05322fc4ae2b71d1ac0514cd0f66
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const password_strength_bar_component_1 = require("./password-strength-bar.component");
describe('Component Tests', () => {
    describe('PasswordStrengthBarComponent', () => {
        let comp;
        let fixture;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [password_strength_bar_component_1.PasswordStrengthBarComponent],
            })
                .overrideTemplate(password_strength_bar_component_1.PasswordStrengthBarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_strength_bar_component_1.PasswordStrengthBarComponent);
            comp = fixture.componentInstance;
        });
        describe('PasswordStrengthBarComponents', () => {
            it('should initialize with default values', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.colors).toEqual(['#F00', '#F90', '#FF0', '#9F0', '#0F0']);
                expect(comp.getColor(0).idx).toBe(1);
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
            });
            it('should increase strength upon password value change', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.measureStrength('aa')).toBeGreaterThanOrEqual(comp.measureStrength(''));
                expect(comp.measureStrength('aa^6')).toBeGreaterThanOrEqual(comp.measureStrength('aa'));
                expect(comp.measureStrength('Aa090(**)')).toBeGreaterThanOrEqual(comp.measureStrength('aa^6'));
                expect(comp.measureStrength('Aa090(**)+-07365')).toBeGreaterThanOrEqual(comp.measureStrength('Aa090(**)'));
            });
            it('should change the color based on strength', () => {
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
                expect(comp.getColor(11).color).toBe(comp.colors[1]);
                expect(comp.getColor(22).color).toBe(comp.colors[2]);
                expect(comp.getColor(33).color).toBe(comp.colors[3]);
                expect(comp.getColor(44).color).toBe(comp.colors[4]);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvYWNjb3VudC9wYXNzd29yZC9wYXNzd29yZC1zdHJlbmd0aC1iYXIvcGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBRWhGLHVGQUFpRjtBQUVqRixRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBSSxJQUFrQyxDQUFDO1FBQ3ZDLElBQUksT0FBdUQsQ0FBQztRQUU1RCxVQUFVLENBQ1Isc0JBQVksQ0FBQyxHQUFHLEVBQUU7WUFDaEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsWUFBWSxFQUFFLENBQUMsOERBQTRCLENBQUM7YUFDN0MsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyw4REFBNEIsRUFBRSxFQUFFLENBQUM7aUJBQ2xELGlCQUFpQixFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsOERBQTRCLENBQUMsQ0FBQztZQUNoRSxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtZQUM3QyxFQUFFLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO2dCQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDdEUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtnQkFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNwRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDeEYsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQy9GLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDN0csQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO2dCQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbHNpbmdoL0Rlc2t0b3AvUHJvamVjdHMvd2VkZGluZy9zcmMvbWFpbi93ZWJhcHAvYXBwL2FjY291bnQvcGFzc3dvcmQvcGFzc3dvcmQtc3RyZW5ndGgtYmFyL3Bhc3N3b3JkLXN0cmVuZ3RoLWJhci5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1zdHJlbmd0aC1iYXIuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXA6IFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQ7XG4gICAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8UGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudD47XG5cbiAgICBiZWZvcmVFYWNoKFxuICAgICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50XSxcbiAgICAgICAgfSlcbiAgICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50LCAnJylcbiAgICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQpO1xuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudHMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IHZhbHVlcycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuY29sb3JzKS50b0VxdWFsKFsnI0YwMCcsICcjRjkwJywgJyNGRjAnLCAnIzlGMCcsICcjMEYwJ10pO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigwKS5pZHgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzBdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGluY3JlYXNlIHN0cmVuZ3RoIHVwb24gcGFzc3dvcmQgdmFsdWUgY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhJykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKTtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYV42JykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhJykpO1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKScpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYV42JykpO1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKSstMDczNjUnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnQWEwOTAoKiopJykpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRoZSBjb2xvciBiYXNlZCBvbiBzdHJlbmd0aCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMCkuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMF0pO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigxMSkuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMV0pO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigyMikuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMl0pO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigzMykuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbM10pO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcig0NCkuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbNF0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=