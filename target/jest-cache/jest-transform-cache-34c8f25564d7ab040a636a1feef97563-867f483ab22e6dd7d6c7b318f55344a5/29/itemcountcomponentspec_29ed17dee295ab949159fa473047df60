173a74f938886a875954d23764681125
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const item_count_component_1 = require("./item-count.component");
describe('ItemCountComponent test', () => {
    let comp;
    let fixture;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [item_count_component_1.ItemCountComponent],
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(item_count_component_1.ItemCountComponent);
        comp = fixture.componentInstance;
    });
    describe('UI logic tests', () => {
        it('should initialize with undefined', () => {
            expect(comp.first).toBeUndefined();
            expect(comp.second).toBeUndefined();
            expect(comp.total).toBeUndefined();
        });
        it('should set calculated numbers to undefined if the page value is not yet defined', () => {
            // GIVEN
            comp.params = { page: undefined, totalItems: 0, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBeUndefined();
            expect(comp.second).toBeUndefined();
        });
        it('should change the content on page change', () => {
            // GIVEN
            comp.params = { page: 1, totalItems: 100, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(1);
            expect(comp.second).toBe(10);
            expect(comp.total).toBe(100);
            // GIVEN
            comp.params = { page: 2, totalItems: 100, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(11);
            expect(comp.second).toBe(20);
            expect(comp.total).toBe(100);
        });
        it('should set the second number to totalItems if this is the last page which contains less than itemsPerPage items', () => {
            // GIVEN
            comp.params = { page: 2, totalItems: 16, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(11);
            expect(comp.second).toBe(16);
            expect(comp.total).toBe(16);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL3BhZ2luYXRpb24vaXRlbS1jb3VudC5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRjtBQUVoRixpRUFBNEQ7QUFFNUQsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxJQUFJLElBQXdCLENBQUM7SUFDN0IsSUFBSSxPQUE2QyxDQUFDO0lBRWxELFVBQVUsQ0FDUixzQkFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLHlDQUFrQixDQUFDO1NBQ25DLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLHlDQUFrQixDQUFDLENBQUM7UUFDdEQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtZQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpRkFBaUYsRUFBRSxHQUFHLEVBQUU7WUFDekYsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRW5FLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELFFBQVE7WUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUU3RCxPQUFPO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFN0IsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRTdELE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpSEFBaUgsRUFBRSxHQUFHLEVBQUU7WUFDekgsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRTVELE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL3BhZ2luYXRpb24vaXRlbS1jb3VudC5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YWl0Rm9yQXN5bmMsIENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBJdGVtQ291bnRDb21wb25lbnQgfSBmcm9tICcuL2l0ZW0tY291bnQuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ0l0ZW1Db3VudENvbXBvbmVudCB0ZXN0JywgKCkgPT4ge1xuICBsZXQgY29tcDogSXRlbUNvdW50Q29tcG9uZW50O1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxJdGVtQ291bnRDb21wb25lbnQ+O1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGRlY2xhcmF0aW9uczogW0l0ZW1Db3VudENvbXBvbmVudF0sXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pXG4gICk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEl0ZW1Db3VudENvbXBvbmVudCk7XG4gICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdVSSBsb2dpYyB0ZXN0cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCB1bmRlZmluZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoY29tcC5maXJzdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbXAuc2Vjb25kKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY29tcC50b3RhbCkudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZXQgY2FsY3VsYXRlZCBudW1iZXJzIHRvIHVuZGVmaW5lZCBpZiB0aGUgcGFnZSB2YWx1ZSBpcyBub3QgeWV0IGRlZmluZWQnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29tcC5wYXJhbXMgPSB7IHBhZ2U6IHVuZGVmaW5lZCwgdG90YWxJdGVtczogMCwgaXRlbXNQZXJQYWdlOiAxMCB9O1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5maXJzdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbXAuc2Vjb25kKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNoYW5nZSB0aGUgY29udGVudCBvbiBwYWdlIGNoYW5nZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb21wLnBhcmFtcyA9IHsgcGFnZTogMSwgdG90YWxJdGVtczogMTAwLCBpdGVtc1BlclBhZ2U6IDEwIH07XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmZpcnN0KS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGNvbXAuc2Vjb25kKS50b0JlKDEwKTtcbiAgICAgIGV4cGVjdChjb21wLnRvdGFsKS50b0JlKDEwMCk7XG5cbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb21wLnBhcmFtcyA9IHsgcGFnZTogMiwgdG90YWxJdGVtczogMTAwLCBpdGVtc1BlclBhZ2U6IDEwIH07XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmZpcnN0KS50b0JlKDExKTtcbiAgICAgIGV4cGVjdChjb21wLnNlY29uZCkudG9CZSgyMCk7XG4gICAgICBleHBlY3QoY29tcC50b3RhbCkudG9CZSgxMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZXQgdGhlIHNlY29uZCBudW1iZXIgdG8gdG90YWxJdGVtcyBpZiB0aGlzIGlzIHRoZSBsYXN0IHBhZ2Ugd2hpY2ggY29udGFpbnMgbGVzcyB0aGFuIGl0ZW1zUGVyUGFnZSBpdGVtcycsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb21wLnBhcmFtcyA9IHsgcGFnZTogMiwgdG90YWxJdGVtczogMTYsIGl0ZW1zUGVyUGFnZTogMTAgfTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuZmlyc3QpLnRvQmUoMTEpO1xuICAgICAgZXhwZWN0KGNvbXAuc2Vjb25kKS50b0JlKDE2KTtcbiAgICAgIGV4cGVjdChjb21wLnRvdGFsKS50b0JlKDE2KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==