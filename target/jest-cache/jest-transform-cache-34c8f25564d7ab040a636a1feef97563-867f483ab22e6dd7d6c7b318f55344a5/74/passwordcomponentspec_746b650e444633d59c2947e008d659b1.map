{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/password/password.component.spec.ts"],"sourcesContent":["jest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { PasswordComponent } from './password.component';\nimport { PasswordService } from './password.service';\n\ndescribe('Component Tests', () => {\n  describe('PasswordComponent', () => {\n    let comp: PasswordComponent;\n    let fixture: ComponentFixture<PasswordComponent>;\n    let service: PasswordService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [PasswordComponent],\n          providers: [FormBuilder, AccountService],\n        })\n          .overrideTemplate(PasswordComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(PasswordComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(PasswordService);\n    });\n\n    it('should show error if passwords do not match', () => {\n      // GIVEN\n      comp.passwordForm.patchValue({\n        newPassword: 'password1',\n        confirmPassword: 'password2',\n      });\n      // WHEN\n      comp.changePassword();\n      // THEN\n      expect(comp.doNotMatch).toBe(true);\n      expect(comp.error).toBe(false);\n      expect(comp.success).toBe(false);\n    });\n\n    it('should call Auth.changePassword when passwords match', () => {\n      // GIVEN\n      const passwordValues = {\n        currentPassword: 'oldPassword',\n        newPassword: 'myPassword',\n      };\n\n      jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n\n      comp.passwordForm.patchValue({\n        currentPassword: passwordValues.currentPassword,\n        newPassword: passwordValues.newPassword,\n        confirmPassword: passwordValues.newPassword,\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(service.save).toHaveBeenCalledWith(passwordValues.newPassword, passwordValues.currentPassword);\n    });\n\n    it('should set success to true upon success', () => {\n      // GIVEN\n      jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n      comp.passwordForm.patchValue({\n        newPassword: 'myPassword',\n        confirmPassword: 'myPassword',\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(comp.doNotMatch).toBe(false);\n      expect(comp.error).toBe(false);\n      expect(comp.success).toBe(true);\n    });\n\n    it('should notify of error if change password fails', () => {\n      // GIVEN\n      jest.spyOn(service, 'save').mockReturnValue(throwError('ERROR'));\n      comp.passwordForm.patchValue({\n        newPassword: 'myPassword',\n        confirmPassword: 'myPassword',\n      });\n\n      // WHEN\n      comp.changePassword();\n\n      // THEN\n      expect(comp.doNotMatch).toBe(false);\n      expect(comp.success).toBe(false);\n      expect(comp.error).toBe(true);\n    });\n  });\n});\n"],"version":3}