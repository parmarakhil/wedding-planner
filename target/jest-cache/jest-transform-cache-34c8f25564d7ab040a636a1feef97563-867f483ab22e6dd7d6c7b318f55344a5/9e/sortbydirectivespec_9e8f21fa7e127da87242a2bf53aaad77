d658e929ee45a5fe4d66ef8480d1f4d8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const platform_browser_1 = require("@angular/platform-browser");
const angular_fontawesome_1 = require("@fortawesome/angular-fontawesome");
const free_solid_svg_icons_1 = require("@fortawesome/free-solid-svg-icons");
const sort_by_directive_1 = require("./sort-by.directive");
const sort_directive_1 = require("./sort.directive");
let TestSortByDirectiveComponent = class TestSortByDirectiveComponent {
    constructor(library) {
        this.transition = jest.fn();
        library.addIconPacks(free_solid_svg_icons_1.fas);
        library.addIcons(free_solid_svg_icons_1.faSort, free_solid_svg_icons_1.faSortDown, free_solid_svg_icons_1.faSortUp);
    }
};
TestSortByDirectiveComponent.ctorParameters = () => [
    { type: angular_fontawesome_1.FaIconLibrary }
];
TestSortByDirectiveComponent = tslib_1.__decorate([
    core_1.Component({
        template: `
    <table>
      <thead>
        <tr jhiSort [(predicate)]="predicate" [(ascending)]="ascending" [callback]="transition.bind(this)">
          <th jhiSortBy="name">ID<fa-icon [icon]="'sort'"></fa-icon></th>
        </tr>
      </thead>
    </table>
  `,
    }),
    tslib_1.__metadata("design:paramtypes", [angular_fontawesome_1.FaIconLibrary])
], TestSortByDirectiveComponent);
describe('Directive: SortByDirective', () => {
    let component;
    let fixture;
    let tableHead;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [TestSortByDirectiveComponent, sort_directive_1.SortDirective, sort_by_directive_1.SortByDirective, angular_fontawesome_1.FaIconComponent],
        });
        fixture = testing_1.TestBed.createComponent(TestSortByDirectiveComponent);
        component = fixture.componentInstance;
        tableHead = fixture.debugElement.query(platform_browser_1.By.directive(sort_by_directive_1.SortByDirective));
    });
    it('should initialize predicate, order, icon when initial component predicate is _score', () => {
        var _a;
        // GIVEN
        component.predicate = '_score';
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        // THEN
        expect(sortByDirective.jhiSortBy).toEqual('name');
        expect(component.predicate).toEqual('_score');
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual('sort');
        expect(component.transition).toHaveBeenCalledTimes(0);
    });
    it('should initialize predicate, order, icon when initial component predicate differs from column predicate', () => {
        var _a;
        // GIVEN
        component.predicate = 'id';
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        // THEN
        expect(sortByDirective.jhiSortBy).toEqual('name');
        expect(component.predicate).toEqual('id');
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual('sort');
        expect(component.transition).toHaveBeenCalledTimes(0);
    });
    it('should initialize predicate, order, icon when initial component predicate is same as column predicate', () => {
        var _a;
        // GIVEN
        component.predicate = 'name';
        component.ascending = true;
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        // THEN
        expect(sortByDirective.jhiSortBy).toEqual('name');
        expect(component.predicate).toEqual('name');
        expect(component.ascending).toEqual(true);
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual(free_solid_svg_icons_1.faSortUp.iconName);
        expect(component.transition).toHaveBeenCalledTimes(0);
    });
    it('should initialize predicate, order, icon when initial component predicate is _score and user clicks on column header', () => {
        var _a;
        // GIVEN
        component.predicate = '_score';
        component.ascending = true;
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        tableHead.triggerEventHandler('click', null);
        fixture.detectChanges();
        // THEN
        expect(sortByDirective.jhiSortBy).toEqual('name');
        expect(component.predicate).toEqual('_score');
        expect(component.ascending).toEqual(true);
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual('sort');
        expect(component.transition).toHaveBeenCalledTimes(0);
    });
    it('should update component predicate, order, icon when user clicks on column header', () => {
        var _a;
        // GIVEN
        component.predicate = 'name';
        component.ascending = true;
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        tableHead.triggerEventHandler('click', null);
        fixture.detectChanges();
        // THEN
        expect(component.predicate).toEqual('name');
        expect(component.ascending).toEqual(false);
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual(free_solid_svg_icons_1.faSortDown.iconName);
        expect(component.transition).toHaveBeenCalledTimes(1);
    });
    it('should update component predicate, order, icon when user double clicks on column header', () => {
        var _a;
        // GIVEN
        component.predicate = 'name';
        component.ascending = true;
        const sortByDirective = tableHead.injector.get(sort_by_directive_1.SortByDirective);
        // WHEN
        fixture.detectChanges();
        // WHEN
        tableHead.triggerEventHandler('click', null);
        fixture.detectChanges();
        tableHead.triggerEventHandler('click', null);
        fixture.detectChanges();
        // THEN
        expect(component.predicate).toEqual('name');
        expect(component.ascending).toEqual(true);
        expect((_a = sortByDirective.iconComponent) === null || _a === void 0 ? void 0 : _a.icon).toEqual(free_solid_svg_icons_1.faSortUp.iconName);
        expect(component.transition).toHaveBeenCalledTimes(2);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,