137e3ca26152f00514d35a5cb04a4144
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const booking_service_1 = require("../service/booking.service");
const booking_model_1 = require("../booking.model");
const booking_update_component_1 = require("./booking-update.component");
describe('Component Tests', () => {
    describe('Booking Management Update Component', () => {
        let comp;
        let fixture;
        let activatedRoute;
        let bookingService;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [booking_update_component_1.BookingUpdateComponent],
                providers: [forms_1.FormBuilder, router_1.ActivatedRoute],
            })
                .overrideTemplate(booking_update_component_1.BookingUpdateComponent, '')
                .compileComponents();
            fixture = testing_1.TestBed.createComponent(booking_update_component_1.BookingUpdateComponent);
            activatedRoute = testing_1.TestBed.inject(router_1.ActivatedRoute);
            bookingService = testing_1.TestBed.inject(booking_service_1.BookingService);
            comp = fixture.componentInstance;
        });
        describe('ngOnInit', () => {
            it('Should update editForm', () => {
                const booking = { id: 456 };
                activatedRoute.data = rxjs_1.of({ booking });
                comp.ngOnInit();
                expect(comp.editForm.value).toEqual(expect.objectContaining(booking));
            });
        });
        describe('save', () => {
            it('Should call update service on save for existing entity', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const booking = { id: 123 };
                jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);
                jest.spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ booking });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.next(new http_1.HttpResponse({ body: booking }));
                saveSubject.complete();
                // THEN
                expect(comp.previousState).toHaveBeenCalled();
                expect(bookingService.update).toHaveBeenCalledWith(booking);
                expect(comp.isSaving).toEqual(false);
            });
            it('Should call create service on save for new entity', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const booking = new booking_model_1.Booking();
                jest.spyOn(bookingService, 'create').mockReturnValue(saveSubject);
                jest.spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ booking });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.next(new http_1.HttpResponse({ body: booking }));
                saveSubject.complete();
                // THEN
                expect(bookingService.create).toHaveBeenCalledWith(booking);
                expect(comp.isSaving).toEqual(false);
                expect(comp.previousState).toHaveBeenCalled();
            });
            it('Should set isSaving to false on error', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const booking = { id: 123 };
                jest.spyOn(bookingService, 'update').mockReturnValue(saveSubject);
                jest.spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ booking });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.error('This is an error!');
                // THEN
                expect(bookingService.update).toHaveBeenCalledWith(booking);
                expect(comp.isSaving).toEqual(false);
                expect(comp.previousState).not.toHaveBeenCalled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,