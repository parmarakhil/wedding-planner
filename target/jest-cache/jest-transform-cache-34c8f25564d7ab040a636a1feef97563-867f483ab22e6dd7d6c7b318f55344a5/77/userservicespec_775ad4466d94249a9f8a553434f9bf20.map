{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/user/user.service.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/user/user.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { User, IUser } from './user.model';\n\nimport { UserService } from './user.service';\n\ndescribe('Service Tests', () => {\n  describe('User Service', () => {\n    let service: UserService;\n    let httpMock: HttpTestingController;\n    let expectedResult: IUser | IUser[] | boolean | number | null;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      expectedResult = null;\n      service = TestBed.inject(UserService);\n      httpMock = TestBed.inject(HttpTestingController);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('Service methods', () => {\n      it('should return Users', () => {\n        service.query().subscribe(received => {\n          expectedResult = received.body;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([new User(123, 'user')]);\n        expect(expectedResult).toEqual([{ id: 123, login: 'user' }]);\n      });\n\n      it('should propagate not found response', () => {\n        service.query().subscribe({\n          error: (error: HttpErrorResponse) => (expectedResult = error.status),\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush('Internal Server Error', {\n          status: 500,\n          statusText: 'Inernal Server Error',\n        });\n        expect(expectedResult).toEqual(500);\n      });\n\n      describe('addUserToCollectionIfMissing', () => {\n        it('should add a User to an empty array', () => {\n          const user: IUser = { id: 123 };\n          expectedResult = service.addUserToCollectionIfMissing([], user);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(user);\n        });\n\n        it('should not add a User to an array that contains it', () => {\n          const user: IUser = { id: 123 };\n          const userCollection: IUser[] = [\n            {\n              ...user,\n            },\n            { id: 456 },\n          ];\n          expectedResult = service.addUserToCollectionIfMissing(userCollection, user);\n          expect(expectedResult).toHaveLength(2);\n        });\n\n        it(\"should add a User to an array that doesn't contain it\", () => {\n          const user: IUser = { id: 123 };\n          const userCollection: IUser[] = [{ id: 456 }];\n          expectedResult = service.addUserToCollectionIfMissing(userCollection, user);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(user);\n        });\n\n        it('should add only unique User to an array', () => {\n          const userArray: IUser[] = [{ id: 123 }, { id: 456 }, { id: 27699 }];\n          const userCollection: IUser[] = [{ id: 456 }];\n          expectedResult = service.addUserToCollectionIfMissing(userCollection, ...userArray);\n          expect(expectedResult).toHaveLength(3);\n        });\n\n        it('should accept varargs', () => {\n          const user: IUser = { id: 123 };\n          const user2: IUser = { id: 456 };\n          expectedResult = service.addUserToCollectionIfMissing([], user, user2);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(user);\n          expect(expectedResult).toContain(user2);\n        });\n\n        it('should accept null and undefined values', () => {\n          const user: IUser = { id: 123 };\n          expectedResult = service.addUserToCollectionIfMissing([], null, user, undefined);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(user);\n        });\n\n        it('should return initial array if no users is added', () => {\n          const userCollection: IUser[] = [{ id: 456 }];\n          expectedResult = service.addUserToCollectionIfMissing(userCollection, null, undefined);\n          expect(expectedResult).toEqual(userCollection);\n        });\n      });\n    });\n  });\n});\n"],"version":3}