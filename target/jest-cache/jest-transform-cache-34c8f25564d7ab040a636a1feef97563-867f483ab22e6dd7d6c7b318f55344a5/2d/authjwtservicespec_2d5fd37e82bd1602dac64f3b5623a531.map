{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/auth/auth-jwt.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\nimport { LocalStorageService, NgxWebstorageModule, SessionStorageService } from 'ngx-webstorage';\n\ndescribe('Auth JWT', () => {\n  let service: AuthServerProvider;\n  let localStorageService: LocalStorageService;\n  let sessionStorageService: SessionStorageService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n    });\n\n    httpMock = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(AuthServerProvider);\n    localStorageService = TestBed.inject(LocalStorageService);\n    sessionStorageService = TestBed.inject(SessionStorageService);\n  });\n\n  describe('Get Token', () => {\n    it('should return empty token if not found in local storage nor session storage', () => {\n      const result = service.getToken();\n      expect(result).toEqual('');\n    });\n\n    it('should return token from session storage if local storage is empty', () => {\n      sessionStorageService.retrieve = jest.fn().mockReturnValue('sessionStorageToken');\n      const result = service.getToken();\n      expect(result).toEqual('sessionStorageToken');\n    });\n\n    it('should return token from localstorage storage', () => {\n      localStorageService.retrieve = jest.fn().mockReturnValue('localStorageToken');\n      const result = service.getToken();\n      expect(result).toEqual('localStorageToken');\n    });\n  });\n\n  describe('Login', () => {\n    it('should clear session storage and save in local storage when rememberMe is true', () => {\n      // GIVEN\n      localStorageService.store = jest.fn();\n      sessionStorageService.clear = jest.fn();\n\n      // WHEN\n      service.login({ username: 'John', password: '123', rememberMe: true }).subscribe();\n      httpMock.expectOne('api/authenticate').flush({ id_token: '1' });\n\n      // THEN\n      httpMock.verify();\n      expect(localStorageService.store).toHaveBeenCalledWith('authenticationToken', '1');\n      expect(sessionStorageService.clear).toHaveBeenCalled();\n    });\n\n    it('should clear local storage and save in session storage when rememberMe is false', () => {\n      // GIVEN\n      sessionStorageService.store = jest.fn();\n      localStorageService.clear = jest.fn();\n\n      // WHEN\n      service.login({ username: 'John', password: '123', rememberMe: false }).subscribe();\n      httpMock.expectOne('api/authenticate').flush({ id_token: '1' });\n\n      // THEN\n      httpMock.verify();\n      expect(sessionStorageService.store).toHaveBeenCalledWith('authenticationToken', '1');\n      expect(localStorageService.clear).toHaveBeenCalled();\n    });\n  });\n\n  describe('Logout', () => {\n    it('should clear storage', () => {\n      // GIVEN\n      sessionStorageService.clear = jest.fn();\n      localStorageService.clear = jest.fn();\n\n      // WHEN\n      service.logout().subscribe();\n\n      // THEN\n      expect(localStorageService.clear).toHaveBeenCalled();\n      expect(sessionStorageService.clear).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}