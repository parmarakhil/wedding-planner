{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort.directive.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/shared/sort/sort.directive.spec.ts"],"sourcesContent":["import { Component, DebugElement } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\nimport { SortDirective } from './sort.directive';\n\n@Component({\n  template: `\n    <table>\n      <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" [callback]=\"transition.bind(this)\"></tr>\n      </thead>\n    </table>\n  `,\n})\nclass TestSortDirectiveComponent {\n  predicate?: string;\n  ascending?: boolean;\n  transition = jest.fn();\n}\n\ndescribe('Directive: SortDirective', () => {\n  let component: TestSortDirectiveComponent;\n  let fixture: ComponentFixture<TestSortDirectiveComponent>;\n  let tableRow: DebugElement;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestSortDirectiveComponent, SortDirective],\n    });\n    fixture = TestBed.createComponent(TestSortDirectiveComponent);\n    component = fixture.componentInstance;\n    tableRow = fixture.debugElement.query(By.directive(SortDirective));\n  });\n\n  it('should update predicate, order and invoke callback function', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n\n    // THEN\n    expect(component.predicate).toEqual('ID');\n    expect(component.ascending).toEqual(true);\n    expect(component.transition).toHaveBeenCalled();\n    expect(component.transition).toHaveBeenCalledTimes(1);\n  });\n\n  it('should change sort order to descending when same field is sorted again', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n    // sort again\n    sortDirective.sort('ID');\n\n    // THEN\n    expect(component.predicate).toEqual('ID');\n    expect(component.ascending).toEqual(false);\n    expect(component.transition).toHaveBeenCalled();\n    expect(component.transition).toHaveBeenCalledTimes(2);\n  });\n\n  it('should change sort order to ascending when different field is sorted', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n    // sort again\n    sortDirective.sort('NAME');\n\n    // THEN\n    expect(component.predicate).toEqual('NAME');\n    expect(component.ascending).toEqual(true);\n    expect(component.transition).toHaveBeenCalled();\n    expect(component.transition).toHaveBeenCalledTimes(2);\n  });\n});\n"],"version":3}