{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/event-manager.service.ts"],"names":[],"mappingseAAA,CAAA,CAAA;AACA,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AACA,MAAA,WAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AAEA,MAAa,gBAAb,CAA6B;AAC3B,EAAA,WAAA,CAAmB,IAAnB,EAAwC,OAAxC,EAAkD;AAAA;AAAA;AAAA;AAA/B,SAAA,IAAA,GAAA,IAAA;;AAA+B;AAAA;AAAV,SAAA,OAAA,GAAA,OAAA;AAAc;;AAD3B;;;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAIA;;AAEG;;;;IAIU,YAAY,GAAA,MAAZ,YAAY,CAAA;AAIvB,EAAA,WAAA,GAAA;AAAA;AAAA;AAAA;AACE,SAAK,UAAL,GAAkB,IAAI,MAAA,CAAA,UAAJ,CAAe,CAAC,QAAD,KAA2D;AAAA;AAAA;AAAA;AAC1F,WAAK,QAAL,GAAgB,QAAhB;AACD,KAFiB,EAEf,IAFe,CAEV,WAAA,CAAA,KAAA,EAFU,CAAlB;AAGD;AAED;;AAEG;;;AACH,EAAA,SAAS,CAAC,KAAD,EAA0C;AAAA;AAAA;AAAA;;AACjD,QAAI,KAAK,QAAT,EAAmB;AAAA;AAAA;AAAA;AACjB,WAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;AAGD;AAED;;;;AAIG;;;AACH,EAAA,SAAS,CAAC,UAAD,EAAgC,QAAhC,EAA6F;AAAA;AAAA;AAAA;;AACpG,QAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAAA;AAAA;AAAA;AAClC,MAAA,UAAU,GAAG,CAAC,UAAD,CAAb;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;;AADoG;AAIpG,WAAO,KAAK,UAAL,CACJ,IADI,CAEH,WAAA,CAAA,MAAA,CAAO,CAAC,KAAD,KAA8C;AAAA;AAAA;AAAA;;AACnD,WAAK,MAAM,SAAX,IAAwB,UAAxB,EAAoC;AAAA;AAAA;;AAClC;AAAK;AAAA,4CAAO,KAAP,KAAiB,QAAjB;AAAA;AAAA,qCAA6B,KAAK,KAAK,SAAvC,CAAD;AAAuD;AAAA,4CAAO,KAAP,KAAiB,QAAjB;AAAA;AAAA,qCAA6B,KAAK,CAAC,IAAN,KAAe,SAA5C,CAA3D,EAAmH;AAAA;AAAA;AAAA;AACjH,iBAAO,IAAP;AACD,SAFD;AAAA;AAAA;AAAA;AAAA;AAGD;;AALkD;AAAA;AAMnD,aAAO,KAAP;AACD,KAPD,CAFG,EAWJ,SAXI,CAWM,QAXN,CAAP;AAYD;AAED;;AAEG;;;AACH,EAAA,OAAO,CAAC,UAAD,EAAyB;AAAA;AAAA;AAAA;AAC9B,IAAA,UAAU,CAAC,WAAX;AACD;;AA/CsB,C;;;;;;;;;;;;;;AAAZ,YAAY,GAAA,OAAA,CAAA,UAAA,CAAA,CAHxB,MAAA,CAAA,UAAA,CAAW;AACV,EAAA,UAAU,EAAE;AADF,CAAX,CAGwB,E,2CAAA,CAAA,EAAZ,YAAY,CAAZ;;;;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\n\nexport class EventWithContent<T> {\n  constructor(public name: string, public content: T) {}\n}\n\n/**\n * An utility class to manage RX events\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventManager {\n  observable: Observable<EventWithContent<unknown> | string>;\n  observer?: Observer<EventWithContent<unknown> | string>;\n\n  constructor() {\n    this.observable = new Observable((observer: Observer<EventWithContent<unknown> | string>) => {\n      this.observer = observer;\n    }).pipe(share());\n  }\n\n  /**\n   * Method to broadcast the event to observer\n   */\n  broadcast(event: EventWithContent<unknown> | string): void {\n    if (this.observer) {\n      this.observer.next(event);\n    }\n  }\n\n  /**\n   * Method to subscribe to an event with callback\n   * @param eventNames  Single event name or array of event names to what subscribe\n   * @param callback    Callback to run when the event occurs\n   */\n  subscribe(eventNames: string | string[], callback: (event: EventWithContent<unknown> | string) => void): Subscription {\n    if (typeof eventNames === 'string') {\n      eventNames = [eventNames];\n    }\n    return this.observable\n      .pipe(\n        filter((event: EventWithContent<unknown> | string) => {\n          for (const eventName of eventNames) {\n            if ((typeof event === 'string' && event === eventName) || (typeof event !== 'string' && event.name === eventName)) {\n              return true;\n            }\n          }\n          return false;\n        })\n      )\n      .subscribe(callback);\n  }\n\n  /**\n   * Method to unsubscribe the subscription\n   */\n  destroy(subscriber: Subscription): void {\n    subscriber.unsubscribe();\n  }\n}\n"]}