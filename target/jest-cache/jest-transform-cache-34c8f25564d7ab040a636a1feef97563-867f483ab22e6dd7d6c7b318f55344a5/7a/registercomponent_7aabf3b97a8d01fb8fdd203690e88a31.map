{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/register/register.component.ts"],"names":[],"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","sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild('login', { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = this.fb.group({\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private registerService: RegisterService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const password = this.registerForm.get(['password'])!.value;\n    if (password !== this.registerForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      const login = this.registerForm.get(['login'])!.value;\n      const email = this.registerForm.get(['email'])!.value;\n      this.registerService.save({ login, email, password, langKey: 'en' }).subscribe(\n        () => (this.success = true),\n        response => this.processError(response)\n      );\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n"]}