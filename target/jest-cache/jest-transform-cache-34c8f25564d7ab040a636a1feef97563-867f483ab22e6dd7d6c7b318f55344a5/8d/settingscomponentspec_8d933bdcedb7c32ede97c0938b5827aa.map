{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/account/settings/settings.component.spec.ts"],"sourcesContent":["jest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { throwError, of } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { SettingsComponent } from './settings.component';\n\ndescribe('Component Tests', () => {\n  describe('SettingsComponent', () => {\n    let comp: SettingsComponent;\n    let fixture: ComponentFixture<SettingsComponent>;\n    let mockAccountService: AccountService;\n    const account: Account = {\n      firstName: 'John',\n      lastName: 'Doe',\n      activated: true,\n      email: 'john.doe@mail.com',\n      langKey: 'en',\n      login: 'john',\n      authorities: [],\n      imageUrl: '',\n    };\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [SettingsComponent],\n          providers: [FormBuilder, AccountService],\n        })\n          .overrideTemplate(SettingsComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SettingsComponent);\n      comp = fixture.componentInstance;\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(account));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(account));\n    });\n\n    it('should send the current identity upon save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => of({}));\n      const settingsFormValues = {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@mail.com',\n      };\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(mockAccountService.identity).toHaveBeenCalled();\n      expect(mockAccountService.save).toHaveBeenCalledWith(account);\n      expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);\n      expect(comp.settingsForm.value).toEqual(settingsFormValues);\n    });\n\n    it('should notify of success upon successful save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => of({}));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(true);\n    });\n\n    it('should notify of error upon failed save', () => {\n      // GIVEN\n      mockAccountService.save = jest.fn(() => throwError('ERROR'));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(false);\n    });\n  });\n});\n"],"version":3}