{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.spec.ts","mappings":";;AAAA,mDAAgF;AAChF,0DAAuE;AACvE,+BAA0B;AAE1B,uEAAmE;AACnE,mEAA+D;AAG/D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,IAA4B,CAAC;QACjC,IAAI,OAAiD,CAAC;QACtD,IAAI,OAA6B,CAAC;QAElC,UAAU,CACR,sBAAY,CAAC,GAAG,EAAE;YAChB,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;gBAClC,YAAY,EAAE,CAAC,gDAAsB,CAAC;gBACtC,SAAS,EAAE,CAAC,4CAAoB,CAAC;aAClC,CAAC;iBACC,gBAAgB,CAAC,gDAAsB,EAAE,EAAE,CAAC;iBAC5C,iBAAiB,EAAE,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;QAEF,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gDAAsB,CAAC,CAAC;YAC1D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,4CAAoB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;YACtB,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;gBACtC,QAAQ;gBACR,MAAM,KAAK,GAAW;oBACpB;wBACE,MAAM,EAAE,UAAU;wBAClB,UAAU,EAAE;4BACV,SAAS,EAAE;gCACT,IAAI,EAAE,aAAa;6BACpB;yBACF;qBACF;iBACF,CAAC;gBACF,MAAM,eAAe,GAAqB;oBACxC;wBACE,IAAI,EAAE,cAAc;wBACpB,UAAU,EAAE;4BACV,mBAAmB,EAAE;gCACnB,KAAK,EAAE,MAAM;6BACd;yBACF;qBACF;iBACF,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,eAAe,CAAC,CAAC,CAAC;gBAE/E,OAAO;gBACP,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAEhB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;gBAC5C,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;gBACtD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAClC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/configuration/configuration.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { ConfigurationComponent } from './configuration.component';\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\ndescribe('Component Tests', () => {\n  describe('ConfigurationComponent', () => {\n    let comp: ConfigurationComponent;\n    let fixture: ComponentFixture<ConfigurationComponent>;\n    let service: ConfigurationService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [ConfigurationComponent],\n          providers: [ConfigurationService],\n        })\n          .overrideTemplate(ConfigurationComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ConfigurationComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(ConfigurationService);\n    });\n\n    describe('OnInit', () => {\n      it('Should call load all on init', () => {\n        // GIVEN\n        const beans: Bean[] = [\n          {\n            prefix: 'jhipster',\n            properties: {\n              clientApp: {\n                name: 'jhipsterApp',\n              },\n            },\n          },\n        ];\n        const propertySources: PropertySource[] = [\n          {\n            name: 'server.ports',\n            properties: {\n              'local.server.port': {\n                value: '8080',\n              },\n            },\n          },\n        ];\n        jest.spyOn(service, 'getBeans').mockReturnValue(of(beans));\n        jest.spyOn(service, 'getPropertySources').mockReturnValue(of(propertySources));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.getBeans).toHaveBeenCalled();\n        expect(service.getPropertySources).toHaveBeenCalled();\n        expect(comp.allBeans).toEqual(beans);\n        expect(comp.beans).toEqual(beans);\n        expect(comp.propertySources).toEqual(propertySources);\n      });\n    });\n  });\n});\n"],"version":3}