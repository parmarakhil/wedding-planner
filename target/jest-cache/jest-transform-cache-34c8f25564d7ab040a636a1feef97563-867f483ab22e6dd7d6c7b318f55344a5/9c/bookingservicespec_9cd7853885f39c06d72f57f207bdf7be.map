{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAC9F,+BAA+B;AAE/B,gEAA8D;AAC9D,qEAA4D;AAC5D,oDAAqD;AAErD,uDAAmD;AAEnD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAI,OAAuB,CAAC;QAC5B,IAAI,QAA+B,CAAC;QACpC,IAAI,WAAqB,CAAC;QAC1B,IAAI,cAAsD,CAAC;QAC3D,IAAI,WAAwB,CAAC;QAE7B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;aACnC,CAAC,CAAC;YACH,cAAc,GAAG,IAAI,CAAC;YACtB,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC;YACzC,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;YACjD,WAAW,GAAG,KAAK,EAAE,CAAC;YAEtB,WAAW,GAAG;gBACZ,EAAE,EAAE,CAAC;gBACL,SAAS,EAAE,WAAW;gBACtB,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,iBAAI,CAAC,MAAM;gBACjB,WAAW,EAAE,WAAW;gBACxB,aAAa,EAAE,SAAS;gBACxB,OAAO,EAAE,SAAS;gBAClB,QAAQ,EAAE,SAAS;gBACnB,MAAM,EAAE,SAAS;aAClB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAChC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CACvC;oBACE,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBAC/C,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;iBAClD,EACD,WAAW,CACZ,CAAC;gBAEF,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAElE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CACvC;oBACE,EAAE,EAAE,CAAC;oBACL,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBAC/C,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;iBAClD,EACD,WAAW,CACZ,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAC5B;oBACE,SAAS,EAAE,WAAW;oBACtB,WAAW,EAAE,WAAW;iBACzB,EACD,mBAAmB,CACpB,CAAC;gBAEF,OAAO,CAAC,MAAM,CAAC,IAAI,uBAAO,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE9E,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;gBACnD,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CACvC;oBACE,EAAE,EAAE,CAAC;oBACL,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBAC/C,KAAK,EAAE,QAAQ;oBACf,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBACjD,aAAa,EAAE,QAAQ;oBACvB,OAAO,EAAE,QAAQ;oBACjB,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,QAAQ;iBACjB,EACD,WAAW,CACZ,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAC5B;oBACE,SAAS,EAAE,WAAW;oBACtB,WAAW,EAAE,WAAW;iBACzB,EACD,mBAAmB,CACpB,CAAC;gBAEF,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAEzE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBACzC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAC/B;oBACE,aAAa,EAAE,QAAQ;oBACvB,MAAM,EAAE,QAAQ;iBACjB,EACD,IAAI,uBAAO,EAAE,CACd,CAAC;gBAEF,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBAEpE,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAC5B;oBACE,SAAS,EAAE,WAAW;oBACtB,WAAW,EAAE,WAAW;iBACzB,EACD,mBAAmB,CACpB,CAAC;gBAEF,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAEnF,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;gBACpD,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBACzC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CACvC;oBACE,EAAE,EAAE,CAAC;oBACL,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBAC/C,KAAK,EAAE,QAAQ;oBACf,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,kCAAgB,CAAC;oBACjD,aAAa,EAAE,QAAQ;oBACvB,OAAO,EAAE,QAAQ;oBACjB,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,QAAQ;iBACjB,EACD,WAAW,CACZ,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAC5B;oBACE,SAAS,EAAE,WAAW;oBACtB,WAAW,EAAE,WAAW;iBACzB,EACD,mBAAmB,CACpB,CAAC;gBAEF,OAAO,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAEhE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACjC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBAClB,MAAM,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBAElE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;gBACrD,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC3B,MAAM,CAAC,cAAc,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBAC/C,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;oBAChD,MAAM,OAAO,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACtE,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;oBAC/D,MAAM,OAAO,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACtC,MAAM,iBAAiB,GAAe;0CAE/B,OAAO;wBAEZ,EAAE,EAAE,EAAE,GAAG,EAAE;qBACZ,CAAC;oBACF,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;oBACrF,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;oBAClE,MAAM,OAAO,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACtC,MAAM,iBAAiB,GAAe,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;oBACrF,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;oBACpD,MAAM,YAAY,GAAe,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC3E,MAAM,iBAAiB,GAAe,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,GAAG,YAAY,CAAC,CAAC;oBAC7F,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;oBAC/B,MAAM,OAAO,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACtC,MAAM,QAAQ,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACvC,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;oBAChF,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAC1C,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;oBACjD,MAAM,OAAO,GAAa,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;oBACvF,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;oBAC5D,MAAM,iBAAiB,GAAe,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;oBAC7F,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/entities/booking/service/booking.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport * as dayjs from 'dayjs';\n\nimport { DATE_TIME_FORMAT } from 'app/config/input.constants';\nimport { Plan } from 'app/entities/enumerations/plan.model';\nimport { IBooking, Booking } from '../booking.model';\n\nimport { BookingService } from './booking.service';\n\ndescribe('Service Tests', () => {\n  describe('Booking Service', () => {\n    let service: BookingService;\n    let httpMock: HttpTestingController;\n    let elemDefault: IBooking;\n    let expectedResult: IBooking | IBooking[] | boolean | null;\n    let currentDate: dayjs.Dayjs;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      expectedResult = null;\n      service = TestBed.inject(BookingService);\n      httpMock = TestBed.inject(HttpTestingController);\n      currentDate = dayjs();\n\n      elemDefault = {\n        id: 0,\n        eventDate: currentDate,\n        venue: 'AAAAAAA',\n        plan: Plan.BRONZE,\n        createdDate: currentDate,\n        contactNumber: 'AAAAAAA',\n        emailId: 'AAAAAAA',\n        userName: 'AAAAAAA',\n        userId: 'AAAAAAA',\n      };\n    });\n\n    describe('Service methods', () => {\n      it('should find an element', () => {\n        const returnedFromService = Object.assign(\n          {\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        service.find(123).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(elemDefault);\n      });\n\n      it('should create a Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 0,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.create(new Booking()).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'POST' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should update a Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            venue: 'BBBBBB',\n            plan: 'BBBBBB',\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n            contactNumber: 'BBBBBB',\n            emailId: 'BBBBBB',\n            userName: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.update(expected).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PUT' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should partial update a Booking', () => {\n        const patchObject = Object.assign(\n          {\n            contactNumber: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          new Booking()\n        );\n\n        const returnedFromService = Object.assign(patchObject, elemDefault);\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PATCH' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should return a list of Booking', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            eventDate: currentDate.format(DATE_TIME_FORMAT),\n            venue: 'BBBBBB',\n            plan: 'BBBBBB',\n            createdDate: currentDate.format(DATE_TIME_FORMAT),\n            contactNumber: 'BBBBBB',\n            emailId: 'BBBBBB',\n            userName: 'BBBBBB',\n            userId: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            eventDate: currentDate,\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.query().subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([returnedFromService]);\n        httpMock.verify();\n        expect(expectedResult).toContainEqual(expected);\n      });\n\n      it('should delete a Booking', () => {\n        service.delete(123).subscribe(resp => (expectedResult = resp.ok));\n\n        const req = httpMock.expectOne({ method: 'DELETE' });\n        req.flush({ status: 200 });\n        expect(expectedResult);\n      });\n\n      describe('addBookingToCollectionIfMissing', () => {\n        it('should add a Booking to an empty array', () => {\n          const booking: IBooking = { id: 123 };\n          expectedResult = service.addBookingToCollectionIfMissing([], booking);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should not add a Booking to an array that contains it', () => {\n          const booking: IBooking = { id: 123 };\n          const bookingCollection: IBooking[] = [\n            {\n              ...booking,\n            },\n            { id: 456 },\n          ];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);\n          expect(expectedResult).toHaveLength(2);\n        });\n\n        it(\"should add a Booking to an array that doesn't contain it\", () => {\n          const booking: IBooking = { id: 123 };\n          const bookingCollection: IBooking[] = [{ id: 456 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, booking);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should add only unique Booking to an array', () => {\n          const bookingArray: IBooking[] = [{ id: 123 }, { id: 456 }, { id: 52973 }];\n          const bookingCollection: IBooking[] = [{ id: 123 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, ...bookingArray);\n          expect(expectedResult).toHaveLength(3);\n        });\n\n        it('should accept varargs', () => {\n          const booking: IBooking = { id: 123 };\n          const booking2: IBooking = { id: 456 };\n          expectedResult = service.addBookingToCollectionIfMissing([], booking, booking2);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(booking);\n          expect(expectedResult).toContain(booking2);\n        });\n\n        it('should accept null and undefined values', () => {\n          const booking: IBooking = { id: 123 };\n          expectedResult = service.addBookingToCollectionIfMissing([], null, booking, undefined);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(booking);\n        });\n\n        it('should return initial array if no Booking is added', () => {\n          const bookingCollection: IBooking[] = [{ id: 123 }];\n          expectedResult = service.addBookingToCollectionIfMissing(bookingCollection, undefined, null);\n          expect(expectedResult).toEqual(bookingCollection);\n        });\n      });\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n  });\n});\n"],"version":3}