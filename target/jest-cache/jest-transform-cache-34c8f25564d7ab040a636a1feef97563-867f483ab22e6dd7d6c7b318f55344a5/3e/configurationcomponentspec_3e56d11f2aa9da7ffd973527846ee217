1798a77e34d11445266bcea7c51ab40a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const rxjs_1 = require("rxjs");
const configuration_component_1 = require("./configuration.component");
const configuration_service_1 = require("./configuration.service");
describe('Component Tests', () => {
    describe('ConfigurationComponent', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [configuration_component_1.ConfigurationComponent],
                providers: [configuration_service_1.ConfigurationService],
            })
                .overrideTemplate(configuration_component_1.ConfigurationComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(configuration_component_1.ConfigurationComponent);
            comp = fixture.componentInstance;
            service = testing_1.TestBed.inject(configuration_service_1.ConfigurationService);
        });
        describe('OnInit', () => {
            it('Should call load all on init', () => {
                // GIVEN
                const beans = [
                    {
                        prefix: 'jhipster',
                        properties: {
                            clientApp: {
                                name: 'jhipsterApp',
                            },
                        },
                    },
                ];
                const propertySources = [
                    {
                        name: 'server.ports',
                        properties: {
                            'local.server.port': {
                                value: '8080',
                            },
                        },
                    },
                ];
                jest.spyOn(service, 'getBeans').mockReturnValue(rxjs_1.of(beans));
                jest.spyOn(service, 'getPropertySources').mockReturnValue(rxjs_1.of(propertySources));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.getBeans).toHaveBeenCalled();
                expect(service.getPropertySources).toHaveBeenCalled();
                expect(comp.allBeans).toEqual(beans);
                expect(comp.beans).toEqual(beans);
                expect(comp.propertySources).toEqual(propertySources);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvYWRtaW4vY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBQ2hGLDBEQUF1RTtBQUN2RSwrQkFBMEI7QUFFMUIsdUVBQW1FO0FBQ25FLG1FQUErRDtBQUcvRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDdEMsSUFBSSxJQUE0QixDQUFDO1FBQ2pDLElBQUksT0FBaUQsQ0FBQztRQUN0RCxJQUFJLE9BQTZCLENBQUM7UUFFbEMsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1lBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLGlDQUF1QixDQUFDO2dCQUNsQyxZQUFZLEVBQUUsQ0FBQyxnREFBc0IsQ0FBQztnQkFDdEMsU0FBUyxFQUFFLENBQUMsNENBQW9CLENBQUM7YUFDbEMsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyxnREFBc0IsRUFBRSxFQUFFLENBQUM7aUJBQzVDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsZ0RBQXNCLENBQUMsQ0FBQztZQUMxRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw0Q0FBb0IsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDdEIsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtnQkFDdEMsUUFBUTtnQkFDUixNQUFNLEtBQUssR0FBVztvQkFDcEI7d0JBQ0UsTUFBTSxFQUFFLFVBQVU7d0JBQ2xCLFVBQVUsRUFBRTs0QkFDVixTQUFTLEVBQUU7Z0NBQ1QsSUFBSSxFQUFFLGFBQWE7NkJBQ3BCO3lCQUNGO3FCQUNGO2lCQUNGLENBQUM7Z0JBQ0YsTUFBTSxlQUFlLEdBQXFCO29CQUN4Qzt3QkFDRSxJQUFJLEVBQUUsY0FBYzt3QkFDcEIsVUFBVSxFQUFFOzRCQUNWLG1CQUFtQixFQUFFO2dDQUNuQixLQUFLLEVBQUUsTUFBTTs2QkFDZDt5QkFDRjtxQkFDRjtpQkFDRixDQUFDO2dCQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDM0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBRS9FLE9BQU87Z0JBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUVoQixPQUFPO2dCQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvYWRtaW4vY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBCZWFuLCBQcm9wZXJ0eVNvdXJjZSB9IGZyb20gJy4vY29uZmlndXJhdGlvbi5tb2RlbCc7XG5cbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdDb25maWd1cmF0aW9uQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBjb21wOiBDb25maWd1cmF0aW9uQ29tcG9uZW50O1xuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPENvbmZpZ3VyYXRpb25Db21wb25lbnQ+O1xuICAgIGxldCBzZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZTtcblxuICAgIGJlZm9yZUVhY2goXG4gICAgICB3YWl0Rm9yQXN5bmMoKCkgPT4ge1xuICAgICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICAgICAgZGVjbGFyYXRpb25zOiBbQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gICAgICAgICAgcHJvdmlkZXJzOiBbQ29uZmlndXJhdGlvblNlcnZpY2VdLFxuICAgICAgICB9KVxuICAgICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKENvbmZpZ3VyYXRpb25Db21wb25lbnQsICcnKVxuICAgICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoQ29uZmlndXJhdGlvbkNvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChDb25maWd1cmF0aW9uU2VydmljZSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnT25Jbml0JywgKCkgPT4ge1xuICAgICAgaXQoJ1Nob3VsZCBjYWxsIGxvYWQgYWxsIG9uIGluaXQnLCAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IGJlYW5zOiBCZWFuW10gPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJlZml4OiAnamhpcHN0ZXInLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBjbGllbnRBcHA6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnamhpcHN0ZXJBcHAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eVNvdXJjZXM6IFByb3BlcnR5U291cmNlW10gPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3NlcnZlci5wb3J0cycsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICdsb2NhbC5zZXJ2ZXIucG9ydCc6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJzgwODAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBqZXN0LnNweU9uKHNlcnZpY2UsICdnZXRCZWFucycpLm1vY2tSZXR1cm5WYWx1ZShvZihiZWFucykpO1xuICAgICAgICBqZXN0LnNweU9uKHNlcnZpY2UsICdnZXRQcm9wZXJ0eVNvdXJjZXMnKS5tb2NrUmV0dXJuVmFsdWUob2YocHJvcGVydHlTb3VyY2VzKSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc2VydmljZS5nZXRCZWFucykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3Qoc2VydmljZS5nZXRQcm9wZXJ0eVNvdXJjZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuYWxsQmVhbnMpLnRvRXF1YWwoYmVhbnMpO1xuICAgICAgICBleHBlY3QoY29tcC5iZWFucykudG9FcXVhbChiZWFucyk7XG4gICAgICAgIGV4cGVjdChjb21wLnByb3BlcnR5U291cmNlcykudG9FcXVhbChwcm9wZXJ0eVNvdXJjZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=