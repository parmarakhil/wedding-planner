{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/admin/logs/logs.component.ts"],"names":[],"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\nimport { Log, LoggersResponse, Level } from './log.model';\nimport { LogsService } from './logs.service';\n\n@Component({\n  selector: 'jhi-logs',\n  templateUrl: './logs.component.html',\n})\nexport class LogsComponent implements OnInit {\n  loggers?: Log[];\n  filteredAndOrderedLoggers?: Log[];\n  filter = '';\n  orderProp: keyof Log = 'name';\n  ascending = true;\n\n  constructor(private logsService: LogsService) {}\n\n  ngOnInit(): void {\n    this.findAndExtractLoggers();\n  }\n\n  changeLevel(name: string, level: Level): void {\n    this.logsService.changeLevel(name, level).subscribe(() => this.findAndExtractLoggers());\n  }\n\n  filterAndSort(): void {\n    this.filteredAndOrderedLoggers = this.loggers!.filter(\n      logger => !this.filter || logger.name.toLowerCase().includes(this.filter.toLowerCase())\n    ).sort((a, b) => {\n      if (a[this.orderProp] < b[this.orderProp]) {\n        return this.ascending ? -1 : 1;\n      } else if (a[this.orderProp] > b[this.orderProp]) {\n        return this.ascending ? 1 : -1;\n      } else if (this.orderProp === 'level') {\n        return a.name < b.name ? -1 : 1;\n      }\n      return 0;\n    });\n  }\n\n  private findAndExtractLoggers(): void {\n    this.logsService.findAll().subscribe((response: LoggersResponse) => {\n      this.loggers = Object.entries(response.loggers).map(([key, logger]) => new Log(key, logger.effectiveLevel));\n      this.filterAndSort();\n    });\n  }\n}\n"]}