{"version":3,"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/core/util/parse-links.service.ts"],"names":[],"mappingseK;;;;;;;;;;;;;;;;;;;;AAfL,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AAEA;;AAEG;;;;IAIU,UAAU,GAAA,MAAV,UAAU,CAAA;AACrB;;AAEG;AACH,EAAA,KAAK,CAAC,MAAD,EAAe;AAAA;AAAA;AAAA;;AAClB,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AAAA;AAAA;AAAA;AACvB,YAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD,KAFD;AAAA;AAAA;AAAA;AAAA,KADkB,CAKlB;;;AACA,UAAM,KAAK;AAAA;AAAA,8BAAa,MAAM,CAAC,KAAP,CAAa,GAAb,CAAb,CAAX;AACA,UAAM,KAAK;AAAA;AAAA,8BAA8B,EAA9B,CAAX,CAPkB,CASlB;;AATkB;AAAA;AAUlB,IAAA,KAAK,CAAC,OAAN,CAAc,CAAA,CAAC,KAAG;AAAA;AAAA;AAChB,YAAM,OAAO;AAAA;AAAA,iCAAa,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAb,CAAb;;AADgB;AAAA;;AAGhB,UAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AAAA;AAAA;AAAA;AACxB,cAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD,OAFD;AAAA;AAAA;AAAA;AAAA;;AAIA,YAAM,GAAG;AAAA;AAAA,iCAAW,OAAO,CAAC,CAAD,CAAP,CAAW,OAAX,CAAmB,QAAnB,EAA6B,IAA7B,EAAmC,IAAnC,EAAX,CAAT;AACA,YAAM,WAAW;AAAA;AAAA,iCAA0C,EAA1C,CAAjB;;AARgB;AAAA;AAUhB,MAAA,GAAG,CAAC,OAAJ,CACE,IAAI,MAAJ,CAAW,sBAAX,EAAmC,GAAnC,CADF,EAEE,CAAC,EAAD,EAAa,EAAb,EAAqC,EAArC,EAA6D,EAA7D,KAAuF;AAAA;AAAA;AAAA;;AACrF,YAAI,EAAE,KAAK,SAAX,EAAsB;AAAA;AAAA;AAAA;AACpB,UAAA,WAAW,CAAC,EAAD,CAAX,GAAkB,EAAlB;AACD,SAFD;AAAA;AAAA;AAAA;AAAA;;AADqF;AAIrF,eAAO;AAAA;AAAA,uCAAA,EAAE,KAAA,IAAF;AAAA;AAAA,uCAAA,EAAE,KAAA,KAAA,CAAF;AAAA;AAAA,uCAAA,EAAA;AAAA;AAAA,uCAAM,EAAN;AAAP;AACD,OAPH;;AAVgB;AAAA;;AAoBhB,UAAI,WAAW,CAAC,IAAZ,KAAqB,SAAzB,EAAoC;AAAA;AAAA;AAClC,cAAM,IAAI;AAAA;AAAA,mCAAW,OAAO,CAAC,CAAD,CAAP,CAAW,OAAX,CAAmB,YAAnB,EAAiC,IAAjC,EAAuC,IAAvC,EAAX,CAAV;;AADkC;AAAA;AAElC,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,QAAQ,CAAC,WAAW,CAAC,IAAb,EAAmB,EAAnB,CAAtB;AACD,OAHD;AAAA;AAAA;AAAA;AAAA;AAID,KAxBD;;AAVkB;AAAA;AAmClB,WAAO,KAAP;AACD;;AAxCoB,C;;;;AAAV,UAAU,GAAA,OAAA,CAAA,UAAA,CAAA,CAHtB,MAAA,CAAA,UAAA,CAAW;AACV,EAAA,UAAU,EAAE;AADF,CAAX,CAGsB,CAAA,EAAV,UAAU,CAAV;;;;AAAA,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(',');\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section: string[] = p.split(';');\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? '';\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n"]}