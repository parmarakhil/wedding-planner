39e0034a01c3f50ce923e90303954afa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
jest.mock('app/login/login.service');
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const ngx_webstorage_1 = require("ngx-webstorage");
const profile_info_model_1 = require("app/layouts/profiles/profile-info.model");
const account_service_1 = require("app/core/auth/account.service");
const profile_service_1 = require("app/layouts/profiles/profile.service");
const login_service_1 = require("app/login/login.service");
const navbar_component_1 = require("./navbar.component");
describe('Component Tests', () => {
    describe('Navbar Component', () => {
        let comp;
        let fixture;
        let accountService;
        let profileService;
        const account = {
            activated: true,
            authorities: [],
            email: '',
            firstName: 'John',
            langKey: '',
            lastName: 'Doe',
            login: 'john.doe',
            imageUrl: '',
        };
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule, ngx_webstorage_1.NgxWebstorageModule.forRoot()],
                declarations: [navbar_component_1.NavbarComponent],
                providers: [router_1.Router, login_service_1.LoginService],
            })
                .overrideTemplate(navbar_component_1.NavbarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(navbar_component_1.NavbarComponent);
            comp = fixture.componentInstance;
            accountService = testing_1.TestBed.inject(account_service_1.AccountService);
            profileService = testing_1.TestBed.inject(profile_service_1.ProfileService);
        });
        it('Should call profileService.getProfileInfo on init', () => {
            // GIVEN
            jest.spyOn(profileService, 'getProfileInfo').mockReturnValue(rxjs_1.of(new profile_info_model_1.ProfileInfo()));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(profileService.getProfileInfo).toHaveBeenCalled();
        });
        it('Should hold current authenticated user in variable account', () => {
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(comp.account).toBeNull();
            // WHEN
            accountService.authenticate(account);
            // THEN
            expect(comp.account).toEqual(account);
            // WHEN
            accountService.authenticate(null);
            // THEN
            expect(comp.account).toBeNull();
        });
        it('Should hold current authenticated user in variable account if user is authenticated before page load', () => {
            // GIVEN
            accountService.authenticate(account);
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(comp.account).toEqual(account);
            // WHEN
            accountService.authenticate(null);
            // THEN
            expect(comp.account).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvbGF5b3V0cy9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUVyQyxtREFBZ0Y7QUFDaEYsMERBQXVFO0FBQ3ZFLDRDQUF5QztBQUN6QywrQkFBMEI7QUFDMUIsbURBQXFEO0FBRXJELGdGQUFzRTtBQUV0RSxtRUFBK0Q7QUFDL0QsMEVBQXNFO0FBQ3RFLDJEQUF1RDtBQUV2RCx5REFBcUQ7QUFFckQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLElBQUksSUFBcUIsQ0FBQztRQUMxQixJQUFJLE9BQTBDLENBQUM7UUFDL0MsSUFBSSxjQUE4QixDQUFDO1FBQ25DLElBQUksY0FBOEIsQ0FBQztRQUNuQyxNQUFNLE9BQU8sR0FBWTtZQUN2QixTQUFTLEVBQUUsSUFBSTtZQUNmLFdBQVcsRUFBRSxFQUFFO1lBQ2YsS0FBSyxFQUFFLEVBQUU7WUFDVCxTQUFTLEVBQUUsTUFBTTtZQUNqQixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxLQUFLO1lBQ2YsS0FBSyxFQUFFLFVBQVU7WUFDakIsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1lBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLGlDQUF1QixFQUFFLG9DQUFtQixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNqRSxZQUFZLEVBQUUsQ0FBQyxrQ0FBZSxDQUFDO2dCQUMvQixTQUFTLEVBQUUsQ0FBQyxlQUFNLEVBQUUsNEJBQVksQ0FBQzthQUNsQyxDQUFDO2lCQUNDLGdCQUFnQixDQUFDLGtDQUFlLEVBQUUsRUFBRSxDQUFDO2lCQUNyQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGtDQUFlLENBQUMsQ0FBQztZQUNuRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLGNBQWMsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxnQ0FBYyxDQUFDLENBQUM7WUFDaEQsY0FBYyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFjLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxHQUFHLEVBQUU7WUFDM0QsUUFBUTtZQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUMsZUFBZSxDQUFDLFNBQUUsQ0FBQyxJQUFJLGdDQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFcEYsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1lBQ1AsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtZQUNwRSxPQUFPO1lBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhCLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhDLE9BQU87WUFDUCxjQUFjLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXJDLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV0QyxPQUFPO1lBQ1AsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVsQyxPQUFPO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzR0FBc0csRUFBRSxHQUFHLEVBQUU7WUFDOUcsUUFBUTtZQUNSLGNBQWMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFckMsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdEMsT0FBTztZQUNQLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbEMsT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbHNpbmdoL0Rlc2t0b3AvUHJvamVjdHMvd2VkZGluZy9zcmMvbWFpbi93ZWJhcHAvYXBwL2xheW91dHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ0Bhbmd1bGFyL3JvdXRlcicpO1xuamVzdC5tb2NrKCdhcHAvbG9naW4vbG9naW4uc2VydmljZScpO1xuXG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd4V2Vic3RvcmFnZU1vZHVsZSB9IGZyb20gJ25neC13ZWJzdG9yYWdlJztcblxuaW1wb3J0IHsgUHJvZmlsZUluZm8gfSBmcm9tICdhcHAvbGF5b3V0cy9wcm9maWxlcy9wcm9maWxlLWluZm8ubW9kZWwnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5tb2RlbCc7XG5pbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2ZpbGVTZXJ2aWNlIH0gZnJvbSAnYXBwL2xheW91dHMvcHJvZmlsZXMvcHJvZmlsZS5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJ2FwcC9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTmF2YmFyQ29tcG9uZW50IH0gZnJvbSAnLi9uYXZiYXIuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ05hdmJhciBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXA6IE5hdmJhckNvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxOYXZiYXJDb21wb25lbnQ+O1xuICAgIGxldCBhY2NvdW50U2VydmljZTogQWNjb3VudFNlcnZpY2U7XG4gICAgbGV0IHByb2ZpbGVTZXJ2aWNlOiBQcm9maWxlU2VydmljZTtcbiAgICBjb25zdCBhY2NvdW50OiBBY2NvdW50ID0ge1xuICAgICAgYWN0aXZhdGVkOiB0cnVlLFxuICAgICAgYXV0aG9yaXRpZXM6IFtdLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICBsYW5nS2V5OiAnJyxcbiAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgIGxvZ2luOiAnam9obi5kb2UnLFxuICAgICAgaW1hZ2VVcmw6ICcnLFxuICAgIH07XG5cbiAgICBiZWZvcmVFYWNoKFxuICAgICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIE5neFdlYnN0b3JhZ2VNb2R1bGUuZm9yUm9vdCgpXSxcbiAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtOYXZiYXJDb21wb25lbnRdLFxuICAgICAgICAgIHByb3ZpZGVyczogW1JvdXRlciwgTG9naW5TZXJ2aWNlXSxcbiAgICAgICAgfSlcbiAgICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShOYXZiYXJDb21wb25lbnQsICcnKVxuICAgICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTmF2YmFyQ29tcG9uZW50KTtcbiAgICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgYWNjb3VudFNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChBY2NvdW50U2VydmljZSk7XG4gICAgICBwcm9maWxlU2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFByb2ZpbGVTZXJ2aWNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgY2FsbCBwcm9maWxlU2VydmljZS5nZXRQcm9maWxlSW5mbyBvbiBpbml0JywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGplc3Quc3B5T24ocHJvZmlsZVNlcnZpY2UsICdnZXRQcm9maWxlSW5mbycpLm1vY2tSZXR1cm5WYWx1ZShvZihuZXcgUHJvZmlsZUluZm8oKSkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChwcm9maWxlU2VydmljZS5nZXRQcm9maWxlSW5mbykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBob2xkIGN1cnJlbnQgYXV0aGVudGljYXRlZCB1c2VyIGluIHZhcmlhYmxlIGFjY291bnQnLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmFjY291bnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGFjY291bnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShhY2NvdW50KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuYWNjb3VudCkudG9FcXVhbChhY2NvdW50KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYWNjb3VudFNlcnZpY2UuYXV0aGVudGljYXRlKG51bGwpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5hY2NvdW50KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBob2xkIGN1cnJlbnQgYXV0aGVudGljYXRlZCB1c2VyIGluIHZhcmlhYmxlIGFjY291bnQgaWYgdXNlciBpcyBhdXRoZW50aWNhdGVkIGJlZm9yZSBwYWdlIGxvYWQnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgYWNjb3VudFNlcnZpY2UuYXV0aGVudGljYXRlKGFjY291bnQpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmFjY291bnQpLnRvRXF1YWwoYWNjb3VudCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGFjY291bnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShudWxsKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuYWNjb3VudCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==