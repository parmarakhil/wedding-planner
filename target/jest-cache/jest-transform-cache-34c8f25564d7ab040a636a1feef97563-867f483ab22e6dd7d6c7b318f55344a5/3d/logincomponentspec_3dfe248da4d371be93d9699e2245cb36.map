{"file":"/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.component.spec.ts","mappings":"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","names":[],"sources":["/Users/akhilsingh/Desktop/Projects/wedding/src/main/webapp/app/login/login.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\njest.mock('app/login/login.service');\n\nimport { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { Router, Navigation } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { LoginService } from './login.service';\nimport { LoginComponent } from './login.component';\n\ndescribe('Component Tests', () => {\n  describe('LoginComponent', () => {\n    let comp: LoginComponent;\n    let fixture: ComponentFixture<LoginComponent>;\n    let mockRouter: Router;\n    let mockAccountService: AccountService;\n    let mockLoginService: LoginService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [LoginComponent],\n          providers: [\n            FormBuilder,\n            AccountService,\n            Router,\n            {\n              provide: LoginService,\n              useValue: {\n                login: jest.fn(() => of({})),\n              },\n            },\n          ],\n        })\n          .overrideTemplate(LoginComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(LoginComponent);\n      comp = fixture.componentInstance;\n      mockRouter = TestBed.inject(Router);\n      mockLoginService = TestBed.inject(LoginService);\n      mockAccountService = TestBed.inject(AccountService);\n    });\n\n    describe('ngOnInit', () => {\n      it('Should call accountService.identity on Init', () => {\n        // GIVEN\n        mockAccountService.identity = jest.fn(() => of(null));\n        mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(mockAccountService.identity).toHaveBeenCalled();\n      });\n\n      it('Should call accountService.isAuthenticated on Init', () => {\n        // GIVEN\n        mockAccountService.identity = jest.fn(() => of(null));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(mockAccountService.isAuthenticated).toHaveBeenCalled();\n      });\n\n      it('should navigate to home page on Init if authenticated=true', () => {\n        // GIVEN\n        mockAccountService.identity = jest.fn(() => of(null));\n        mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n        mockAccountService.isAuthenticated = () => true;\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n      });\n    });\n\n    describe('ngAfterViewInit', () => {\n      it('shoult set focus to username input after the view has been initialized', () => {\n        // GIVEN\n        const node = {\n          focus: jest.fn(),\n        };\n        comp.username = new ElementRef(node);\n\n        // WHEN\n        comp.ngAfterViewInit();\n\n        // THEN\n        expect(node.focus).toHaveBeenCalled();\n      });\n    });\n\n    describe('login', () => {\n      it('should authenticate the user and navigate to home page', () => {\n        // GIVEN\n        const credentials = {\n          username: 'admin',\n          password: 'admin',\n          rememberMe: true,\n        };\n\n        comp.loginForm.patchValue({\n          username: 'admin',\n          password: 'admin',\n          rememberMe: true,\n        });\n\n        // WHEN\n        comp.login();\n\n        // THEN\n        expect(comp.authenticationError).toEqual(false);\n        expect(mockLoginService.login).toHaveBeenCalledWith(credentials);\n        expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n      });\n\n      it('should authenticate the user but not navigate to home page if authentication process is already routing to cached url from localstorage', () => {\n        // GIVEN\n        jest.spyOn(mockRouter, 'getCurrentNavigation').mockReturnValue({} as Navigation);\n\n        // WHEN\n        comp.login();\n\n        // THEN\n        expect(comp.authenticationError).toEqual(false);\n        expect(mockRouter.navigate).not.toHaveBeenCalled();\n      });\n\n      it('should stay on login form and show error message on login error', () => {\n        // GIVEN\n        mockLoginService.login = jest.fn(() => throwError({}));\n\n        // WHEN\n        comp.login();\n\n        // THEN\n        expect(comp.authenticationError).toEqual(true);\n        expect(mockRouter.navigate).not.toHaveBeenCalled();\n      });\n    });\n  });\n});\n"],"version":3}