c369f3934e1439335c300b34d86c85fc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const configuration_service_1 = require("./configuration.service");
describe('Service Tests', () => {
    describe('Logs Service', () => {
        let service;
        let httpMock;
        let expectedResult;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            service = testing_1.TestBed.inject(configuration_service_1.ConfigurationService);
            httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('Service methods', () => {
            it('should get the config', () => {
                const bean = {
                    prefix: 'jhipster',
                    properties: {
                        clientApp: {
                            name: 'jhipsterApp',
                        },
                    },
                };
                const configProps = {
                    contexts: {
                        jhipster: {
                            beans: {
                                'tech.jhipster.config.JHipsterProperties': bean,
                            },
                        },
                    },
                };
                service.getBeans().subscribe(received => (expectedResult = received));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(configProps);
                expect(expectedResult).toEqual([bean]);
            });
            it('should get the env', () => {
                const propertySources = [
                    {
                        name: 'server.ports',
                        properties: {
                            'local.server.port': {
                                value: '8080',
                            },
                        },
                    },
                ];
                const env = { propertySources };
                service.getPropertySources().subscribe(received => (expectedResult = received));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(env);
                expect(expectedResult).toEqual(propertySources);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FraGlsc2luZ2gvRGVza3RvcC9Qcm9qZWN0cy93ZWRkaW5nL3NyYy9tYWluL3dlYmFwcC9hcHAvYWRtaW4vY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRDtBQUNoRCwwREFBOEY7QUFFOUYsbUVBQStEO0FBRy9ELFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQzVCLElBQUksT0FBNkIsQ0FBQztRQUNsQyxJQUFJLFFBQStCLENBQUM7UUFDcEMsSUFBSSxjQUFnRCxDQUFDO1FBRXJELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQzthQUNuQyxDQUFDLENBQUM7WUFFSCxjQUFjLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw0Q0FBb0IsQ0FBQyxDQUFDO1lBQy9DLFFBQVEsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7WUFDL0IsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxJQUFJLEdBQVM7b0JBQ2pCLE1BQU0sRUFBRSxVQUFVO29CQUNsQixVQUFVLEVBQUU7d0JBQ1YsU0FBUyxFQUFFOzRCQUNULElBQUksRUFBRSxhQUFhO3lCQUNwQjtxQkFDRjtpQkFDRixDQUFDO2dCQUNGLE1BQU0sV0FBVyxHQUFnQjtvQkFDL0IsUUFBUSxFQUFFO3dCQUNSLFFBQVEsRUFBRTs0QkFDUixLQUFLLEVBQUU7Z0NBQ0wseUNBQXlDLEVBQUUsSUFBSTs2QkFDaEQ7eUJBQ0Y7cUJBQ0Y7aUJBQ0YsQ0FBQztnQkFDRixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFFdEUsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7Z0JBQzVCLE1BQU0sZUFBZSxHQUFxQjtvQkFDeEM7d0JBQ0UsSUFBSSxFQUFFLGNBQWM7d0JBQ3BCLFVBQVUsRUFBRTs0QkFDVixtQkFBbUIsRUFBRTtnQ0FDbkIsS0FBSyxFQUFFLE1BQU07NkJBQ2Q7eUJBQ0Y7cUJBQ0Y7aUJBQ0YsQ0FBQztnQkFDRixNQUFNLEdBQUcsR0FBUSxFQUFFLGVBQWUsRUFBRSxDQUFDO2dCQUNyQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUVoRixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2xELEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWtoaWxzaW5naC9EZXNrdG9wL1Byb2plY3RzL3dlZGRpbmcvc3JjL21haW4vd2ViYXBwL2FwcC9hZG1pbi9jb25maWd1cmF0aW9uL2NvbmZpZ3VyYXRpb24uc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4vY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJlYW4sIENvbmZpZ1Byb3BzLCBFbnYsIFByb3BlcnR5U291cmNlIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uLm1vZGVsJztcblxuZGVzY3JpYmUoJ1NlcnZpY2UgVGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdMb2dzIFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgbGV0IHNlcnZpY2U6IENvbmZpZ3VyYXRpb25TZXJ2aWNlO1xuICAgIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xuICAgIGxldCBleHBlY3RlZFJlc3VsdDogQmVhbltdIHwgUHJvcGVydHlTb3VyY2VbXSB8IG51bGw7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0ZWRSZXN1bHQgPSBudWxsO1xuICAgICAgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KENvbmZpZ3VyYXRpb25TZXJ2aWNlKTtcbiAgICAgIGh0dHBNb2NrID0gVGVzdEJlZC5pbmplY3QoSHR0cFRlc3RpbmdDb250cm9sbGVyKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBodHRwTW9jay52ZXJpZnkoKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdTZXJ2aWNlIG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGdldCB0aGUgY29uZmlnJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBiZWFuOiBCZWFuID0ge1xuICAgICAgICAgIHByZWZpeDogJ2poaXBzdGVyJyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRBcHA6IHtcbiAgICAgICAgICAgICAgbmFtZTogJ2poaXBzdGVyQXBwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29uZmlnUHJvcHM6IENvbmZpZ1Byb3BzID0ge1xuICAgICAgICAgIGNvbnRleHRzOiB7XG4gICAgICAgICAgICBqaGlwc3Rlcjoge1xuICAgICAgICAgICAgICBiZWFuczoge1xuICAgICAgICAgICAgICAgICd0ZWNoLmpoaXBzdGVyLmNvbmZpZy5KSGlwc3RlclByb3BlcnRpZXMnOiBiZWFuLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBzZXJ2aWNlLmdldEJlYW5zKCkuc3Vic2NyaWJlKHJlY2VpdmVkID0+IChleHBlY3RlZFJlc3VsdCA9IHJlY2VpdmVkKSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKGNvbmZpZ1Byb3BzKTtcbiAgICAgICAgZXhwZWN0KGV4cGVjdGVkUmVzdWx0KS50b0VxdWFsKFtiZWFuXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBnZXQgdGhlIGVudicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvcGVydHlTb3VyY2VzOiBQcm9wZXJ0eVNvdXJjZVtdID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdzZXJ2ZXIucG9ydHMnLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAnbG9jYWwuc2VydmVyLnBvcnQnOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6ICc4MDgwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgZW52OiBFbnYgPSB7IHByb3BlcnR5U291cmNlcyB9O1xuICAgICAgICBzZXJ2aWNlLmdldFByb3BlcnR5U291cmNlcygpLnN1YnNjcmliZShyZWNlaXZlZCA9PiAoZXhwZWN0ZWRSZXN1bHQgPSByZWNlaXZlZCkpO1xuXG4gICAgICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7IG1ldGhvZDogJ0dFVCcgfSk7XG4gICAgICAgIHJlcS5mbHVzaChlbnYpO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwocHJvcGVydHlTb3VyY2VzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9