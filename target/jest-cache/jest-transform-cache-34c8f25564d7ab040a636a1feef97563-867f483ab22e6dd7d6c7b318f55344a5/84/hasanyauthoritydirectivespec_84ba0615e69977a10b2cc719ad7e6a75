9de43b86f8b12fd5b07a775febbfd285
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
jest.mock('app/core/auth/account.service');
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const has_any_authority_directive_1 = require("./has-any-authority.directive");
let TestHasAnyAuthorityDirectiveComponent = class TestHasAnyAuthorityDirectiveComponent {
};
TestHasAnyAuthorityDirectiveComponent.propDecorators = {
    content: [{ type: core_1.ViewChild, args: ['content', { static: false },] }]
};
TestHasAnyAuthorityDirectiveComponent = tslib_1.__decorate([
    core_1.Component({
        template: ` <div *jhiHasAnyAuthority="'ROLE_ADMIN'" #content></div> `,
    })
], TestHasAnyAuthorityDirectiveComponent);
describe('HasAnyAuthorityDirective tests', () => {
    let mockAccountService;
    const authenticationState = new rxjs_1.Subject();
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [has_any_authority_directive_1.HasAnyAuthorityDirective, TestHasAnyAuthorityDirectiveComponent],
            providers: [account_service_1.AccountService],
        });
    }));
    beforeEach(() => {
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
        mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
    });
    describe('set jhiHasAnyAuthority', () => {
        it('should show restricted content to user if user has required role', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
        });
        it('should not show restricted content to user if user has not required role', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => false);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeUndefined();
        });
    });
    describe('change authorities', () => {
        it('should show or not show restricted content correctly if user authorities are changing', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => false);
            // WHEN
            authenticationState.next();
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeUndefined();
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            // WHEN
            authenticationState.next();
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
        });
    });
    describe('ngOnDestroy', () => {
        it('should destroy authentication state subscription on component destroy', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const div = fixture.debugElement.queryAllNodes(platform_browser_1.By.directive(has_any_authority_directive_1.HasAnyAuthorityDirective))[0];
            const hasAnyAuthorityDirective = div.injector.get(has_any_authority_directive_1.HasAnyAuthorityDirective);
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();
            // WHEN
            jest.clearAllMocks();
            authenticationState.next();
            // THEN
            expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();
            // WHEN
            jest.clearAllMocks();
            hasAnyAuthorityDirective.ngOnDestroy();
            authenticationState.next();
            // THEN
            expect(mockAccountService.hasAnyAuthority).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,